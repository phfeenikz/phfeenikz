application/libraries/MY_Form_validation.php:        $CI->load->helper('params');
application/controllers/posts.php:        $this->load->database();
application/controllers/posts.php:        $this->load->helper('common');
application/controllers/posts.php:        $this->load->model('Posts_model');
application/controllers/posts.php:        $data['posts'] = $this->Posts_model->get_recent_posts()->result_array();
application/controllers/posts.php:        $this->load->library('form_validation');
application/controllers/posts.php:        if ($this->form_validation->run('login') == FALSE) {
application/controllers/login.php:        $this->load->library('form_validation');
application/controllers/login.php:        $this->form_validation->run('login');
application/controllers/welcome.php:		$this->load->view('welcome_message');
application/views/common/header_view.php:<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
application/views/welcome_message.php: background-color: #fff;
application/views/welcome_message.php: font-family: Lucida Grande, Verdana, Sans-serif;
application/views/welcome_message.php: font-size: 14px;
application/views/welcome_message.php: background-color: transparent;
application/views/welcome_message.php: font-weight: normal;
application/views/welcome_message.php: background-color: transparent;
application/views/welcome_message.php: border-bottom: 1px solid #D0D0D0;
application/views/welcome_message.php: font-size: 16px;
application/views/welcome_message.php: font-weight: bold;
application/views/welcome_message.php: font-family: Monaco, Verdana, Sans-serif;
application/views/welcome_message.php: font-size: 12px;
application/views/welcome_message.php: background-color: #f9f9f9;
application/helpers/common_helper.php:    $obj->load->view('common/header_view', $data);
application/helpers/common_helper.php:    $obj->load->view($view, $data);
application/helpers/common_helper.php:    $obj->load->view('common/footer_view', $data);
application/helpers/params_helper.php:        'username' => '^[1-9A-Za-z!@#$%^&*()]{6,16}$'
application/helpers/params_helper.php:        'password' => '^[1-9A-Za-z!@#$%^&*()]{6,16}$'
application/config/smileys.php:| -------------------------------------------------------------------
application/config/smileys.php:| -------------------------------------------------------------------
application/config/smileys.php:| :-) and :) use the same image replacement.
application/config/smileys.php:	':-)'			=>	array('grin.gif',			'19',	'19',	'grin'),
application/config/smileys.php:	';-)'			=>	array('wink.gif',			'19',	'19',	'wink'),
application/config/smileys.php:	':-S'			=>	array('confused.gif',		'19',	'19',	'confused'),
application/config/smileys.php:	':-P'			=>	array('tongue_laugh.gif',	'19',	'19',	'tongue laugh'),
application/config/smileys.php:	'%-P'			=>	array('tongue_rolleye.gif',	'19',	'19',	'tongue rolleye'),
application/config/smileys.php:	';-P'			=>	array('tongue_wink.gif',	'19',	'19',	'tongue wink'),
application/config/smileys.php:	'8-/'			=>	array('ohoh.gif',			'19',	'19',	'oh oh'),
application/config/smileys.php:	':-/'			=>	array('hmm.gif',			'19',	'19',	'hmmm'),
application/config/smileys.php:	'>:-('			=>	array('angry.gif',			'19',	'19',	'angry'),
application/config/doctypes.php:					'xhtml11'		=> '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
application/config/doctypes.php:					'xhtml1-strict'	=> '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
application/config/doctypes.php:					'xhtml1-trans'	=> '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
application/config/doctypes.php:					'xhtml1-frame'	=> '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
application/config/doctypes.php:					'html4-strict'	=> '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">',
application/config/doctypes.php:					'html4-trans'	=> '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">',
application/config/doctypes.php:					'html4-frame'	=> '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">'
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:| 'AUTO'			Default - auto detects
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:$config['charset'] = "UTF-8";
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:| as few characters as possible.  By default only these are allowed: a-z 0-9~%.:_-
application/config/config.php:| Leave blank to allow all characters -- but only if you are insane.
application/config/config.php:$config['permitted_uri_chars'] = 'a-z 0-9~%.:_\-';
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:| By default CodeIgniter uses search-engine friendly segment based URLs:
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:$config['log_date_format'] = 'Y-m-d H:i:s';
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:| 'cookie_domain' = Set to .your-domain.com for site-wide cookies
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:| can rewrite the tags on-the-fly, enabling you to utilize that syntax
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:|--------------------------------------------------------------------------
application/config/config.php:| Comma-delimited, e.g. '10.0.1.200,10.0.1.201'
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| AUTO-LOADER
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| In order to keep the framework as light-weight as possible only the
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:|  Auto-load Libraries
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:|  Auto-load Helper Files
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:|  Auto-load Plugins
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:|  Auto-load Config files
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:|  Auto-load Language files
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:| -------------------------------------------------------------------
application/config/autoload.php:|  Auto-load Models
application/config/autoload.php:| -------------------------------------------------------------------
application/config/constants.php:|--------------------------------------------------------------------------
application/config/constants.php:|--------------------------------------------------------------------------
application/config/constants.php:|--------------------------------------------------------------------------
application/config/constants.php:|--------------------------------------------------------------------------
application/config/database.php:| -------------------------------------------------------------------
application/config/database.php:| -------------------------------------------------------------------
application/config/database.php:| -------------------------------------------------------------------
application/config/database.php:| -------------------------------------------------------------------
application/config/database.php:|	['pconnect'] TRUE/FALSE - Whether to use a persistent connection
application/config/database.php:|	['db_debug'] TRUE/FALSE - Whether database errors should be displayed.
application/config/database.php:|	['cache_on'] TRUE/FALSE - Enables/disables query caching
application/config/hooks.php:| -------------------------------------------------------------------------
application/config/hooks.php:| -------------------------------------------------------------------------
application/config/user_agents.php:| -------------------------------------------------------------------
application/config/user_agents.php:| -------------------------------------------------------------------
application/config/user_agents.php:					'hp-ux'				=> 'HP-UX',
application/config/user_agents.php:// multiple browser types so we want to identify the sub-type first.
application/config/user_agents.php:					'sie-'				=> "Siemens",
application/config/user_agents.php:					'mot-'				=> "Motorola",
application/config/user_agents.php:					'nec-'				=> "NEC",
application/config/routes.php:| -------------------------------------------------------------------------
application/config/routes.php:| -------------------------------------------------------------------------
application/config/routes.php:| This file lets you re-map URI requests to specific controller functions.
application/config/routes.php:| Typically there is a one-to-one relationship between a URL string
application/config/routes.php:| -------------------------------------------------------------------------
application/config/routes.php:| -------------------------------------------------------------------------
application/config/mimes.php:| -------------------------------------------------------------------
application/config/mimes.php:| -------------------------------------------------------------------
application/config/mimes.php:$mimes = array(	'hqx'	=>	'application/mac-binhex40',
application/config/mimes.php:				'cpt'	=>	'application/mac-compactpro',
application/config/mimes.php:				'csv'	=>	array('text/x-comma-separated-values', 'text/comma-separated-values', 'application/octet-stream', 'application/vnd.ms-excel', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.msexcel'),
application/config/mimes.php:				'dms'	=>	'application/octet-stream',
application/config/mimes.php:				'lha'	=>	'application/octet-stream',
application/config/mimes.php:				'lzh'	=>	'application/octet-stream',
application/config/mimes.php:				'exe'	=>	'application/octet-stream',
application/config/mimes.php:				'class'	=>	'application/octet-stream',
application/config/mimes.php:				'psd'	=>	'application/x-photoshop',
application/config/mimes.php:				'so'	=>	'application/octet-stream',
application/config/mimes.php:				'sea'	=>	'application/octet-stream',
application/config/mimes.php:				'dll'	=>	'application/octet-stream',
application/config/mimes.php:				'pdf'	=>	array('application/pdf', 'application/x-download'),
application/config/mimes.php:				'xls'	=>	array('application/excel', 'application/vnd.ms-excel', 'application/msexcel'),
application/config/mimes.php:				'ppt'	=>	array('application/powerpoint', 'application/vnd.ms-powerpoint'),
application/config/mimes.php:				'dcr'	=>	'application/x-director',
application/config/mimes.php:				'dir'	=>	'application/x-director',
application/config/mimes.php:				'dxr'	=>	'application/x-director',
application/config/mimes.php:				'dvi'	=>	'application/x-dvi',
application/config/mimes.php:				'gtar'	=>	'application/x-gtar',
application/config/mimes.php:				'gz'	=>	'application/x-gzip',
application/config/mimes.php:				'php'	=>	'application/x-httpd-php',
application/config/mimes.php:				'php4'	=>	'application/x-httpd-php',
application/config/mimes.php:				'php3'	=>	'application/x-httpd-php',
application/config/mimes.php:				'phtml'	=>	'application/x-httpd-php',
application/config/mimes.php:				'phps'	=>	'application/x-httpd-php-source',
application/config/mimes.php:				'js'	=>	'application/x-javascript',
application/config/mimes.php:				'swf'	=>	'application/x-shockwave-flash',
application/config/mimes.php:				'sit'	=>	'application/x-stuffit',
application/config/mimes.php:				'tar'	=>	'application/x-tar',
application/config/mimes.php:				'tgz'	=>	'application/x-tar',
application/config/mimes.php:				'zip'	=>  array('application/x-zip', 'application/zip', 'application/x-zip-compressed'),
application/config/mimes.php:				'aif'	=>	'audio/x-aiff',
application/config/mimes.php:				'aiff'	=>	'audio/x-aiff',
application/config/mimes.php:				'aifc'	=>	'audio/x-aiff',
application/config/mimes.php:				'ram'	=>	'audio/x-pn-realaudio',
application/config/mimes.php:				'rm'	=>	'audio/x-pn-realaudio',
application/config/mimes.php:				'rpm'	=>	'audio/x-pn-realaudio-plugin',
application/config/mimes.php:				'ra'	=>	'audio/x-realaudio',
application/config/mimes.php:				'rv'	=>	'video/vnd.rn-realvideo',
application/config/mimes.php:				'wav'	=>	'audio/x-wav',
application/config/mimes.php:				'png'	=>	array('image/png',  'image/x-png'),
application/config/mimes.php:				'log'	=>	array('text/plain', 'text/x-log'),
application/config/mimes.php:				'avi'	=>	'video/x-msvideo',
application/config/mimes.php:				'movie'	=>	'video/x-sgi-movie',
application/config/mimes.php:				'docx'	=>	'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
application/config/mimes.php:				'xlsx'	=>	'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
application/config/mimes.php:				'word'	=>	array('application/msword', 'application/octet-stream'),
application/models/posts_model.php:        $result = $this->db->query($sql);
application/errors/error_general.php:background-color:	#fff;
application/errors/error_general.php:font-family:		Lucida Grande, Verdana, Sans-serif;
application/errors/error_general.php:font-size:			12px;
application/errors/error_general.php:background-color:	#fff;
application/errors/error_general.php:font-weight:		normal;
application/errors/error_general.php:font-size:			14px;
application/errors/error_db.php:background-color:	#fff;
application/errors/error_db.php:font-family:		Lucida Grande, Verdana, Sans-serif;
application/errors/error_db.php:font-size:			12px;
application/errors/error_db.php:background-color:	#fff;
application/errors/error_db.php:font-weight:		normal;
application/errors/error_db.php:font-size:			14px;
application/errors/error_php.php:<div style="border:1px solid #990000;padding-left:20px;margin:0 0 10px 0;">
application/errors/error_404.php:background-color:	#fff;
application/errors/error_404.php:font-family:		Lucida Grande, Verdana, Sans-serif;
application/errors/error_404.php:font-size:			12px;
application/errors/error_404.php:background-color:	#fff;
application/errors/error_404.php:font-weight:		normal;
application/errors/error_404.php:font-size:			14px;
codeigniter/Base4.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
codeigniter/Base4.php:// ------------------------------------------------------------------------
codeigniter/Base4.php: * CI_BASE - For PHP 4
codeigniter/Base4.php: * enable functions like $this->load->library('email') to instantiate
codeigniter/Base4.php: * classes that can then be used within controllers as $this->email->send()
codeigniter/Base4.php: * @category	front-controller
codeigniter/Base4.php:		// This allows syntax like $this->load->foo() to work
codeigniter/Base4.php:		$this->load =& $this;
codeigniter/Base4.php:		$OBJ = $this->load; // Do NOT use a reference.
codeigniter/Base4.php:	return $OBJ->load;
codeigniter/Compat.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
codeigniter/Compat.php:// ------------------------------------------------------------------------
codeigniter/Compat.php:// ------------------------------------------------------------------------
codeigniter/Compat.php:		return ! preg_match('/[^0-9]/', $str);
codeigniter/Compat.php:// --------------------------------------------------------------------
codeigniter/Compat.php: * http://us.php.net/manual/en/function.ctype-alnum.php
codeigniter/Compat.php:		return ! preg_match('/[^0-9a-z]/i', $str);
codeigniter/CodeIgniter.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
codeigniter/CodeIgniter.php:// ------------------------------------------------------------------------
codeigniter/CodeIgniter.php: * @category	Front-controller
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:$BM->mark('total_execution_time_start');
codeigniter/CodeIgniter.php:$BM->mark('loading_time_base_classes_start');
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:$EXT->_call_hook('pre_system');
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:if ($EXT->_call_hook('cache_override') === FALSE)
codeigniter/CodeIgniter.php:	if ($OUT->_display_cache($CFG, $URI) == TRUE)
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:if ( ! file_exists(APPPATH.'controllers/'.$RTR->fetch_directory().$RTR->fetch_class().EXT))
codeigniter/CodeIgniter.php:include(APPPATH.'controllers/'.$RTR->fetch_directory().$RTR->fetch_class().EXT);
codeigniter/CodeIgniter.php:$BM->mark('loading_time_base_classes_end');
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:$class  = $RTR->fetch_class();
codeigniter/CodeIgniter.php:$method = $RTR->fetch_method();
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:$EXT->_call_hook('pre_controller');
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:$BM->mark('controller_execution_time_( '.$class.' / '.$method.' )_start');
codeigniter/CodeIgniter.php:if ($RTR->scaffolding_request === TRUE)
codeigniter/CodeIgniter.php:	if ($EXT->_call_hook('scaffolding_override') === FALSE)
codeigniter/CodeIgniter.php:		$CI->_ci_scaffolding();
codeigniter/CodeIgniter.php:	 * ------------------------------------------------------
codeigniter/CodeIgniter.php:	 * ------------------------------------------------------
codeigniter/CodeIgniter.php:	$EXT->_call_hook('post_controller_constructor');
codeigniter/CodeIgniter.php:		$CI->_remap($method);
codeigniter/CodeIgniter.php:		call_user_func_array(array(&$CI, $method), array_slice($URI->rsegments, 2));
codeigniter/CodeIgniter.php:$BM->mark('controller_execution_time_( '.$class.' / '.$method.' )_end');
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:$EXT->_call_hook('post_controller');
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:if ($EXT->_call_hook('display_override') === FALSE)
codeigniter/CodeIgniter.php:	$OUT->_display();
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:$EXT->_call_hook('post_system');
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php: * ------------------------------------------------------
codeigniter/CodeIgniter.php:if (class_exists('CI_DB') AND isset($CI->db))
codeigniter/CodeIgniter.php:	$CI->db->close();
codeigniter/Common.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
codeigniter/Common.php:// ------------------------------------------------------------------------
codeigniter/Common.php:// ------------------------------------------------------------------------
codeigniter/Common.php: * the file, based on the read-only attribute.  is_writable() is also unreliable
codeigniter/Common.php:// ------------------------------------------------------------------------
codeigniter/Common.php:	echo $error->show_error('An Error Was Encountered', $message, 'error_general', $status_code);
codeigniter/Common.php:	$error->show_404($page);
codeigniter/Common.php:	$LOG->write_log($level, $message, $php_error);
codeigniter/Common.php:						203	=> 'Non-Authoritative Information',
codeigniter/Common.php:						414	=> 'Request-URI Too Long',
codeigniter/Common.php:		$error->show_php_error($severity, $message, $filepath, $line);
codeigniter/Common.php:	$error->log_exception($severity, $message, $filepath, $line);
codeigniter/Base5.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
codeigniter/Base5.php:// ------------------------------------------------------------------------
codeigniter/Base5.php: * CI_BASE - For PHP 5
codeigniter/Base5.php: * @category	front-controller
database/drivers/postgre/postgre_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/postgre/postgre_utility.php:// ------------------------------------------------------------------------
database/drivers/postgre/postgre_utility.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_utility.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_utility.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_utility.php:		return $this->db->display_error('db_unsuported_feature');
database/drivers/postgre/postgre_utility.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/postgre/postgre_result.php:// ------------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:		return @pg_num_rows($this->result_id);
database/drivers/postgre/postgre_result.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:		return @pg_num_fields($this->result_id);
database/drivers/postgre/postgre_result.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:		for ($i = 0; $i < $this->num_fields(); $i++)
database/drivers/postgre/postgre_result.php:			$field_names[] = pg_field_name($this->result_id, $i);
database/drivers/postgre/postgre_result.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:	 * Generates an array of objects containing field meta-data
database/drivers/postgre/postgre_result.php:		for ($i = 0; $i < $this->num_fields(); $i++)
database/drivers/postgre/postgre_result.php:			$F->name 		= pg_field_name($this->result_id, $i);
database/drivers/postgre/postgre_result.php:			$F->type 		= pg_field_type($this->result_id, $i);
database/drivers/postgre/postgre_result.php:			$F->max_length	= pg_field_size($this->result_id, $i);
database/drivers/postgre/postgre_result.php:			$F->primary_key = 0;
database/drivers/postgre/postgre_result.php:			$F->default		= '';
database/drivers/postgre/postgre_result.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:		if (is_resource($this->result_id))
database/drivers/postgre/postgre_result.php:			pg_free_result($this->result_id);
database/drivers/postgre/postgre_result.php:			$this->result_id = FALSE;
database/drivers/postgre/postgre_result.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:		return pg_result_seek($this->result_id, $n);
database/drivers/postgre/postgre_result.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:	 * Result - associative array
database/drivers/postgre/postgre_result.php:		return pg_fetch_assoc($this->result_id);
database/drivers/postgre/postgre_result.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_result.php:	 * Result - object
database/drivers/postgre/postgre_result.php:		return pg_fetch_object($this->result_id);
database/drivers/postgre/postgre_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/postgre/postgre_forge.php:// ------------------------------------------------------------------------
database/drivers/postgre/postgre_forge.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_forge.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_forge.php:		$sql .= $this->db->_escape_identifiers($table)." (";
database/drivers/postgre/postgre_forge.php:				$sql .= "\n\t".$this->db->_protect_identifiers($field);
database/drivers/postgre/postgre_forge.php:			$primary_keys = $this->db->_protect_identifiers($primary_keys);
database/drivers/postgre/postgre_forge.php:					$key = $this->db->_protect_identifiers($key);	
database/drivers/postgre/postgre_forge.php:					$key = array($this->db->_protect_identifiers($key));
database/drivers/postgre/postgre_forge.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_forge.php:		return "DROP TABLE ".$this->db->_escape_identifiers($table)." CASCADE";
database/drivers/postgre/postgre_forge.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_forge.php:	 * Generates a platform-specific query so that a table can be altered
database/drivers/postgre/postgre_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table)." $alter_type ".$this->db->_protect_identifiers($column_name);
database/drivers/postgre/postgre_forge.php:			$sql .= ' AFTER ' . $this->db->_protect_identifiers($after_field);
database/drivers/postgre/postgre_forge.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_forge.php:	 * Generates a platform-specific query so that a table can be renamed
database/drivers/postgre/postgre_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table_name)." RENAME TO ".$this->db->_protect_identifiers($new_table_name);
database/drivers/postgre/postgre_driver.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/postgre/postgre_driver.php:// ------------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:			if (isset($this->$key) && $this->$key != '')
database/drivers/postgre/postgre_driver.php:				$connect_string .= " $val=".$this->$key;
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Non-persistent database connection
database/drivers/postgre/postgre_driver.php:		return @pg_connect($this->_connect_string());
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		return @pg_pconnect($this->_connect_string());
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		if (pg_ping($this->conn_id) === FALSE)
database/drivers/postgre/postgre_driver.php:			$this->conn_id = FALSE;
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		// @todo - add support if needed
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		$sql = $this->_prep_query($sql);
database/drivers/postgre/postgre_driver.php:		return @pg_query($this->conn_id, $sql);
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		if ( ! $this->trans_enabled)
database/drivers/postgre/postgre_driver.php:		if ($this->_trans_depth > 0)
database/drivers/postgre/postgre_driver.php:		$this->_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;
database/drivers/postgre/postgre_driver.php:		return @pg_exec($this->conn_id, "begin");
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		if ( ! $this->trans_enabled)
database/drivers/postgre/postgre_driver.php:		if ($this->_trans_depth > 0)
database/drivers/postgre/postgre_driver.php:		return @pg_exec($this->conn_id, "commit");
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		if ( ! $this->trans_enabled)
database/drivers/postgre/postgre_driver.php:		if ($this->_trans_depth > 0)
database/drivers/postgre/postgre_driver.php:		return @pg_exec($this->conn_id, "rollback");
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:				$str[$key] = $this->escape_str($val, $like);
database/drivers/postgre/postgre_driver.php:			$str = str_replace(	array('%', '_', $this->_like_escape_chr),
database/drivers/postgre/postgre_driver.php:								array($this->_like_escape_chr.'%', $this->_like_escape_chr.'_', $this->_like_escape_chr.$this->_like_escape_chr),
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		return @pg_affected_rows($this->result_id);
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		$v = $this->_version();
database/drivers/postgre/postgre_driver.php:			$query = $this->query($sql);
database/drivers/postgre/postgre_driver.php:			$row = $query->row();
database/drivers/postgre/postgre_driver.php:			$sql = sprintf("SELECT CURRVAL('%s') as ins_id", $row->seq);
database/drivers/postgre/postgre_driver.php:			return pg_last_oid($this->result_id);
database/drivers/postgre/postgre_driver.php:		$query = $this->query($sql);
database/drivers/postgre/postgre_driver.php:		$row = $query->row();
database/drivers/postgre/postgre_driver.php:		return $row->ins_id;
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific query string that counts all records in
database/drivers/postgre/postgre_driver.php:		$query = $this->query($this->_count_string . $this->_protect_identifiers('numrows') . " FROM " . $this->_protect_identifiers($table, TRUE, NULL, FALSE));
database/drivers/postgre/postgre_driver.php:		if ($query->num_rows() == 0)
database/drivers/postgre/postgre_driver.php:		$row = $query->row();
database/drivers/postgre/postgre_driver.php:		return (int) $row->numrows;
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific query string so that the table names can be fetched
database/drivers/postgre/postgre_driver.php:		if ($prefix_limit !== FALSE AND $this->dbprefix != '')
database/drivers/postgre/postgre_driver.php:			$sql .= " AND table_name LIKE '".$this->escape_like_str($this->dbprefix)."%' ".sprintf($this->_like_escape_str, $this->_like_escape_char);
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific query string so that the column names can be fetched
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific query so that the column data can be retrieved
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		return pg_last_error($this->conn_id);
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:		if ($this->_escape_char == '')
database/drivers/postgre/postgre_driver.php:		foreach ($this->_reserved_identifiers as $id)
database/drivers/postgre/postgre_driver.php:				$str = $this->_escape_char. str_replace('.', $this->_escape_char.'.', $item);  
database/drivers/postgre/postgre_driver.php:				return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/postgre/postgre_driver.php:			$str = $this->_escape_char.str_replace('.', $this->_escape_char.'.'.$this->_escape_char, $item).$this->_escape_char;			
database/drivers/postgre/postgre_driver.php:			$str = $this->_escape_char.$item.$this->_escape_char;
database/drivers/postgre/postgre_driver.php:		return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific insert string from the supplied data
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific update string from the supplied data
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific truncate string from the supplied data
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific delete string from the supplied data
database/drivers/postgre/postgre_driver.php:			$conditions .= implode("\n", $this->ar_where);
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/postgre/postgre_driver.php:	 * Generates a platform-specific LIMIT clause
database/drivers/postgre/postgre_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mssql/mssql_driver.php:// ------------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Non-persistent database connection
database/drivers/mssql/mssql_driver.php:		if ($this->port != '')
database/drivers/mssql/mssql_driver.php:			$this->hostname .= ','.$this->port;
database/drivers/mssql/mssql_driver.php:		return @mssql_connect($this->hostname, $this->username, $this->password);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		if ($this->port != '')
database/drivers/mssql/mssql_driver.php:			$this->hostname .= ','.$this->port;
database/drivers/mssql/mssql_driver.php:		return @mssql_pconnect($this->hostname, $this->username, $this->password);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		return @mssql_select_db('['.$this->database.']', $this->conn_id);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		// @todo - add support if needed
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		$sql = $this->_prep_query($sql);
database/drivers/mssql/mssql_driver.php:		return @mssql_query($sql, $this->conn_id);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mssql/mssql_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mssql/mssql_driver.php:		$this->_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;
database/drivers/mssql/mssql_driver.php:		$this->simple_query('BEGIN TRAN');
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mssql/mssql_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mssql/mssql_driver.php:		$this->simple_query('COMMIT TRAN');
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mssql/mssql_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mssql/mssql_driver.php:		$this->simple_query('ROLLBACK TRAN');
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:				$str[$key] = $this->escape_str($val, $like);
database/drivers/mssql/mssql_driver.php:		$str = str_replace("'", "''", $CI->input->_remove_invisible_characters($str));
database/drivers/mssql/mssql_driver.php:			$str = str_replace(	array('%', '_', $this->_like_escape_chr),
database/drivers/mssql/mssql_driver.php:								array($this->_like_escape_chr.'%', $this->_like_escape_chr.'_', $this->_like_escape_chr.$this->_like_escape_chr),
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		return @mssql_rows_affected($this->conn_id);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		$ver = self::_parse_major_version($this->version());
database/drivers/mssql/mssql_driver.php:		$query = $this->query($sql);
database/drivers/mssql/mssql_driver.php:		$row = $query->row();
database/drivers/mssql/mssql_driver.php:		return $row->last_id;
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		preg_match('/([0-9]+)\.([0-9]+)\.([0-9]+)/', $version, $ver_info);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific query string that counts all records in
database/drivers/mssql/mssql_driver.php:		$query = $this->query($this->_count_string . $this->_protect_identifiers('numrows') . " FROM " . $this->_protect_identifiers($table, TRUE, NULL, FALSE));
database/drivers/mssql/mssql_driver.php:		if ($query->num_rows() == 0)
database/drivers/mssql/mssql_driver.php:		$row = $query->row();
database/drivers/mssql/mssql_driver.php:		return (int) $row->numrows;
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific query string so that the table names can be fetched
database/drivers/mssql/mssql_driver.php:		if ($prefix_limit !== FALSE AND $this->dbprefix != '')
database/drivers/mssql/mssql_driver.php:			//$sql .= " LIKE '".$this->escape_like_str($this->dbprefix)."%' ".sprintf($this->_like_escape_str, $this->_like_escape_char);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific query string so that the column names can be fetched
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific query so that the column data can be retrieved
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:		if ($this->_escape_char == '')
database/drivers/mssql/mssql_driver.php:		foreach ($this->_reserved_identifiers as $id)
database/drivers/mssql/mssql_driver.php:				$str = $this->_escape_char. str_replace('.', $this->_escape_char.'.', $item);  
database/drivers/mssql/mssql_driver.php:				return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/mssql/mssql_driver.php:			$str = $this->_escape_char.str_replace('.', $this->_escape_char.'.'.$this->_escape_char, $item).$this->_escape_char;			
database/drivers/mssql/mssql_driver.php:			$str = $this->_escape_char.$item.$this->_escape_char;
database/drivers/mssql/mssql_driver.php:		return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific insert string from the supplied data
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific update string from the supplied data
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific truncate string from the supplied data
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific delete string from the supplied data
database/drivers/mssql/mssql_driver.php:			$conditions .= implode("\n", $this->ar_where);
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_driver.php:	 * Generates a platform-specific LIMIT clause
database/drivers/mssql/mssql_driver.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mssql/mssql_result.php:// ------------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:		return @mssql_num_rows($this->result_id);
database/drivers/mssql/mssql_result.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:		return @mssql_num_fields($this->result_id);
database/drivers/mssql/mssql_result.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:		while ($field = mssql_fetch_field($this->result_id))
database/drivers/mssql/mssql_result.php:			$field_names[] = $field->name;
database/drivers/mssql/mssql_result.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:	 * Generates an array of objects containing field meta-data
database/drivers/mssql/mssql_result.php:		while ($field = mssql_fetch_field($this->result_id))
database/drivers/mssql/mssql_result.php:			$F->name 		= $field->name;
database/drivers/mssql/mssql_result.php:			$F->type 		= $field->type;
database/drivers/mssql/mssql_result.php:			$F->max_length	= $field->max_length;
database/drivers/mssql/mssql_result.php:			$F->primary_key = 0;
database/drivers/mssql/mssql_result.php:			$F->default		= '';
database/drivers/mssql/mssql_result.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:		if (is_resource($this->result_id))
database/drivers/mssql/mssql_result.php:			mssql_free_result($this->result_id);
database/drivers/mssql/mssql_result.php:			$this->result_id = FALSE;
database/drivers/mssql/mssql_result.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:		return mssql_data_seek($this->result_id, $n);
database/drivers/mssql/mssql_result.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:	 * Result - associative array
database/drivers/mssql/mssql_result.php:		return mssql_fetch_assoc($this->result_id);
database/drivers/mssql/mssql_result.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_result.php:	 * Result - object
database/drivers/mssql/mssql_result.php:		return mssql_fetch_object($this->result_id);
database/drivers/mssql/mssql_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mssql/mssql_utility.php:// ------------------------------------------------------------------------
database/drivers/mssql/mssql_utility.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_utility.php:	 * Generates a platform-specific query so that a table can be optimized
database/drivers/mssql/mssql_utility.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_utility.php:	 * Generates a platform-specific query so that a table can be repaired
database/drivers/mssql/mssql_utility.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_utility.php:		return $this->db->display_error('db_unsuported_feature');
database/drivers/mssql/mssql_utility.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mssql/mssql_forge.php:// ------------------------------------------------------------------------
database/drivers/mssql/mssql_forge.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_forge.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_forge.php:		return "DROP TABLE ".$this->db->_escape_identifiers($table);
database/drivers/mssql/mssql_forge.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_forge.php:		$sql .= $this->db->_escape_identifiers($table)." (";
database/drivers/mssql/mssql_forge.php:				$sql .= "\n\t".$this->db->_protect_identifiers($field);
database/drivers/mssql/mssql_forge.php:			$primary_keys = $this->db->_protect_identifiers($primary_keys);
database/drivers/mssql/mssql_forge.php:					$key = $this->db->_protect_identifiers($key);	
database/drivers/mssql/mssql_forge.php:					$key = array($this->db->_protect_identifiers($key));
database/drivers/mssql/mssql_forge.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_forge.php:	 * Generates a platform-specific query so that a table can be altered
database/drivers/mssql/mssql_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table)." $alter_type ".$this->db->_protect_identifiers($column_name);
database/drivers/mssql/mssql_forge.php:			$sql .= ' AFTER ' . $this->db->_protect_identifiers($after_field);
database/drivers/mssql/mssql_forge.php:	// --------------------------------------------------------------------
database/drivers/mssql/mssql_forge.php:	 * Generates a platform-specific query so that a table can be renamed
database/drivers/mssql/mssql_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table_name)." RENAME TO ".$this->db->_protect_identifiers($new_table_name);
database/drivers/oci8/oci8_result.php: * @copyright   Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/oci8/oci8_result.php:// ------------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:		$rowcount = count($this->result_array());
database/drivers/oci8/oci8_result.php:		@ociexecute($this->stmt_id);
database/drivers/oci8/oci8_result.php:		if ($this->curs_id)
database/drivers/oci8/oci8_result.php:			@ociexecute($this->curs_id);
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:		$count = @ocinumcols($this->stmt_id);
database/drivers/oci8/oci8_result.php:		if ($this->limit_used)
database/drivers/oci8/oci8_result.php:			$count = $count - 1;
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:		$fieldCount = $this->num_fields();
database/drivers/oci8/oci8_result.php:			$field_names[] = ocicolumnname($this->stmt_id, $c);
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:	 * Generates an array of objects containing field meta-data
database/drivers/oci8/oci8_result.php:		$fieldCount = $this->num_fields();
database/drivers/oci8/oci8_result.php:			$F->name		= ocicolumnname($this->stmt_id, $c);
database/drivers/oci8/oci8_result.php:			$F->type		= ocicolumntype($this->stmt_id, $c);
database/drivers/oci8/oci8_result.php:			$F->max_length  = ocicolumnsize($this->stmt_id, $c);
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:		if (is_resource($this->result_id))
database/drivers/oci8/oci8_result.php:			ocifreestatement($this->result_id);			
database/drivers/oci8/oci8_result.php:			$this->result_id = FALSE;
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:	 * Result - associative array
database/drivers/oci8/oci8_result.php:		$id = ($this->curs_id) ? $this->curs_id : $this->stmt_id;
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:	 * Result - object
database/drivers/oci8/oci8_result.php:			$id = ($this->curs_id) ? $this->curs_id : $this->stmt_id;
database/drivers/oci8/oci8_result.php:		foreach ($this->result_array() as $key => $val)
database/drivers/oci8/oci8_result.php:					$obj->$k = $v;
database/drivers/oci8/oci8_result.php:				$obj->$key = $val;
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_result.php:		if (count($this->result_array) > 0)
database/drivers/oci8/oci8_result.php:			return $this->result_array;
database/drivers/oci8/oci8_result.php:		while ($this->_fetch_assoc($row))
database/drivers/oci8/oci8_result.php:			$this->result_array[] = $row;
database/drivers/oci8/oci8_result.php:		return $this->result_array;
database/drivers/oci8/oci8_result.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/oci8/oci8_forge.php:// ------------------------------------------------------------------------
database/drivers/oci8/oci8_forge.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_forge.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_forge.php:		$sql .= $this->db->_escape_identifiers($table)." (";
database/drivers/oci8/oci8_forge.php:				$sql .= "\n\t".$this->db->_protect_identifiers($field);
database/drivers/oci8/oci8_forge.php:			$primary_keys = $this->db->_protect_identifiers($primary_keys);
database/drivers/oci8/oci8_forge.php:					$key = $this->db->_protect_identifiers($key);	
database/drivers/oci8/oci8_forge.php:					$key = array($this->db->_protect_identifiers($key));
database/drivers/oci8/oci8_forge.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_forge.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_forge.php:	 * Generates a platform-specific query so that a table can be altered
database/drivers/oci8/oci8_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table)." $alter_type ".$this->db->_protect_identifiers($column_name);
database/drivers/oci8/oci8_forge.php:			$sql .= ' AFTER ' . $this->db->_protect_identifiers($after_field);
database/drivers/oci8/oci8_forge.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_forge.php:	 * Generates a platform-specific query so that a table can be renamed
database/drivers/oci8/oci8_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table_name)." RENAME TO ".$this->db->_protect_identifiers($new_table_name);
database/drivers/oci8/oci8_driver.php: * @copyright   Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/oci8/oci8_driver.php:// ------------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Non-persistent database connection
database/drivers/oci8/oci8_driver.php:		return @ocilogon($this->username, $this->password, $this->hostname);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		return @ociplogon($this->username, $this->password, $this->hostname);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		// @todo - add support if needed
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		return ociserverversion($this->conn_id);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		$this->stmt_id = FALSE;
database/drivers/oci8/oci8_driver.php:		$this->_set_stmt_id($sql);
database/drivers/oci8/oci8_driver.php:		ocisetprefetch($this->stmt_id, 1000);
database/drivers/oci8/oci8_driver.php:		return @ociexecute($this->stmt_id, $this->_commit);
database/drivers/oci8/oci8_driver.php:		if ( ! is_resource($this->stmt_id))
database/drivers/oci8/oci8_driver.php:			$this->stmt_id = ociparse($this->conn_id, $this->_prep_query($sql));
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		$this->curs_id = ocinewcursor($this->conn_id);
database/drivers/oci8/oci8_driver.php:		return $this->curs_id;
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:			if ($this->db_debug)
database/drivers/oci8/oci8_driver.php:				return $this->display_error('db_invalid_query');
database/drivers/oci8/oci8_driver.php:		$this->stmt_id = FALSE;
database/drivers/oci8/oci8_driver.php:		$this->_set_stmt_id($sql);
database/drivers/oci8/oci8_driver.php:		$this->_bind_params($params);
database/drivers/oci8/oci8_driver.php:		$this->query($sql, FALSE, $have_cursor);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		if ( ! is_array($params) OR ! is_resource($this->stmt_id))
database/drivers/oci8/oci8_driver.php:			ocibindbyname($this->stmt_id, $param['name'], $param['value'], $param['length'], $param['type']);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		if ( ! $this->trans_enabled)
database/drivers/oci8/oci8_driver.php:		if ($this->_trans_depth > 0)
database/drivers/oci8/oci8_driver.php:		$this->_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;
database/drivers/oci8/oci8_driver.php:		$this->_commit = OCI_DEFAULT;
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		if ( ! $this->trans_enabled)
database/drivers/oci8/oci8_driver.php:		if ($this->_trans_depth > 0)
database/drivers/oci8/oci8_driver.php:		$ret = OCIcommit($this->conn_id);
database/drivers/oci8/oci8_driver.php:		$this->_commit = OCI_COMMIT_ON_SUCCESS;
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		if ( ! $this->trans_enabled)
database/drivers/oci8/oci8_driver.php:		if ($this->_trans_depth > 0)
database/drivers/oci8/oci8_driver.php:		$ret = OCIrollback($this->conn_id);
database/drivers/oci8/oci8_driver.php:		$this->_commit = OCI_COMMIT_ON_SUCCESS;
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:				$str[$key] = $this->escape_str($val, $like);
database/drivers/oci8/oci8_driver.php:		$str = $CI->input->_remove_invisible_characters($str);
database/drivers/oci8/oci8_driver.php:			$str = str_replace(	array('%', '_', $this->_like_escape_chr),
database/drivers/oci8/oci8_driver.php:								array($this->_like_escape_chr.'%', $this->_like_escape_chr.'_', $this->_like_escape_chr.$this->_like_escape_chr),
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		return @ocirowcount($this->stmt_id);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		return $this->display_error('db_unsupported_function');
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific query string that counts all records in
database/drivers/oci8/oci8_driver.php:		$query = $this->query($this->_count_string . $this->_protect_identifiers('numrows') . " FROM " . $this->_protect_identifiers($table, TRUE, NULL, FALSE));
database/drivers/oci8/oci8_driver.php:		$row = $query->row();
database/drivers/oci8/oci8_driver.php:		return (int) $row->numrows;
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific query string so that the table names can be fetched
database/drivers/oci8/oci8_driver.php:		if ($prefix_limit !== FALSE AND $this->dbprefix != '')
database/drivers/oci8/oci8_driver.php:			$sql .= " WHERE TABLE_NAME LIKE '".$this->escape_like_str($this->dbprefix)."%' ".sprintf($this->_like_escape_str, $this->_like_escape_char);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific query string so that the column names can be fetched
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific query so that the column data can be retrieved
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		$error = ocierror($this->conn_id);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		$error = ocierror($this->conn_id);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:		if ($this->_escape_char == '')
database/drivers/oci8/oci8_driver.php:		foreach ($this->_reserved_identifiers as $id)
database/drivers/oci8/oci8_driver.php:				$str = $this->_escape_char. str_replace('.', $this->_escape_char.'.', $item);  
database/drivers/oci8/oci8_driver.php:				return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/oci8/oci8_driver.php:			$str = $this->_escape_char.str_replace('.', $this->_escape_char.'.'.$this->_escape_char, $item).$this->_escape_char;			
database/drivers/oci8/oci8_driver.php:			$str = $this->_escape_char.$item.$this->_escape_char;
database/drivers/oci8/oci8_driver.php:		return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific insert string from the supplied data
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific update string from the supplied data
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific truncate string from the supplied data
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific delete string from the supplied data
database/drivers/oci8/oci8_driver.php:			$conditions .= implode("\n", $this->ar_where);
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_driver.php:	 * Generates a platform-specific LIMIT clause
database/drivers/oci8/oci8_driver.php:		$this->limit_used = TRUE;
database/drivers/oci8/oci8_driver.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/oci8/oci8_utility.php:// ------------------------------------------------------------------------
database/drivers/oci8/oci8_utility.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_utility.php:	 * Generates a platform-specific query so that a table can be optimized
database/drivers/oci8/oci8_utility.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_utility.php:	 * Generates a platform-specific query so that a table can be repaired
database/drivers/oci8/oci8_utility.php:	// --------------------------------------------------------------------
database/drivers/oci8/oci8_utility.php:		return $this->db->display_error('db_unsuported_feature');
database/drivers/oci8/oci8_utility.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/sqlite/sqlite_driver.php:// ------------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	// The character used to escape with - not needed for SQLite
database/drivers/sqlite/sqlite_driver.php:	 * Non-persistent database connection
database/drivers/sqlite/sqlite_driver.php:		if ( ! $conn_id = @sqlite_open($this->database, FILE_WRITE_MODE, $error))
database/drivers/sqlite/sqlite_driver.php:			if ($this->db_debug)
database/drivers/sqlite/sqlite_driver.php:				$this->display_error($error, '', TRUE);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		if ( ! $conn_id = @sqlite_popen($this->database, FILE_WRITE_MODE, $error))
database/drivers/sqlite/sqlite_driver.php:			if ($this->db_debug)
database/drivers/sqlite/sqlite_driver.php:				$this->display_error($error, '', TRUE);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		// @todo - add support if needed
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		$sql = $this->_prep_query($sql);
database/drivers/sqlite/sqlite_driver.php:		return @sqlite_query($this->conn_id, $sql);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		if ( ! $this->trans_enabled)
database/drivers/sqlite/sqlite_driver.php:		if ($this->_trans_depth > 0)
database/drivers/sqlite/sqlite_driver.php:		$this->_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;
database/drivers/sqlite/sqlite_driver.php:		$this->simple_query('BEGIN TRANSACTION');
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		if ( ! $this->trans_enabled)
database/drivers/sqlite/sqlite_driver.php:		if ($this->_trans_depth > 0)
database/drivers/sqlite/sqlite_driver.php:		$this->simple_query('COMMIT');
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		if ( ! $this->trans_enabled)
database/drivers/sqlite/sqlite_driver.php:		if ($this->_trans_depth > 0)
database/drivers/sqlite/sqlite_driver.php:		$this->simple_query('ROLLBACK');
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:				$str[$key] = $this->escape_str($val, $like);
database/drivers/sqlite/sqlite_driver.php:			$str = str_replace(	array('%', '_', $this->_like_escape_chr),
database/drivers/sqlite/sqlite_driver.php:								array($this->_like_escape_chr.'%', $this->_like_escape_chr.'_', $this->_like_escape_chr.$this->_like_escape_chr),
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		return sqlite_changes($this->conn_id);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		return @sqlite_last_insert_rowid($this->conn_id);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific query string that counts all records in
database/drivers/sqlite/sqlite_driver.php:		$query = $this->query($this->_count_string . $this->_protect_identifiers('numrows') . " FROM " . $this->_protect_identifiers($table, TRUE, NULL, FALSE));
database/drivers/sqlite/sqlite_driver.php:		if ($query->num_rows() == 0)
database/drivers/sqlite/sqlite_driver.php:		$row = $query->row();
database/drivers/sqlite/sqlite_driver.php:		return (int) $row->numrows;
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific query string so that the table names can be fetched
database/drivers/sqlite/sqlite_driver.php:		if ($prefix_limit !== FALSE AND $this->dbprefix != '')
database/drivers/sqlite/sqlite_driver.php:			$sql .= " AND 'name' LIKE '".$this->escape_like_str($this->dbprefix)."%' ".sprintf($this->_like_escape_str, $this->_like_escape_char);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific query string so that the column names can be fetched
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific query so that the column data can be retrieved
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		return sqlite_error_string(sqlite_last_error($this->conn_id));
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		return sqlite_last_error($this->conn_id);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:		if ($this->_escape_char == '')
database/drivers/sqlite/sqlite_driver.php:		foreach ($this->_reserved_identifiers as $id)
database/drivers/sqlite/sqlite_driver.php:				$str = $this->_escape_char. str_replace('.', $this->_escape_char.'.', $item);  
database/drivers/sqlite/sqlite_driver.php:				return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/sqlite/sqlite_driver.php:			$str = $this->_escape_char.str_replace('.', $this->_escape_char.'.'.$this->_escape_char, $item).$this->_escape_char;			
database/drivers/sqlite/sqlite_driver.php:			$str = $this->_escape_char.$item.$this->_escape_char;
database/drivers/sqlite/sqlite_driver.php:		return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific insert string from the supplied data
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific update string from the supplied data
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific truncate string from the supplied data
database/drivers/sqlite/sqlite_driver.php:		return $this->_delete($table);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific delete string from the supplied data
database/drivers/sqlite/sqlite_driver.php:			$conditions .= implode("\n", $this->ar_where);
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_driver.php:	 * Generates a platform-specific LIMIT clause
database/drivers/sqlite/sqlite_driver.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/sqlite/sqlite_utility.php:// ------------------------------------------------------------------------
database/drivers/sqlite/sqlite_utility.php:		if ($this->db_debug)
database/drivers/sqlite/sqlite_utility.php:			return $this->display_error('db_unsuported_feature');
database/drivers/sqlite/sqlite_utility.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_utility.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_utility.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_utility.php:		return $this->db->display_error('db_unsuported_feature');
database/drivers/sqlite/sqlite_utility.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_utility.php:		if ( ! @file_exists($this->db->database) OR ! @unlink($this->db->database))
database/drivers/sqlite/sqlite_utility.php:			if ($this->db->db_debug)
database/drivers/sqlite/sqlite_utility.php:				return $this->db->display_error('db_unable_to_drop');
database/drivers/sqlite/sqlite_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/sqlite/sqlite_forge.php:// ------------------------------------------------------------------------
database/drivers/sqlite/sqlite_forge.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_forge.php:		if ( ! @file_exists($this->db->database) OR ! @unlink($this->db->database))
database/drivers/sqlite/sqlite_forge.php:			if ($this->db->db_debug)
database/drivers/sqlite/sqlite_forge.php:				return $this->db->display_error('db_unable_to_drop');
database/drivers/sqlite/sqlite_forge.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_forge.php:		if ($if_not_exists === TRUE && version_compare($this->_version(), '3.3.0', '>=') === TRUE)
database/drivers/sqlite/sqlite_forge.php:		$sql .= $this->db->_escape_identifiers($table)."(";
database/drivers/sqlite/sqlite_forge.php:				$sql .= "\n\t".$this->db->_protect_identifiers($field);
database/drivers/sqlite/sqlite_forge.php:			$primary_keys = $this->db->_protect_identifiers($primary_keys);
database/drivers/sqlite/sqlite_forge.php:					$key = $this->db->_protect_identifiers($key);	
database/drivers/sqlite/sqlite_forge.php:					$key = array($this->db->_protect_identifiers($key));
database/drivers/sqlite/sqlite_forge.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_forge.php:		if ($this->db->db_debug)
database/drivers/sqlite/sqlite_forge.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/sqlite/sqlite_forge.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_forge.php:	 * Generates a platform-specific query so that a table can be altered
database/drivers/sqlite/sqlite_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table)." $alter_type ".$this->db->_protect_identifiers($column_name);
database/drivers/sqlite/sqlite_forge.php:			$sql .= ' AFTER ' . $this->db->_protect_identifiers($after_field);
database/drivers/sqlite/sqlite_forge.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_forge.php:	 * Generates a platform-specific query so that a table can be renamed
database/drivers/sqlite/sqlite_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table_name)." RENAME TO ".$this->db->_protect_identifiers($new_table_name);
database/drivers/sqlite/sqlite_result.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/sqlite/sqlite_result.php:// ------------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:		return @sqlite_num_rows($this->result_id);
database/drivers/sqlite/sqlite_result.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:		return @sqlite_num_fields($this->result_id);
database/drivers/sqlite/sqlite_result.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:		for ($i = 0; $i < $this->num_fields(); $i++)
database/drivers/sqlite/sqlite_result.php:			$field_names[] = sqlite_field_name($this->result_id, $i);
database/drivers/sqlite/sqlite_result.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:	 * Generates an array of objects containing field meta-data
database/drivers/sqlite/sqlite_result.php:		for ($i = 0; $i < $this->num_fields(); $i++)
database/drivers/sqlite/sqlite_result.php:			$F->name 		= sqlite_field_name($this->result_id, $i);
database/drivers/sqlite/sqlite_result.php:			$F->type 		= 'varchar';
database/drivers/sqlite/sqlite_result.php:			$F->max_length	= 0;
database/drivers/sqlite/sqlite_result.php:			$F->primary_key = 0;
database/drivers/sqlite/sqlite_result.php:			$F->default		= '';
database/drivers/sqlite/sqlite_result.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:		return sqlite_seek($this->result_id, $n);
database/drivers/sqlite/sqlite_result.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:	 * Result - associative array
database/drivers/sqlite/sqlite_result.php:		return sqlite_fetch_array($this->result_id);
database/drivers/sqlite/sqlite_result.php:	// --------------------------------------------------------------------
database/drivers/sqlite/sqlite_result.php:	 * Result - object
database/drivers/sqlite/sqlite_result.php:			return sqlite_fetch_object($this->result_id);
database/drivers/sqlite/sqlite_result.php:			$arr = sqlite_fetch_array($this->result_id, SQLITE_ASSOC);
database/drivers/odbc/odbc_result.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/odbc/odbc_result.php:// ------------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:		return @odbc_num_rows($this->result_id);
database/drivers/odbc/odbc_result.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:		return @odbc_num_fields($this->result_id);
database/drivers/odbc/odbc_result.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:		for ($i = 0; $i < $this->num_fields(); $i++)
database/drivers/odbc/odbc_result.php:			$field_names[] 	= odbc_field_name($this->result_id, $i);
database/drivers/odbc/odbc_result.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:	 * Generates an array of objects containing field meta-data
database/drivers/odbc/odbc_result.php:		for ($i = 0; $i < $this->num_fields(); $i++)
database/drivers/odbc/odbc_result.php:			$F->name 		= odbc_field_name($this->result_id, $i);
database/drivers/odbc/odbc_result.php:			$F->type 		= odbc_field_type($this->result_id, $i);
database/drivers/odbc/odbc_result.php:			$F->max_length	= odbc_field_len($this->result_id, $i);
database/drivers/odbc/odbc_result.php:			$F->primary_key = 0;
database/drivers/odbc/odbc_result.php:			$F->default		= '';
database/drivers/odbc/odbc_result.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:		if (is_resource($this->result_id))
database/drivers/odbc/odbc_result.php:			odbc_free_result($this->result_id);
database/drivers/odbc/odbc_result.php:			$this->result_id = FALSE;
database/drivers/odbc/odbc_result.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:	 * Result - associative array
database/drivers/odbc/odbc_result.php:			return odbc_fetch_array($this->result_id);
database/drivers/odbc/odbc_result.php:			return $this->_odbc_fetch_array($this->result_id);
database/drivers/odbc/odbc_result.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_result.php:	 * Result - object
database/drivers/odbc/odbc_result.php:			return odbc_fetch_object($this->result_id);
database/drivers/odbc/odbc_result.php:			return $this->_odbc_fetch_object($this->result_id);
database/drivers/odbc/odbc_result.php:	 * Result - object
database/drivers/odbc/odbc_result.php:				$rs_obj->$field_name = $v;
database/drivers/odbc/odbc_result.php:	 * Result - array
database/drivers/odbc/odbc_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/odbc/odbc_forge.php:// ------------------------------------------------------------------------
database/drivers/odbc/odbc_forge.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_forge.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_forge.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_forge.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_forge.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_forge.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_forge.php:		$sql .= $this->db->_escape_identifiers($table)." (";
database/drivers/odbc/odbc_forge.php:				$sql .= "\n\t".$this->db->_protect_identifiers($field);
database/drivers/odbc/odbc_forge.php:			$primary_keys = $this->db->_protect_identifiers($primary_keys);
database/drivers/odbc/odbc_forge.php:					$key = $this->db->_protect_identifiers($key);	
database/drivers/odbc/odbc_forge.php:					$key = array($this->db->_protect_identifiers($key));
database/drivers/odbc/odbc_forge.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_forge.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_forge.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_forge.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_forge.php:	 * Generates a platform-specific query so that a table can be altered
database/drivers/odbc/odbc_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table)." $alter_type ".$this->db->_protect_identifiers($column_name);
database/drivers/odbc/odbc_forge.php:			$sql .= ' AFTER ' . $this->db->_protect_identifiers($after_field);
database/drivers/odbc/odbc_forge.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_forge.php:	 * Generates a platform-specific query so that a table can be renamed
database/drivers/odbc/odbc_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table_name)." RENAME TO ".$this->db->_protect_identifiers($new_table_name);
database/drivers/odbc/odbc_driver.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/odbc/odbc_driver.php:// ------------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	// the character used to excape - not necessary for ODBC
database/drivers/odbc/odbc_driver.php:		$this->_random_keyword = ' RND('.time().')'; // database specific random keyword
database/drivers/odbc/odbc_driver.php:	 * Non-persistent database connection
database/drivers/odbc/odbc_driver.php:		return @odbc_connect($this->hostname, $this->username, $this->password);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		return @odbc_pconnect($this->hostname, $this->username, $this->password);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		// @todo - add support if needed
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		$sql = $this->_prep_query($sql);
database/drivers/odbc/odbc_driver.php:		return @odbc_exec($this->conn_id, $sql);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		if ( ! $this->trans_enabled)
database/drivers/odbc/odbc_driver.php:		if ($this->_trans_depth > 0)
database/drivers/odbc/odbc_driver.php:		$this->_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;
database/drivers/odbc/odbc_driver.php:		return odbc_autocommit($this->conn_id, FALSE);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		if ( ! $this->trans_enabled)
database/drivers/odbc/odbc_driver.php:		if ($this->_trans_depth > 0)
database/drivers/odbc/odbc_driver.php:		$ret = odbc_commit($this->conn_id);
database/drivers/odbc/odbc_driver.php:		odbc_autocommit($this->conn_id, TRUE);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		if ( ! $this->trans_enabled)
database/drivers/odbc/odbc_driver.php:		if ($this->_trans_depth > 0)
database/drivers/odbc/odbc_driver.php:		$ret = odbc_rollback($this->conn_id);
database/drivers/odbc/odbc_driver.php:		odbc_autocommit($this->conn_id, TRUE);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:				$str[$key] = $this->escape_str($val, $like);
database/drivers/odbc/odbc_driver.php:		$str = $CI->input->_remove_invisible_characters($str);
database/drivers/odbc/odbc_driver.php:			$str = str_replace(	array('%', '_', $this->_like_escape_chr),
database/drivers/odbc/odbc_driver.php:								array($this->_like_escape_chr.'%', $this->_like_escape_chr.'_', $this->_like_escape_chr.$this->_like_escape_chr),
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		return @odbc_num_rows($this->conn_id);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		return @odbc_insert_id($this->conn_id);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific query string that counts all records in
database/drivers/odbc/odbc_driver.php:		$query = $this->query($this->_count_string . $this->_protect_identifiers('numrows') . " FROM " . $this->_protect_identifiers($table, TRUE, NULL, FALSE));
database/drivers/odbc/odbc_driver.php:		if ($query->num_rows() == 0)
database/drivers/odbc/odbc_driver.php:		$row = $query->row();
database/drivers/odbc/odbc_driver.php:		return (int) $row->numrows;
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific query string so that the table names can be fetched
database/drivers/odbc/odbc_driver.php:		$sql = "SHOW TABLES FROM `".$this->database."`";
database/drivers/odbc/odbc_driver.php:		if ($prefix_limit !== FALSE AND $this->dbprefix != '')
database/drivers/odbc/odbc_driver.php:			//$sql .= " LIKE '".$this->escape_like_str($this->dbprefix)."%' ".sprintf($this->_like_escape_str, $this->_like_escape_char);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific query string so that the column names can be fetched
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific query so that the column data can be retrieved
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		return odbc_errormsg($this->conn_id);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		return odbc_error($this->conn_id);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:		if ($this->_escape_char == '')
database/drivers/odbc/odbc_driver.php:		foreach ($this->_reserved_identifiers as $id)
database/drivers/odbc/odbc_driver.php:				$str = $this->_escape_char. str_replace('.', $this->_escape_char.'.', $item);  
database/drivers/odbc/odbc_driver.php:				return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/odbc/odbc_driver.php:			$str = $this->_escape_char.str_replace('.', $this->_escape_char.'.'.$this->_escape_char, $item).$this->_escape_char;			
database/drivers/odbc/odbc_driver.php:			$str = $this->_escape_char.$item.$this->_escape_char;
database/drivers/odbc/odbc_driver.php:		return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific insert string from the supplied data
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific update string from the supplied data
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific truncate string from the supplied data
database/drivers/odbc/odbc_driver.php:		return $this->_delete($table);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific delete string from the supplied data
database/drivers/odbc/odbc_driver.php:			$conditions .= implode("\n", $this->ar_where);
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_driver.php:	 * Generates a platform-specific LIMIT clause
database/drivers/odbc/odbc_driver.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/odbc/odbc_utility.php:// ------------------------------------------------------------------------
database/drivers/odbc/odbc_utility.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_utility.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_utility.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_utility.php:	 * Generates a platform-specific query so that a table can be optimized
database/drivers/odbc/odbc_utility.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_utility.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_utility.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_utility.php:	 * Generates a platform-specific query so that a table can be repaired
database/drivers/odbc/odbc_utility.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_utility.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_utility.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_utility.php:		return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_utility.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_utility.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/odbc/odbc_utility.php:	// --------------------------------------------------------------------
database/drivers/odbc/odbc_utility.php:		if ($this->db->db_debug)
database/drivers/odbc/odbc_utility.php:			return $this->db->display_error('db_unsuported_feature');
database/drivers/mysqli/mysqli_result.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysqli/mysqli_result.php:// ------------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:		return @mysqli_num_rows($this->result_id);
database/drivers/mysqli/mysqli_result.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:		return @mysqli_num_fields($this->result_id);
database/drivers/mysqli/mysqli_result.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:		while ($field = mysqli_fetch_field($this->result_id))
database/drivers/mysqli/mysqli_result.php:			$field_names[] = $field->name;
database/drivers/mysqli/mysqli_result.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:	 * Generates an array of objects containing field meta-data
database/drivers/mysqli/mysqli_result.php:		while ($field = mysqli_fetch_field($this->result_id))
database/drivers/mysqli/mysqli_result.php:			$F->name 		= $field->name;
database/drivers/mysqli/mysqli_result.php:			$F->type 		= $field->type;
database/drivers/mysqli/mysqli_result.php:			$F->default		= $field->def;
database/drivers/mysqli/mysqli_result.php:			$F->max_length	= $field->max_length;
database/drivers/mysqli/mysqli_result.php:			$F->primary_key = ($field->flags & MYSQLI_PRI_KEY_FLAG) ? 1 : 0;
database/drivers/mysqli/mysqli_result.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:		if (is_object($this->result_id))
database/drivers/mysqli/mysqli_result.php:			mysqli_free_result($this->result_id);
database/drivers/mysqli/mysqli_result.php:			$this->result_id = FALSE;
database/drivers/mysqli/mysqli_result.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:		return mysqli_data_seek($this->result_id, $n);
database/drivers/mysqli/mysqli_result.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:	 * Result - associative array
database/drivers/mysqli/mysqli_result.php:		return mysqli_fetch_assoc($this->result_id);
database/drivers/mysqli/mysqli_result.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_result.php:	 * Result - object
database/drivers/mysqli/mysqli_result.php:		return mysqli_fetch_object($this->result_id);
database/drivers/mysqli/mysqli_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysqli/mysqli_utility.php:// ------------------------------------------------------------------------
database/drivers/mysqli/mysqli_utility.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_utility.php:	 * Generates a platform-specific query so that a table can be optimized
database/drivers/mysqli/mysqli_utility.php:		return "OPTIMIZE TABLE ".$this->db->_escape_identifiers($table);
database/drivers/mysqli/mysqli_utility.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_utility.php:	 * Generates a platform-specific query so that a table can be repaired
database/drivers/mysqli/mysqli_utility.php:		return "REPAIR TABLE ".$this->db->_escape_identifiers($table);
database/drivers/mysqli/mysqli_utility.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_utility.php:		return $this->db->display_error('db_unsuported_feature');
database/drivers/mysqli/mysqli_utility.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysqli/mysqli_driver.php:// ------------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php: * MySQLi Database Adapter Class - MySQLi only works with PHP 5
database/drivers/mysqli/mysqli_driver.php:	// clause and character used for LIKE escape sequences - not used in MySQL
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Non-persistent database connection
database/drivers/mysqli/mysqli_driver.php:		if ($this->port != '')
database/drivers/mysqli/mysqli_driver.php:			return @mysqli_connect($this->hostname, $this->username, $this->password, $this->database, $this->port);			
database/drivers/mysqli/mysqli_driver.php:			return @mysqli_connect($this->hostname, $this->username, $this->password, $this->database);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		return $this->db_connect();
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		if (mysqli_ping($this->conn_id) === FALSE)
database/drivers/mysqli/mysqli_driver.php:			$this->conn_id = FALSE;
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		return @mysqli_select_db($this->conn_id, $this->database);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		return @mysqli_query($this->conn_id, "SET NAMES '".$this->escape_str($charset)."' COLLATE '".$this->escape_str($collation)."'");
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		$sql = $this->_prep_query($sql);	
database/drivers/mysqli/mysqli_driver.php:		$result = @mysqli_query($this->conn_id, $sql);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		if ($this->delete_hack === TRUE)
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mysqli/mysqli_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mysqli/mysqli_driver.php:		$this->_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;
database/drivers/mysqli/mysqli_driver.php:		$this->simple_query('SET AUTOCOMMIT=0');
database/drivers/mysqli/mysqli_driver.php:		$this->simple_query('START TRANSACTION'); // can also be BEGIN or BEGIN WORK
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mysqli/mysqli_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mysqli/mysqli_driver.php:		$this->simple_query('COMMIT');
database/drivers/mysqli/mysqli_driver.php:		$this->simple_query('SET AUTOCOMMIT=1');
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mysqli/mysqli_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mysqli/mysqli_driver.php:		$this->simple_query('ROLLBACK');
database/drivers/mysqli/mysqli_driver.php:		$this->simple_query('SET AUTOCOMMIT=1');
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:				$str[$key] = $this->escape_str($val, $like);
database/drivers/mysqli/mysqli_driver.php:		if (function_exists('mysqli_real_escape_string') AND is_object($this->conn_id))
database/drivers/mysqli/mysqli_driver.php:			$str = mysqli_real_escape_string($this->conn_id, $str);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		return @mysqli_affected_rows($this->conn_id);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		return @mysqli_insert_id($this->conn_id);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific query string that counts all records in
database/drivers/mysqli/mysqli_driver.php:		$query = $this->query($this->_count_string . $this->_protect_identifiers('numrows') . " FROM " . $this->_protect_identifiers($table, TRUE, NULL, FALSE));
database/drivers/mysqli/mysqli_driver.php:		if ($query->num_rows() == 0)
database/drivers/mysqli/mysqli_driver.php:		$row = $query->row();
database/drivers/mysqli/mysqli_driver.php:		return (int) $row->numrows;
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific query string so that the table names can be fetched
database/drivers/mysqli/mysqli_driver.php:		$sql = "SHOW TABLES FROM ".$this->_escape_char.$this->database.$this->_escape_char;	
database/drivers/mysqli/mysqli_driver.php:		if ($prefix_limit !== FALSE AND $this->dbprefix != '')
database/drivers/mysqli/mysqli_driver.php:			$sql .= " LIKE '".$this->escape_like_str($this->dbprefix)."%'";
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific query string so that the column names can be fetched
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific query so that the column data can be retrieved
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		return mysqli_error($this->conn_id);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		return mysqli_errno($this->conn_id);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:		if ($this->_escape_char == '')
database/drivers/mysqli/mysqli_driver.php:		foreach ($this->_reserved_identifiers as $id)
database/drivers/mysqli/mysqli_driver.php:				$str = $this->_escape_char. str_replace('.', $this->_escape_char.'.', $item);  
database/drivers/mysqli/mysqli_driver.php:				return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/mysqli/mysqli_driver.php:			$str = $this->_escape_char.str_replace('.', $this->_escape_char.'.'.$this->_escape_char, $item).$this->_escape_char;			
database/drivers/mysqli/mysqli_driver.php:			$str = $this->_escape_char.$item.$this->_escape_char;
database/drivers/mysqli/mysqli_driver.php:		return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific insert string from the supplied data
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific update string from the supplied data
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific truncate string from the supplied data
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific delete string from the supplied data
database/drivers/mysqli/mysqli_driver.php:			$conditions .= implode("\n", $this->ar_where);
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_driver.php:	 * Generates a platform-specific LIMIT clause
database/drivers/mysqli/mysqli_driver.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysqli/mysqli_forge.php:// ------------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php:				$sql .= "\n\t".$this->db->_protect_identifiers($field);
database/drivers/mysqli/mysqli_forge.php:					$sql .= ' '.$this->db->_protect_identifiers($attributes['NAME']).' ';
database/drivers/mysqli/mysqli_forge.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php:		$sql .= $this->db->_escape_identifiers($table)." (";
database/drivers/mysqli/mysqli_forge.php:		$sql .= $this->_process_fields($fields);
database/drivers/mysqli/mysqli_forge.php:			$key_name = $this->db->_protect_identifiers(implode('_', $primary_keys));
database/drivers/mysqli/mysqli_forge.php:			$primary_keys = $this->db->_protect_identifiers($primary_keys);
database/drivers/mysqli/mysqli_forge.php:					$key_name = $this->db->_protect_identifiers(implode('_', $key));
database/drivers/mysqli/mysqli_forge.php:					$key = $this->db->_protect_identifiers($key);	
database/drivers/mysqli/mysqli_forge.php:					$key_name = $this->db->_protect_identifiers($key);
database/drivers/mysqli/mysqli_forge.php:		$sql .= "\n) DEFAULT CHARACTER SET {$this->db->char_set} COLLATE {$this->db->dbcollat};";
database/drivers/mysqli/mysqli_forge.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php:		return "DROP TABLE IF EXISTS ".$this->db->_escape_identifiers($table);
database/drivers/mysqli/mysqli_forge.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php:	 * Generates a platform-specific query so that a table can be altered
database/drivers/mysqli/mysqli_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table)." $alter_type ";
database/drivers/mysqli/mysqli_forge.php:			return $sql.$this->db->_protect_identifiers($fields);
database/drivers/mysqli/mysqli_forge.php:		$sql .= $this->_process_fields($fields);
database/drivers/mysqli/mysqli_forge.php:			$sql .= ' AFTER ' . $this->db->_protect_identifiers($after_field);
database/drivers/mysqli/mysqli_forge.php:	// --------------------------------------------------------------------
database/drivers/mysqli/mysqli_forge.php:	 * Generates a platform-specific query so that a table can be renamed
database/drivers/mysqli/mysqli_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table_name)." RENAME TO ".$this->db->_protect_identifiers($new_table_name);
database/drivers/mysql/mysql_result.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysql/mysql_result.php:// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:		return @mysql_num_rows($this->result_id);
database/drivers/mysql/mysql_result.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:		return @mysql_num_fields($this->result_id);
database/drivers/mysql/mysql_result.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:		while ($field = mysql_fetch_field($this->result_id))
database/drivers/mysql/mysql_result.php:			$field_names[] = $field->name;
database/drivers/mysql/mysql_result.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:	 * Generates an array of objects containing field meta-data
database/drivers/mysql/mysql_result.php:		while ($field = mysql_fetch_field($this->result_id))
database/drivers/mysql/mysql_result.php:			$F->name 		= $field->name;
database/drivers/mysql/mysql_result.php:			$F->type 		= $field->type;
database/drivers/mysql/mysql_result.php:			$F->default		= $field->def;
database/drivers/mysql/mysql_result.php:			$F->max_length	= $field->max_length;
database/drivers/mysql/mysql_result.php:			$F->primary_key = $field->primary_key;
database/drivers/mysql/mysql_result.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:		if (is_resource($this->result_id))
database/drivers/mysql/mysql_result.php:			mysql_free_result($this->result_id);
database/drivers/mysql/mysql_result.php:			$this->result_id = FALSE;
database/drivers/mysql/mysql_result.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:		return mysql_data_seek($this->result_id, $n);
database/drivers/mysql/mysql_result.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:	 * Result - associative array
database/drivers/mysql/mysql_result.php:		return mysql_fetch_assoc($this->result_id);
database/drivers/mysql/mysql_result.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_result.php:	 * Result - object
database/drivers/mysql/mysql_result.php:		return mysql_fetch_object($this->result_id);
database/drivers/mysql/mysql_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysql/mysql_utility.php:// ------------------------------------------------------------------------
database/drivers/mysql/mysql_utility.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_utility.php:	 * Generates a platform-specific query so that a table can be optimized
database/drivers/mysql/mysql_utility.php:		return "OPTIMIZE TABLE ".$this->db->_escape_identifiers($table);
database/drivers/mysql/mysql_utility.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_utility.php:	 * Generates a platform-specific query so that a table can be repaired
database/drivers/mysql/mysql_utility.php:		return "REPAIR TABLE ".$this->db->_escape_identifiers($table);
database/drivers/mysql/mysql_utility.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_utility.php:			$query = $this->db->query("SHOW CREATE TABLE `".$this->db->database.'`.'.$table);
database/drivers/mysql/mysql_utility.php:			$result = $query->result_array();
database/drivers/mysql/mysql_utility.php:			$query = $this->db->query("SELECT * FROM $table");
database/drivers/mysql/mysql_utility.php:			if ($query->num_rows() == 0)
database/drivers/mysql/mysql_utility.php:			while ($field = mysql_fetch_field($query->result_id))
database/drivers/mysql/mysql_utility.php:										strtolower(mysql_field_type($query->result_id, $i)),
database/drivers/mysql/mysql_utility.php:				$field_str .= '`'.$field->name.'`, ';
database/drivers/mysql/mysql_utility.php:			foreach ($query->result_array() as $row)
database/drivers/mysql/mysql_utility.php:							$val_str .= $this->db->escape($v);
database/drivers/mysql/mysql_utility.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysql/mysql_forge.php:// ------------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php:				$sql .= "\n\t".$this->db->_protect_identifiers($field);
database/drivers/mysql/mysql_forge.php:					$sql .= ' '.$this->db->_protect_identifiers($attributes['NAME']).' ';
database/drivers/mysql/mysql_forge.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php:		$sql .= $this->db->_escape_identifiers($table)." (";
database/drivers/mysql/mysql_forge.php:		$sql .= $this->_process_fields($fields);
database/drivers/mysql/mysql_forge.php:			$key_name = $this->db->_protect_identifiers(implode('_', $primary_keys));
database/drivers/mysql/mysql_forge.php:			$primary_keys = $this->db->_protect_identifiers($primary_keys);
database/drivers/mysql/mysql_forge.php:					$key_name = $this->db->_protect_identifiers(implode('_', $key));
database/drivers/mysql/mysql_forge.php:					$key = $this->db->_protect_identifiers($key);	
database/drivers/mysql/mysql_forge.php:					$key_name = $this->db->_protect_identifiers($key);
database/drivers/mysql/mysql_forge.php:		$sql .= "\n) DEFAULT CHARACTER SET {$this->db->char_set} COLLATE {$this->db->dbcollat};";
database/drivers/mysql/mysql_forge.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php:		return "DROP TABLE IF EXISTS ".$this->db->_escape_identifiers($table);
database/drivers/mysql/mysql_forge.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php:	 * Generates a platform-specific query so that a table can be altered
database/drivers/mysql/mysql_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table)." $alter_type ";
database/drivers/mysql/mysql_forge.php:			return $sql.$this->db->_protect_identifiers($fields);
database/drivers/mysql/mysql_forge.php:		$sql .= $this->_process_fields($fields);
database/drivers/mysql/mysql_forge.php:			$sql .= ' AFTER ' . $this->db->_protect_identifiers($after_field);
database/drivers/mysql/mysql_forge.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_forge.php:	 * Generates a platform-specific query so that a table can be renamed
database/drivers/mysql/mysql_forge.php:		$sql = 'ALTER TABLE '.$this->db->_protect_identifiers($table_name)." RENAME TO ".$this->db->_protect_identifiers($new_table_name);
database/drivers/mysql/mysql_driver.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/drivers/mysql/mysql_driver.php:// ------------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	// clause and character used for LIKE escape sequences - not used in MySQL
database/drivers/mysql/mysql_driver.php:	 * Non-persistent database connection
database/drivers/mysql/mysql_driver.php:		if ($this->port != '')
database/drivers/mysql/mysql_driver.php:			$this->hostname .= ':'.$this->port;
database/drivers/mysql/mysql_driver.php:		return @mysql_connect($this->hostname, $this->username, $this->password, TRUE);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		if ($this->port != '')
database/drivers/mysql/mysql_driver.php:			$this->hostname .= ':'.$this->port;
database/drivers/mysql/mysql_driver.php:		return @mysql_pconnect($this->hostname, $this->username, $this->password);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		if (mysql_ping($this->conn_id) === FALSE)
database/drivers/mysql/mysql_driver.php:			$this->conn_id = FALSE;
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		return @mysql_select_db($this->database, $this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		return @mysql_query("SET NAMES '".$this->escape_str($charset)."' COLLATE '".$this->escape_str($collation)."'", $this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		$sql = $this->_prep_query($sql);
database/drivers/mysql/mysql_driver.php:		return @mysql_query($sql, $this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		if ($this->delete_hack === TRUE)
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mysql/mysql_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mysql/mysql_driver.php:		$this->_trans_failure = ($test_mode === TRUE) ? TRUE : FALSE;
database/drivers/mysql/mysql_driver.php:		$this->simple_query('SET AUTOCOMMIT=0');
database/drivers/mysql/mysql_driver.php:		$this->simple_query('START TRANSACTION'); // can also be BEGIN or BEGIN WORK
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mysql/mysql_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mysql/mysql_driver.php:		$this->simple_query('COMMIT');
database/drivers/mysql/mysql_driver.php:		$this->simple_query('SET AUTOCOMMIT=1');
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		if ( ! $this->trans_enabled)
database/drivers/mysql/mysql_driver.php:		if ($this->_trans_depth > 0)
database/drivers/mysql/mysql_driver.php:		$this->simple_query('ROLLBACK');
database/drivers/mysql/mysql_driver.php:		$this->simple_query('SET AUTOCOMMIT=1');
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:				$str[$key] = $this->escape_str($val, $like);
database/drivers/mysql/mysql_driver.php:		if (function_exists('mysql_real_escape_string') AND is_resource($this->conn_id))
database/drivers/mysql/mysql_driver.php:			$str = mysql_real_escape_string($str, $this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		return @mysql_affected_rows($this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		return @mysql_insert_id($this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific query string that counts all records in
database/drivers/mysql/mysql_driver.php:		$query = $this->query($this->_count_string . $this->_protect_identifiers('numrows') . " FROM " . $this->_protect_identifiers($table, TRUE, NULL, FALSE));
database/drivers/mysql/mysql_driver.php:		if ($query->num_rows() == 0)
database/drivers/mysql/mysql_driver.php:		$row = $query->row();
database/drivers/mysql/mysql_driver.php:		return (int) $row->numrows;
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific query string so that the table names can be fetched
database/drivers/mysql/mysql_driver.php:		$sql = "SHOW TABLES FROM ".$this->_escape_char.$this->database.$this->_escape_char;	
database/drivers/mysql/mysql_driver.php:		if ($prefix_limit !== FALSE AND $this->dbprefix != '')
database/drivers/mysql/mysql_driver.php:			$sql .= " LIKE '".$this->escape_like_str($this->dbprefix)."%'";
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific query string so that the column names can be fetched
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific query so that the column data can be retrieved
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		return mysql_error($this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		return mysql_errno($this->conn_id);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:		if ($this->_escape_char == '')
database/drivers/mysql/mysql_driver.php:		foreach ($this->_reserved_identifiers as $id)
database/drivers/mysql/mysql_driver.php:				$str = $this->_escape_char. str_replace('.', $this->_escape_char.'.', $item);  
database/drivers/mysql/mysql_driver.php:				return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/mysql/mysql_driver.php:			$str = $this->_escape_char.str_replace('.', $this->_escape_char.'.'.$this->_escape_char, $item).$this->_escape_char;			
database/drivers/mysql/mysql_driver.php:			$str = $this->_escape_char.$item.$this->_escape_char;
database/drivers/mysql/mysql_driver.php:		return preg_replace('/['.$this->_escape_char.']+/', $this->_escape_char, $str);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific insert string from the supplied data
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific update string from the supplied data
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific truncate string from the supplied data
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific delete string from the supplied data
database/drivers/mysql/mysql_driver.php:			$conditions .= implode("\n", $this->ar_where);
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/drivers/mysql/mysql_driver.php:	 * Generates a platform-specific LIMIT clause
database/drivers/mysql/mysql_driver.php:	// --------------------------------------------------------------------
database/DB_cache.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/DB_cache.php:// ------------------------------------------------------------------------
database/DB_cache.php:		// Assign the main CI object to $this->CI
database/DB_cache.php:		$this->CI =& get_instance();
database/DB_cache.php:		$this->db =& $db;
database/DB_cache.php:		$this->CI->load->helper('file');	
database/DB_cache.php:	// --------------------------------------------------------------------
database/DB_cache.php:			if ($this->db->cachedir == '')
database/DB_cache.php:				return $this->db->cache_off();
database/DB_cache.php:			$path = $this->db->cachedir;
database/DB_cache.php:			return $this->db->cache_off();
database/DB_cache.php:		$this->db->cachedir = $path;
database/DB_cache.php:	// --------------------------------------------------------------------
database/DB_cache.php:	 * The URI being requested will become the name of the cache sub-folder.
database/DB_cache.php:		if ( ! $this->check_path())
database/DB_cache.php:			return $this->db->cache_off();
database/DB_cache.php:		$segment_one = ($this->CI->uri->segment(1) == FALSE) ? 'default' : $this->CI->uri->segment(1);
database/DB_cache.php:		$segment_two = ($this->CI->uri->segment(2) == FALSE) ? 'index' : $this->CI->uri->segment(2);
database/DB_cache.php:		$filepath = $this->db->cachedir.$segment_one.'+'.$segment_two.'/'.md5($sql);		
database/DB_cache.php:	// --------------------------------------------------------------------
database/DB_cache.php:		if ( ! $this->check_path())
database/DB_cache.php:			return $this->db->cache_off();
database/DB_cache.php:		$segment_one = ($this->CI->uri->segment(1) == FALSE) ? 'default' : $this->CI->uri->segment(1);
database/DB_cache.php:		$segment_two = ($this->CI->uri->segment(2) == FALSE) ? 'index' : $this->CI->uri->segment(2);
database/DB_cache.php:		$dir_path = $this->db->cachedir.$segment_one.'+'.$segment_two.'/';
database/DB_cache.php:	// --------------------------------------------------------------------
database/DB_cache.php:			$segment_one  = ($this->CI->uri->segment(1) == FALSE) ? 'default' : $this->CI->uri->segment(1);
database/DB_cache.php:			$segment_two = ($this->CI->uri->segment(2) == FALSE) ? 'index' : $this->CI->uri->segment(2);
database/DB_cache.php:		$dir_path = $this->db->cachedir.$segment_one.'+'.$segment_two.'/';
database/DB_cache.php:	// --------------------------------------------------------------------
database/DB_cache.php:		delete_files($this->db->cachedir, TRUE);
database/DB_driver.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/DB_driver.php:// ------------------------------------------------------------------------
database/DB_driver.php: * This is the platform-independent base DB implementation class.
database/DB_driver.php:				$this->$key = $val;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if (is_resource($this->conn_id) OR is_object($this->conn_id))
database/DB_driver.php:		// ----------------------------------------------------------------
database/DB_driver.php:		$this->conn_id = ($this->pconnect == FALSE) ? $this->db_connect() : $this->db_pconnect();
database/DB_driver.php:		if ( ! $this->conn_id)
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				$this->display_error('db_unable_to_connect');
database/DB_driver.php:		// ----------------------------------------------------------------
database/DB_driver.php:		if ($this->database != '')
database/DB_driver.php:			if ( ! $this->db_select())
database/DB_driver.php:				log_message('error', 'Unable to select database: '.$this->database);
database/DB_driver.php:				if ($this->db_debug)
database/DB_driver.php:					$this->display_error('db_unable_to_select', $this->database);
database/DB_driver.php:				if ( ! $this->db_set_charset($this->char_set, $this->dbcollat))
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if ( ! $this->_db_set_charset($this->char_set, $this->dbcollat))
database/DB_driver.php:			log_message('error', 'Unable to set database connection charset: '.$this->char_set);
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				$this->display_error('db_unable_to_set_charset', $this->char_set);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return $this->dbdriver;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if (FALSE === ($sql = $this->_version()))
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				return $this->display_error('db_unsupported_function');
database/DB_driver.php:		if ($this->dbdriver == 'oci8')
database/DB_driver.php:		$query = $this->query($sql);
database/DB_driver.php:		return $query->row('ver');
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				return $this->display_error('db_invalid_query');
database/DB_driver.php:		if ( ($this->dbprefix != '' AND $this->swap_pre != '') AND ($this->dbprefix != $this->swap_pre) )
database/DB_driver.php:			$sql = preg_replace("/(\W)".$this->swap_pre."(\S+?)/", "\\1".$this->dbprefix."\\2", $sql);
database/DB_driver.php:		if ($this->cache_on == TRUE AND stristr($sql, 'SELECT'))
database/DB_driver.php:			if ($this->_cache_init())
database/DB_driver.php:				$this->load_rdriver();
database/DB_driver.php:				if (FALSE !== ($cache = $this->CACHE->read($sql)))
database/DB_driver.php:			$sql = $this->compile_binds($sql, $binds);
database/DB_driver.php:		if ($this->save_queries == TRUE)
database/DB_driver.php:			$this->queries[] = $sql;
database/DB_driver.php:		if (FALSE === ($this->result_id = $this->simple_query($sql)))
database/DB_driver.php:			if ($this->save_queries == TRUE)
database/DB_driver.php:				$this->query_times[] = 0;
database/DB_driver.php:			$this->_trans_status = FALSE;
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				$error_no = $this->_error_number();
database/DB_driver.php:				$error_msg = $this->_error_message();
database/DB_driver.php:				// We call this function in order to roll-back queries
database/DB_driver.php:				$this->trans_complete();
database/DB_driver.php:				return $this->display_error(
database/DB_driver.php:		$this->benchmark += ($em + $es) - ($sm + $ss);
database/DB_driver.php:		if ($this->save_queries == TRUE)
database/DB_driver.php:			$this->query_times[] = ($em + $es) - ($sm + $ss);
database/DB_driver.php:		$this->query_count++;
database/DB_driver.php:		if ($this->is_write_type($sql) === TRUE)
database/DB_driver.php:			// If caching is enabled we'll auto-cleanup any
database/DB_driver.php:			if ($this->cache_on == TRUE AND $this->cache_autodel == TRUE AND $this->_cache_init())
database/DB_driver.php:				$this->CACHE->delete();
database/DB_driver.php:		$driver 		= $this->load_rdriver();
database/DB_driver.php:		$RES->conn_id	= $this->conn_id;
database/DB_driver.php:		$RES->result_id	= $this->result_id;
database/DB_driver.php:		if ($this->dbdriver == 'oci8')
database/DB_driver.php:			$RES->stmt_id		= $this->stmt_id;
database/DB_driver.php:			$RES->curs_id		= NULL;
database/DB_driver.php:			$RES->limit_used	= $this->limit_used;
database/DB_driver.php:			$this->stmt_id		= FALSE;
database/DB_driver.php:		$RES->num_rows	= $RES->num_rows();
database/DB_driver.php:		if ($this->cache_on == TRUE AND $this->_cache_init())
database/DB_driver.php:			$CR->num_rows 		= $RES->num_rows();
database/DB_driver.php:			$CR->result_object	= $RES->result_object();
database/DB_driver.php:			$CR->result_array	= $RES->result_array();
database/DB_driver.php:			$CR->conn_id		= NULL;
database/DB_driver.php:			$CR->result_id		= NULL;
database/DB_driver.php:			$this->CACHE->write($sql, $CR);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$driver = 'CI_DB_'.$this->dbdriver.'_result';
database/DB_driver.php:			include_once(BASEPATH.'database/drivers/'.$this->dbdriver.'/'.$this->dbdriver.'_result'.EXT);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if ( ! $this->conn_id)
database/DB_driver.php:			$this->initialize();
database/DB_driver.php:		return $this->_execute($sql);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:	 * This permits transactions to be disabled at run-time.
database/DB_driver.php:		$this->trans_enabled = FALSE;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$this->trans_strict = is_bool($mode) ? $mode : TRUE;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if ( ! $this->trans_enabled)
database/DB_driver.php:		if ($this->_trans_depth > 0)
database/DB_driver.php:			$this->_trans_depth += 1;
database/DB_driver.php:		$this->trans_begin($test_mode);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if ( ! $this->trans_enabled)
database/DB_driver.php:		if ($this->_trans_depth > 1)
database/DB_driver.php:			$this->_trans_depth -= 1;
database/DB_driver.php:		if ($this->_trans_status === FALSE)
database/DB_driver.php:			$this->trans_rollback();
database/DB_driver.php:			if ($this->trans_strict === FALSE)
database/DB_driver.php:				$this->_trans_status = TRUE;
database/DB_driver.php:		$this->trans_commit();
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return $this->_trans_status;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if (strpos($sql, $this->bind_marker) === FALSE)
database/DB_driver.php:		$segments = explode($this->bind_marker, $sql);
database/DB_driver.php:			$binds = array_slice($binds, 0, count($segments)-1);
database/DB_driver.php:			$result .= $this->escape($bind);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return number_format($this->benchmark, $decimals);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return $this->query_count;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return end($this->queries);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:			$str = "'".$this->escape_str($str)."'";
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:    	return $this->escape_str($str, TRUE);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$fields = $this->list_fields($table);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if (isset($this->data_cache['table_names']))
database/DB_driver.php:			return $this->data_cache['table_names'];
database/DB_driver.php:		if (FALSE === ($sql = $this->_list_tables($constrain_by_prefix)))
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				return $this->display_error('db_unsupported_function');
database/DB_driver.php:		$query = $this->query($sql);
database/DB_driver.php:		if ($query->num_rows() > 0)
database/DB_driver.php:			foreach($query->result_array() as $row)
database/DB_driver.php:		$this->data_cache['table_names'] = $retval;
database/DB_driver.php:		return $this->data_cache['table_names'];
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return ( ! in_array($this->_protect_identifiers($table_name, TRUE, FALSE, FALSE), $this->list_tables())) ? FALSE : TRUE;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if (isset($this->data_cache['field_names'][$table]))
database/DB_driver.php:			return $this->data_cache['field_names'][$table];
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				return $this->display_error('db_field_param_missing');
database/DB_driver.php:		if (FALSE === ($sql = $this->_list_columns($this->_protect_identifiers($table, TRUE, NULL, FALSE))))
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				return $this->display_error('db_unsupported_function');
database/DB_driver.php:		$query = $this->query($sql);
database/DB_driver.php:		foreach($query->result_array() as $row)
database/DB_driver.php:		$this->data_cache['field_names'][$table] = $retval;
database/DB_driver.php:		return $this->data_cache['field_names'][$table];
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return ( ! in_array($field_name, $this->list_fields($table_name))) ? FALSE : TRUE;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				return $this->display_error('db_field_param_missing');
database/DB_driver.php:		$query = $this->query($this->_field_data($this->_protect_identifiers($table, TRUE, NULL, FALSE)));
database/DB_driver.php:		return $query->field_data();
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:			$fields[] = $this->_escape_identifiers($key);
database/DB_driver.php:			$values[] = $this->escape($val);
database/DB_driver.php:		return $this->_insert($this->_protect_identifiers($table, TRUE, NULL, FALSE), $fields, $values);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:			$fields[$this->_protect_identifiers($key)] = $this->escape($val);
database/DB_driver.php:					if ( ! $this->_has_operator($key))
database/DB_driver.php:					$val = ' '.$this->escape($val);
database/DB_driver.php:		return $this->_update($this->_protect_identifiers($table, TRUE, NULL, FALSE), $fields, $dest);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$driver = ($this->dbdriver == 'postgre') ? 'pg_' : $this->dbdriver.'_';
database/DB_driver.php:			if ($this->db_debug)
database/DB_driver.php:				return $this->display_error('db_unsupported_function');
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$this->cachedir = $path;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$this->cache_on = TRUE;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$this->cache_on = FALSE;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if ( ! $this->_cache_init())
database/DB_driver.php:		return $this->CACHE->delete($segment_one, $segment_two);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if ( ! $this->_cache_init())
database/DB_driver.php:		return $this->CACHE->delete_all();
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if (is_object($this->CACHE) AND class_exists('CI_DB_Cache'))
database/DB_driver.php:				return $this->cache_off();
database/DB_driver.php:		$this->CACHE = new CI_DB_Cache($this); // pass db object to support multiple db connections and returned db objects
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		if (is_resource($this->conn_id) OR is_object($this->conn_id))
database/DB_driver.php:			$this->_close($this->conn_id);
database/DB_driver.php:		$this->conn_id = FALSE;
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		$LANG->load('db');
database/DB_driver.php:		$heading = $LANG->line('db_error_heading');
database/DB_driver.php:			$message = ( ! is_array($error)) ? array(str_replace('%s', $swap, $LANG->line($error))) : $error;
database/DB_driver.php:		echo $error->show_error($heading, $message, 'error_db');
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:		return $this->_protect_identifiers($item, $prefix_single);
database/DB_driver.php:	// --------------------------------------------------------------------
database/DB_driver.php:			$protect_identifiers = $this->_protect_identifiers;
database/DB_driver.php:				$escaped_array[$this->_protect_identifiers($k)] = $this->_protect_identifiers($v);
database/DB_driver.php:			$item = substr($item, 0, - strlen($alias));
database/DB_driver.php:		// way to deal with this, but I'm not thinking of it -- Rick
database/DB_driver.php:			if (in_array($parts[0], $this->ar_aliased_tables))
database/DB_driver.php:						if ( ! in_array($val, $this->_reserved_identifiers))
database/DB_driver.php:							$parts[$key] = $this->_escape_identifiers($val);
database/DB_driver.php:			if ($this->dbprefix != '')
database/DB_driver.php:				if ($this->swap_pre != '' && strncmp($parts[$i], $this->swap_pre, strlen($this->swap_pre)) === 0)
database/DB_driver.php:					$parts[$i] = preg_replace("/^".$this->swap_pre."(\S+?)/", $this->dbprefix."\\1", $parts[$i]);
database/DB_driver.php:				if (substr($parts[$i], 0, strlen($this->dbprefix)) != $this->dbprefix)
database/DB_driver.php:					$parts[$i] = $this->dbprefix.$parts[$i];
database/DB_driver.php:				$item = $this->_escape_identifiers($item);
database/DB_driver.php:		if ($this->dbprefix != '')
database/DB_driver.php:			if ($this->swap_pre != '' && strncmp($item, $this->swap_pre, strlen($this->swap_pre)) === 0)
database/DB_driver.php:				$item = preg_replace("/^".$this->swap_pre."(\S+?)/", $this->dbprefix."\\1", $item);
database/DB_driver.php:			if ($prefix_single == TRUE AND substr($item, 0, strlen($this->dbprefix)) != $this->dbprefix)
database/DB_driver.php:				$item = $this->dbprefix.$item;
database/DB_driver.php:		if ($protect_identifiers === TRUE AND ! in_array($item, $this->_reserved_identifiers))
database/DB_driver.php:			$item = $this->_escape_identifiers($item);
database/DB.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/DB.php:// ------------------------------------------------------------------------
database/DB.php:	if ($DB->autoinit == TRUE)
database/DB.php:		$DB->initialize();
database/DB_forge.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/DB_forge.php:// ------------------------------------------------------------------------
database/DB_forge.php:		// Assign the main database object to $this->db
database/DB_forge.php:		$this->db =& $CI->db;
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:		$sql = $this->_create_database($db_name);
database/DB_forge.php:		return $this->db->query($sql);
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:		$sql = $this->_drop_database($db_name);
database/DB_forge.php:		return $this->db->query($sql);
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:				$this->add_key($one, $primary);
database/DB_forge.php:			$this->primary_keys[] = $key;
database/DB_forge.php:			$this->keys[] = $key;
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:				$this->add_field(array(
database/DB_forge.php:				$this->add_key('id', TRUE);
database/DB_forge.php:				$this->fields[] = $field;
database/DB_forge.php:			$this->fields = array_merge($this->fields, $field);
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:		if (count($this->fields) == 0)
database/DB_forge.php:		$sql = $this->_create_table($this->db->dbprefix.$table, $this->fields, $this->primary_keys, $this->keys, $if_not_exists);
database/DB_forge.php:		$this->_reset();
database/DB_forge.php:		return $this->db->query($sql);
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:		$sql = $this->_drop_table($this->db->dbprefix.$table_name);
database/DB_forge.php:		return $this->db->query($sql);
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:		$sql = $this->_rename_table($table_name, $new_table_name);
database/DB_forge.php:		return $this->db->query($sql);
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:			$this->add_field(array($k => $field[$k]));		
database/DB_forge.php:			if (count($this->fields) == 0)
database/DB_forge.php:			$sql = $this->_alter_table('ADD', $this->db->dbprefix.$table, $this->fields, $after_field);
database/DB_forge.php:			$this->_reset();
database/DB_forge.php:			if ($this->db->query($sql) === FALSE)
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:		$sql = $this->_alter_table('DROP', $this->db->dbprefix.$table, $column_name);
database/DB_forge.php:		return $this->db->query($sql);
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:			$this->add_field(array($k => $field[$k]));
database/DB_forge.php:			if (count($this->fields) == 0)
database/DB_forge.php:			$sql = $this->_alter_table('CHANGE', $this->db->dbprefix.$table, $this->fields);
database/DB_forge.php:			$this->_reset();
database/DB_forge.php:			if ($this->db->query($sql) === FALSE)
database/DB_forge.php:	// --------------------------------------------------------------------
database/DB_forge.php:		$this->fields 		= array();
database/DB_forge.php:		$this->keys			= array();
database/DB_forge.php:		$this->primary_keys 	= array();
database/DB_result.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/DB_result.php:// ------------------------------------------------------------------------
database/DB_result.php: * This is the platform-independent result class.
database/DB_result.php:		return ($type == 'object') ? $this->result_object() : $this->result_array();
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:		if (count($this->result_object) > 0)
database/DB_result.php:			return $this->result_object;
database/DB_result.php:		if ($this->result_id === FALSE OR $this->num_rows() == 0)
database/DB_result.php:		$this->_data_seek(0);
database/DB_result.php:		while ($row = $this->_fetch_object())
database/DB_result.php:			$this->result_object[] = $row;
database/DB_result.php:		return $this->result_object;
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:		if (count($this->result_array) > 0)
database/DB_result.php:			return $this->result_array;
database/DB_result.php:		if ($this->result_id === FALSE OR $this->num_rows() == 0)
database/DB_result.php:		$this->_data_seek(0);
database/DB_result.php:		while ($row = $this->_fetch_assoc())
database/DB_result.php:			$this->result_array[] = $row;
database/DB_result.php:		return $this->result_array;
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:			if ( ! is_array($this->row_data))
database/DB_result.php:				$this->row_data = $this->row_array(0);
database/DB_result.php:			if (array_key_exists($n, $this->row_data))
database/DB_result.php:				return $this->row_data[$n];
database/DB_result.php:		return ($type == 'object') ? $this->row_object($n) : $this->row_array($n);
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:		if ( ! is_array($this->row_data))
database/DB_result.php:			$this->row_data = $this->row_array(0);
database/DB_result.php:				$this->row_data[$k] = $v;
database/DB_result.php:			$this->row_data[$key] = $value;
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:	 * Returns a single result row - object version
database/DB_result.php:		$result = $this->result_object();
database/DB_result.php:		if ($n != $this->current_row AND isset($result[$n]))
database/DB_result.php:			$this->current_row = $n;
database/DB_result.php:		return $result[$this->current_row];
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:	 * Returns a single result row - array version
database/DB_result.php:		$result = $this->result_array();
database/DB_result.php:		if ($n != $this->current_row AND isset($result[$n]))
database/DB_result.php:			$this->current_row = $n;
database/DB_result.php:		return $result[$this->current_row];
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:		$result = $this->result($type);
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:		$result = $this->result($type);
database/DB_result.php:		return $result[count($result) -1];
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:		$result = $this->result($type);
database/DB_result.php:		if (isset($result[$this->current_row + 1]))
database/DB_result.php:			++$this->current_row;
database/DB_result.php:		return $result[$this->current_row];
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:		$result = $this->result($type);
database/DB_result.php:		if (isset($result[$this->current_row - 1]))
database/DB_result.php:			--$this->current_row;
database/DB_result.php:		return $result[$this->current_row];
database/DB_result.php:	// --------------------------------------------------------------------
database/DB_result.php:	 * methods in the platform-specific driver -- except when query caching
database/DB_result.php:	function num_rows() { return $this->num_rows; }
database/DB_utility.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/DB_utility.php:// ------------------------------------------------------------------------
database/DB_utility.php:		// Assign the main database object to $this->db
database/DB_utility.php:		$this->db =& $CI->db;
database/DB_utility.php:	// --------------------------------------------------------------------
database/DB_utility.php:		if (isset($this->data_cache['db_names']))
database/DB_utility.php:			return $this->data_cache['db_names'];
database/DB_utility.php:		$query = $this->db->query($this->_list_databases());
database/DB_utility.php:		if ($query->num_rows() > 0)
database/DB_utility.php:			foreach ($query->result_array() as $row)
database/DB_utility.php:		$this->data_cache['db_names'] = $dbs;
database/DB_utility.php:		return $this->data_cache['db_names'];
database/DB_utility.php:	// --------------------------------------------------------------------
database/DB_utility.php:		$sql = $this->_optimize_table($table_name);
database/DB_utility.php:		$query = $this->db->query($sql);
database/DB_utility.php:		$res = $query->result_array();
database/DB_utility.php:	// --------------------------------------------------------------------
database/DB_utility.php:		foreach ($this->db->list_tables() as $table_name)
database/DB_utility.php:			$sql = $this->_optimize_table($table_name);
database/DB_utility.php:			$query = $this->db->query($sql);
database/DB_utility.php:			$res = $query->result_array();
database/DB_utility.php:			$key = str_replace($this->db->database.'.', '', current($res));
database/DB_utility.php:	// --------------------------------------------------------------------
database/DB_utility.php:		$sql = $this->_repair_table($table_name);
database/DB_utility.php:		$query = $this->db->query($sql);
database/DB_utility.php:		$res = $query->result_array();
database/DB_utility.php:	// --------------------------------------------------------------------
database/DB_utility.php:	 * @param	string	The delimiter - comma by default
database/DB_utility.php:	 * @param	string	The newline character - \n by default
database/DB_utility.php:	 * @param	string	The enclosure - double quote by default
database/DB_utility.php:		foreach ($query->list_fields() as $name)
database/DB_utility.php:		foreach ($query->result_array() as $row)
database/DB_utility.php:	// --------------------------------------------------------------------
database/DB_utility.php:		$CI->load->helper('xml');
database/DB_utility.php:		foreach ($query->result_array() as $row)
database/DB_utility.php:	// --------------------------------------------------------------------
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:			$prefs['tables'] = $this->db->list_tables();
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:			if ($this->db->db_debug)
database/DB_utility.php:				return $this->db->display_error('db_unsuported_compression');
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:		// Set the filename if not provided - Only needed with Zip files
database/DB_utility.php:			$prefs['filename'] = (count($prefs['tables']) == 1) ? $prefs['tables'] : $this->db->database;
database/DB_utility.php:			$prefs['filename'] .= '_'.date('Y-m-d_H-i', time());
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:			return gzencode($this->_backup($prefs));
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:			return $this->_backup($prefs);
database/DB_utility.php:		// ------------------------------------------------------
database/DB_utility.php:			$CI->load->library('zip');
database/DB_utility.php:			$CI->zip->add_data($prefs['filename'], $this->_backup($prefs));							
database/DB_utility.php:			return $CI->zip->get_zip();
database/DB_active_rec.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
database/DB_active_rec.php:// ------------------------------------------------------------------------
database/DB_active_rec.php: * This is the platform-independent base Active Record implementation class.
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$this->_protect_identifiers = $escape;
database/DB_active_rec.php:				$this->ar_select[] = $val;
database/DB_active_rec.php:				if ($this->ar_caching === TRUE)
database/DB_active_rec.php:					$this->ar_cache_select[] = $val;
database/DB_active_rec.php:					$this->ar_cache_exists[] = 'select';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_max_min_avg_sum($select, $alias, 'MAX');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_max_min_avg_sum($select, $alias, 'MIN');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_max_min_avg_sum($select, $alias, 'AVG');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_max_min_avg_sum($select, $alias, 'SUM');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$this->display_error('db_invalid_query');
database/DB_active_rec.php:			$alias = $this->_create_alias_from_table(trim($select));
database/DB_active_rec.php:		$sql = $type.'('.$this->_protect_identifiers(trim($select)).') AS '.$alias;
database/DB_active_rec.php:		$this->ar_select[] = $sql;
database/DB_active_rec.php:		if ($this->ar_caching === TRUE)
database/DB_active_rec.php:			$this->ar_cache_select[] = $sql;
database/DB_active_rec.php:			$this->ar_cache_exists[] = 'select';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->ar_distinct = (is_bool($val)) ? $val : TRUE;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:					$this->_track_aliases($v);
database/DB_active_rec.php:					$this->ar_from[] = $this->_protect_identifiers($v, TRUE, NULL, FALSE);
database/DB_active_rec.php:					if ($this->ar_caching === TRUE)
database/DB_active_rec.php:						$this->ar_cache_from[] = $this->_protect_identifiers($v, TRUE, NULL, FALSE);
database/DB_active_rec.php:						$this->ar_cache_exists[] = 'from';
database/DB_active_rec.php:				$this->_track_aliases($val);
database/DB_active_rec.php:				$this->ar_from[] = $this->_protect_identifiers($val, TRUE, NULL, FALSE);
database/DB_active_rec.php:				if ($this->ar_caching === TRUE)
database/DB_active_rec.php:					$this->ar_cache_from[] = $this->_protect_identifiers($val, TRUE, NULL, FALSE);
database/DB_active_rec.php:					$this->ar_cache_exists[] = 'from';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->_track_aliases($table);
database/DB_active_rec.php:			$match[1] = $this->_protect_identifiers($match[1]);
database/DB_active_rec.php:			$match[3] = $this->_protect_identifiers($match[3]);
database/DB_active_rec.php:		$join = $type.'JOIN '.$this->_protect_identifiers($table, TRUE, NULL, FALSE).' ON '.$cond;
database/DB_active_rec.php:		$this->ar_join[] = $join;
database/DB_active_rec.php:		if ($this->ar_caching === TRUE)
database/DB_active_rec.php:			$this->ar_cache_join[] = $join;
database/DB_active_rec.php:			$this->ar_cache_exists[] = 'join';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_where($key, $value, 'AND ', $escape);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_where($key, $value, 'OR ', $escape);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->or_where($key, $value, $escape);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$escape = $this->_protect_identifiers;
database/DB_active_rec.php:			$prefix = (count($this->ar_where) == 0 AND count($this->ar_cache_where) == 0) ? '' : $type;
database/DB_active_rec.php:			if (is_null($v) && ! $this->_has_operator($k))
database/DB_active_rec.php:					$k = $this->_protect_identifiers($k, FALSE, $escape);
database/DB_active_rec.php:					$v = ' '.$this->escape($v);
database/DB_active_rec.php:				if ( ! $this->_has_operator($k))
database/DB_active_rec.php:				$k = $this->_protect_identifiers($k, FALSE, $escape);			
database/DB_active_rec.php:			$this->ar_where[] = $prefix.$k.$v;
database/DB_active_rec.php:			if ($this->ar_caching === TRUE)
database/DB_active_rec.php:				$this->ar_cache_where[] = $prefix.$k.$v;
database/DB_active_rec.php:				$this->ar_cache_exists[] = 'where';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_where_in($key, $values);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_where_in($key, $values, FALSE, 'OR ');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_where_in($key, $values, TRUE);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_where_in($key, $values, TRUE, 'OR ');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$this->ar_wherein[] = $this->escape($value);
database/DB_active_rec.php:		$prefix = (count($this->ar_where) == 0) ? '' : $type;
database/DB_active_rec.php:		$where_in = $prefix . $this->_protect_identifiers($key) . $not . " IN (" . implode(", ", $this->ar_wherein) . ") ";
database/DB_active_rec.php:		$this->ar_where[] = $where_in;
database/DB_active_rec.php:		if ($this->ar_caching === TRUE)
database/DB_active_rec.php:			$this->ar_cache_where[] = $where_in;
database/DB_active_rec.php:			$this->ar_cache_exists[] = 'where';
database/DB_active_rec.php:		$this->ar_wherein = array();
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_like($field, $match, 'AND ', $side);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_like($field, $match, 'AND ', $side, 'NOT');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_like($field, $match, 'OR ', $side);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_like($field, $match, 'OR ', $side, 'NOT');
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->or_like($field, $match, $side);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$k = $this->_protect_identifiers($k);
database/DB_active_rec.php:			$prefix = (count($this->ar_like) == 0) ? '' : $type;
database/DB_active_rec.php:			$v = $this->escape_like_str($v);
database/DB_active_rec.php:			if ($this->_like_escape_str != '')
database/DB_active_rec.php:				$like_statement = $like_statement.sprintf($this->_like_escape_str, $this->_like_escape_char);
database/DB_active_rec.php:			$this->ar_like[] = $like_statement;
database/DB_active_rec.php:			if ($this->ar_caching === TRUE)
database/DB_active_rec.php:				$this->ar_cache_like[] = $like_statement;
database/DB_active_rec.php:				$this->ar_cache_exists[] = 'like';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:				$this->ar_groupby[] = $this->_protect_identifiers($val);
database/DB_active_rec.php:				if ($this->ar_caching === TRUE)
database/DB_active_rec.php:					$this->ar_cache_groupby[] = $this->_protect_identifiers($val);
database/DB_active_rec.php:					$this->ar_cache_exists[] = 'groupby';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->group_by($by);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_having($key, $value, 'AND ', $escape);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->or_having($key, $value, $escape);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->_having($key, $value, 'OR ', $escape);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$prefix = (count($this->ar_having) == 0) ? '' : $type;
database/DB_active_rec.php:				$k = $this->_protect_identifiers($k);
database/DB_active_rec.php:			if ( ! $this->_has_operator($k))
database/DB_active_rec.php:				$v = ' '.$this->escape_str($v);
database/DB_active_rec.php:			$this->ar_having[] = $prefix.$k.$v;
database/DB_active_rec.php:			if ($this->ar_caching === TRUE)
database/DB_active_rec.php:				$this->ar_cache_having[] = $prefix.$k.$v;
database/DB_active_rec.php:				$this->ar_cache_exists[] = 'having';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$direction = $this->_random_keyword;
database/DB_active_rec.php:				if ( ! in_array($part, $this->ar_aliased_tables))
database/DB_active_rec.php:					$part = $this->_protect_identifiers(trim($part));
database/DB_active_rec.php:		else if ($direction != $this->_random_keyword)
database/DB_active_rec.php:			$orderby = $this->_protect_identifiers($orderby);
database/DB_active_rec.php:		$this->ar_orderby[] = $orderby_statement;
database/DB_active_rec.php:		if ($this->ar_caching === TRUE)
database/DB_active_rec.php:			$this->ar_cache_orderby[] = $orderby_statement;
database/DB_active_rec.php:			$this->ar_cache_exists[] = 'orderby';
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->order_by($orderby, $direction);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->ar_limit = $value;
database/DB_active_rec.php:			$this->ar_offset = $offset;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->ar_offset = $offset;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$key = $this->_object_to_array($key);
database/DB_active_rec.php:				$this->ar_set[$this->_protect_identifiers($k)] = $v;
database/DB_active_rec.php:				$this->ar_set[$this->_protect_identifiers($k)] = $this->escape($v);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$this->_track_aliases($table);
database/DB_active_rec.php:			$this->from($table);
database/DB_active_rec.php:			$this->limit($limit, $offset);
database/DB_active_rec.php:		$sql = $this->_compile_select();
database/DB_active_rec.php:		$result = $this->query($sql);
database/DB_active_rec.php:		$this->_reset_select();
database/DB_active_rec.php:	 * Generates a platform-specific query string that counts all records 
database/DB_active_rec.php:			$this->_track_aliases($table);
database/DB_active_rec.php:			$this->from($table);
database/DB_active_rec.php:		$sql = $this->_compile_select($this->_count_string . $this->_protect_identifiers('numrows'));
database/DB_active_rec.php:		$query = $this->query($sql);
database/DB_active_rec.php:		$this->_reset_select();
database/DB_active_rec.php:		if ($query->num_rows() == 0)
database/DB_active_rec.php:		$row = $query->row();
database/DB_active_rec.php:		return $row->numrows;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$this->from($table);
database/DB_active_rec.php:			$this->where($where);
database/DB_active_rec.php:			$this->limit($limit, $offset);
database/DB_active_rec.php:		$sql = $this->_compile_select();
database/DB_active_rec.php:		$result = $this->query($sql);
database/DB_active_rec.php:		$this->_reset_select();
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		return $this->get_where($table, $where, $limit, $offset);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$this->set($set);
database/DB_active_rec.php:		if (count($this->ar_set) == 0)
database/DB_active_rec.php:			if ($this->db_debug)
database/DB_active_rec.php:				return $this->display_error('db_must_use_set');
database/DB_active_rec.php:			if ( ! isset($this->ar_from[0]))
database/DB_active_rec.php:				if ($this->db_debug)
database/DB_active_rec.php:					return $this->display_error('db_must_set_table');
database/DB_active_rec.php:			$table = $this->ar_from[0];
database/DB_active_rec.php:		$sql = $this->_insert($this->_protect_identifiers($table, TRUE, NULL, FALSE), array_keys($this->ar_set), array_values($this->ar_set));
database/DB_active_rec.php:		$this->_reset_write();
database/DB_active_rec.php:		return $this->query($sql);		
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->_merge_cache();
database/DB_active_rec.php:			$this->set($set);
database/DB_active_rec.php:		if (count($this->ar_set) == 0)
database/DB_active_rec.php:			if ($this->db_debug)
database/DB_active_rec.php:				return $this->display_error('db_must_use_set');
database/DB_active_rec.php:			if ( ! isset($this->ar_from[0]))
database/DB_active_rec.php:				if ($this->db_debug)
database/DB_active_rec.php:					return $this->display_error('db_must_set_table');
database/DB_active_rec.php:			$table = $this->ar_from[0];
database/DB_active_rec.php:			$this->where($where);
database/DB_active_rec.php:			$this->limit($limit);
database/DB_active_rec.php:		$sql = $this->_update($this->_protect_identifiers($table, TRUE, NULL, FALSE), $this->ar_set, $this->ar_where, $this->ar_orderby, $this->ar_limit);
database/DB_active_rec.php:		$this->_reset_write();
database/DB_active_rec.php:		return $this->query($sql);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			if ( ! isset($this->ar_from[0]))
database/DB_active_rec.php:				if ($this->db_debug)
database/DB_active_rec.php:					return $this->display_error('db_must_set_table');
database/DB_active_rec.php:			$table = $this->ar_from[0];
database/DB_active_rec.php:			$table = $this->_protect_identifiers($table, TRUE, NULL, FALSE);
database/DB_active_rec.php:		$sql = $this->_delete($table);
database/DB_active_rec.php:		$this->_reset_write();
database/DB_active_rec.php:		return $this->query($sql);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			if ( ! isset($this->ar_from[0]))
database/DB_active_rec.php:				if ($this->db_debug)
database/DB_active_rec.php:					return $this->display_error('db_must_set_table');
database/DB_active_rec.php:			$table = $this->ar_from[0];
database/DB_active_rec.php:			$table = $this->_protect_identifiers($table, TRUE, NULL, FALSE);
database/DB_active_rec.php:		$sql = $this->_truncate($table);
database/DB_active_rec.php:		$this->_reset_write();
database/DB_active_rec.php:		return $this->query($sql);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->_merge_cache();
database/DB_active_rec.php:			if ( ! isset($this->ar_from[0]))
database/DB_active_rec.php:				if ($this->db_debug)
database/DB_active_rec.php:					return $this->display_error('db_must_set_table');
database/DB_active_rec.php:			$table = $this->ar_from[0];
database/DB_active_rec.php:				$this->delete($single_table, $where, $limit, FALSE);
database/DB_active_rec.php:			$this->_reset_write();
database/DB_active_rec.php:			$table = $this->_protect_identifiers($table, TRUE, NULL, FALSE);
database/DB_active_rec.php:			$this->where($where);
database/DB_active_rec.php:			$this->limit($limit);
database/DB_active_rec.php:		if (count($this->ar_where) == 0 && count($this->ar_wherein) == 0 && count($this->ar_like) == 0)
database/DB_active_rec.php:			if ($this->db_debug)
database/DB_active_rec.php:				return $this->display_error('db_del_must_use_where');
database/DB_active_rec.php:		$sql = $this->_delete($table, $this->ar_where, $this->ar_like, $this->ar_limit);
database/DB_active_rec.php:			$this->_reset_write();
database/DB_active_rec.php:		return $this->query($sql);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			$this->display_error('db_table_name_required');
database/DB_active_rec.php:		return $this->dbprefix.$table;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:				$this->_track_aliases($t);
database/DB_active_rec.php:			return $this->_track_aliases(explode(',', $table));
database/DB_active_rec.php:			if ( ! in_array($table, $this->ar_aliased_tables))
database/DB_active_rec.php:				$this->ar_aliased_tables[] = $table;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->_merge_cache();
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:			$sql = ( ! $this->ar_distinct) ? 'SELECT ' : 'SELECT DISTINCT ';
database/DB_active_rec.php:			if (count($this->ar_select) == 0)
database/DB_active_rec.php:				foreach ($this->ar_select as $key => $val)
database/DB_active_rec.php:					$this->ar_select[$key] = $this->_protect_identifiers($val);
database/DB_active_rec.php:				$sql .= implode(', ', $this->ar_select);
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_from) > 0)
database/DB_active_rec.php:			$sql .= $this->_from_tables($this->ar_from);
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_join) > 0)
database/DB_active_rec.php:			$sql .= implode("\n", $this->ar_join);
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_where) > 0 OR count($this->ar_like) > 0)
database/DB_active_rec.php:		$sql .= implode("\n", $this->ar_where);
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_like) > 0)
database/DB_active_rec.php:			if (count($this->ar_where) > 0)
database/DB_active_rec.php:			$sql .= implode("\n", $this->ar_like);
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_groupby) > 0)
database/DB_active_rec.php:			$sql .= implode(', ', $this->ar_groupby);
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_having) > 0)
database/DB_active_rec.php:			$sql .= implode("\n", $this->ar_having);
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_orderby) > 0)
database/DB_active_rec.php:			$sql .= implode(', ', $this->ar_orderby);
database/DB_active_rec.php:			if ($this->ar_order !== FALSE)
database/DB_active_rec.php:				$sql .= ($this->ar_order == 'desc') ? ' DESC' : ' ASC';
database/DB_active_rec.php:		// ----------------------------------------------------------------
database/DB_active_rec.php:		if (is_numeric($this->ar_limit))
database/DB_active_rec.php:			$sql = $this->_limit($sql, $this->ar_limit, $this->ar_offset);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->ar_caching = TRUE;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->ar_caching = FALSE;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->_reset_run(
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		if (count($this->ar_cache_exists) == 0)
database/DB_active_rec.php:		foreach ($this->ar_cache_exists as $val)
database/DB_active_rec.php:			if (count($this->$ar_cache_var) == 0)
database/DB_active_rec.php:			$this->$ar_variable = array_unique(array_merge($this->$ar_cache_var, $this->$ar_variable));
database/DB_active_rec.php:		if ($this->_protect_identifiers === TRUE AND count($this->ar_cache_from) > 0)
database/DB_active_rec.php:			$this->_track_aliases($this->ar_from);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:			if ( ! in_array($item, $this->ar_store_array))
database/DB_active_rec.php:				$this->$item = $default_value;
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->_reset_run($ar_reset_items);
database/DB_active_rec.php:	// --------------------------------------------------------------------
database/DB_active_rec.php:		$this->_reset_run($ar_reset_items);
Binary file fonts/texb.ttf matches
helpers/url_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:		return $CI->config->site_url($uri);
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:		return $CI->config->slash_item('base_url');
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:		return $CI->config->site_url($CI->uri->uri_string());
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:		return $CI->uri->uri_string();
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:		return $CI->config->item('index_page');
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php: * Anchor Link - Pop-up version
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php: * Create a spam-protected mailto link written in Javascript
helpers/url_helper.php:	for (var i = l.length-1; i >= 0; i=i-1){
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php: * Auto-linker
helpers/url_helper.php: * @param	bool 	whether to create pop-up links
helpers/url_helper.php:						$matches['6'][$i] = substr($matches['6'][$i], 0, -1);
helpers/url_helper.php:			if (preg_match_all("/([a-zA-Z0-9_\.\-\+]+)@([a-zA-Z0-9\-]+)\.([a-zA-Z0-9\-\.]*)/i", $str, $matches))
helpers/url_helper.php:						$matches['3'][$i] = substr($matches['3'][$i], 0, -1);
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php: * human-friendly URL string with either a dash
helpers/url_helper.php:			$replace	= '-';
helpers/url_helper.php:			$search		= '-';
helpers/url_helper.php:						'[^a-z0-9\-\._]'		=> '',
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:// ------------------------------------------------------------------------
helpers/url_helper.php:			$att = substr($att, 0, -1);
helpers/inflector_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/inflector_helper.php:// ------------------------------------------------------------------------
helpers/inflector_helper.php:// --------------------------------------------------------------------
helpers/inflector_helper.php:		$end = substr($str, -3);
helpers/inflector_helper.php:			$str = substr($str, 0, strlen($str)-3).'y';
helpers/inflector_helper.php:			$str = substr($str, 0, strlen($str)-2);
helpers/inflector_helper.php:			$end = substr($str, -1);
helpers/inflector_helper.php:				$str = substr($str, 0, strlen($str)-1);
helpers/inflector_helper.php:// --------------------------------------------------------------------
helpers/inflector_helper.php:		$end = substr($str, -1);
helpers/inflector_helper.php:			$str = in_array(substr($str, -2, 1), $vowels) ? $str.'s' : substr($str, 0, -1).'ies';
helpers/inflector_helper.php:// --------------------------------------------------------------------
helpers/inflector_helper.php:// --------------------------------------------------------------------
helpers/inflector_helper.php:// --------------------------------------------------------------------
helpers/typography_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/typography_helper.php:// ------------------------------------------------------------------------
helpers/typography_helper.php:// ------------------------------------------------------------------------
helpers/typography_helper.php:		$CI->load->library('typography');
helpers/typography_helper.php:		return $CI->typography->nl2br_except_pre($str);
helpers/typography_helper.php:// ------------------------------------------------------------------------
helpers/typography_helper.php:		$CI->load->library('typography');
helpers/typography_helper.php:		return $CI->typography->auto_typography($str, $reduce_linebreaks);
helpers/xml_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/xml_helper.php:// ------------------------------------------------------------------------
helpers/xml_helper.php:// ------------------------------------------------------------------------
helpers/xml_helper.php:		$str = str_replace(array("&","<",">","\"", "'", "-"),
helpers/array_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/array_helper.php:// ------------------------------------------------------------------------
helpers/array_helper.php:// ------------------------------------------------------------------------
helpers/array_helper.php:// ------------------------------------------------------------------------
helpers/array_helper.php: * Random Element - Takes an array as input and returns a random element
helpers/language_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/language_helper.php:// ------------------------------------------------------------------------
helpers/language_helper.php:// ------------------------------------------------------------------------
helpers/language_helper.php:		$line = $CI->lang->line($line);
helpers/language_helper.php:// ------------------------------------------------------------------------
helpers/cookie_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/cookie_helper.php:// ------------------------------------------------------------------------
helpers/cookie_helper.php:// ------------------------------------------------------------------------
helpers/cookie_helper.php:		if ($prefix == '' AND $CI->config->item('cookie_prefix') != '')
helpers/cookie_helper.php:			$prefix = $CI->config->item('cookie_prefix');
helpers/cookie_helper.php:		if ($domain == '' AND $CI->config->item('cookie_domain') != '')
helpers/cookie_helper.php:			$domain = $CI->config->item('cookie_domain');
helpers/cookie_helper.php:		if ($path == '/' AND $CI->config->item('cookie_path') != '/')
helpers/cookie_helper.php:			$path = $CI->config->item('cookie_path');
helpers/cookie_helper.php:			$expire = time() - 86500;
helpers/cookie_helper.php:// --------------------------------------------------------------------
helpers/cookie_helper.php:		return $CI->input->cookie($prefix.$index, $xss_clean);
helpers/cookie_helper.php:// --------------------------------------------------------------------
helpers/smiley_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/smiley_helper.php:// ------------------------------------------------------------------------
helpers/smiley_helper.php:// ------------------------------------------------------------------------
helpers/smiley_helper.php: * @param	mixed	alias name or array of alias->field_id pairs
helpers/smiley_helper.php:		return '<script type="text/javascript" charset="utf-8">'.$r.'</script>';
helpers/smiley_helper.php:// ------------------------------------------------------------------------
helpers/smiley_helper.php:			// :-) and :) might be replaced with the same image so both smileys
helpers/smiley_helper.php:// ------------------------------------------------------------------------
helpers/smiley_helper.php:// ------------------------------------------------------------------------
helpers/smiley_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php: * http://www.some-site.com//index.php
helpers/string_helper.php: * http://www.some-site.com/index.php
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php: * @param	bool	TRUE/FALSE - whether to trim the character from the beginning/end
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php:						$str .= substr($pool, mt_rand(0, strlen($pool) -1), 1);
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/string_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:					fair that we output that entity and restart $temp before continuing. -Paul
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:				   $out .= chr(192 + (($digits - ($digits % 64)) / 64));
helpers/text_helper.php:				   $out .= chr(224 + (($digits - ($digits % 4096)) / 4096));
helpers/text_helper.php:				   $out .= chr(128 + ((($digits % 4096) - ($digits % 64)) / 64));
helpers/text_helper.php:							  array("&","<",">","\"", "'", "-"),
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:		$delim = '[-_\'\"`(){}<>\[\]|!?@#%&,.:;^~*+=\/ 0-9\n\r\t]';
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:		$str = preg_replace('/<span style="color: #([A-Z0-9]+)">&lt;\?php(&nbsp;| )/i', '<span style="color: #$1">', $str);
helpers/text_helper.php:		$str = preg_replace('/(<span style="color: #[A-Z0-9]+">.*?)\?&gt;<\/span>\n<\/span>\n<\/code>/is', "$1</span>\n</span>\n</code>", $str);
helpers/text_helper.php:		$str = preg_replace('/<span style="color: #[A-Z0-9]+"\><\/span>/i', '', $str);
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:// ------------------------------------------------------------------------
helpers/text_helper.php:				// If the over-length word is a URL we won't wrap it
helpers/text_helper.php:				$temp .= substr($line, 0, $charlim-1);
helpers/text_helper.php:				$line = substr($line, $charlim-1);
helpers/text_helper.php:			// If $temp contains data it means we had to split up an over-length 
helpers/directory_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/directory_helper.php:// ------------------------------------------------------------------------
helpers/directory_helper.php:// ------------------------------------------------------------------------
helpers/directory_helper.php: * representation of it.  Sub-folders contained with the
helpers/compatibility_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/compatibility_helper.php:// ------------------------------------------------------------------------
helpers/compatibility_helper.php: * so that the behavior fully mimicks the PHP 5 counterparts.  -- Derek Jones
helpers/compatibility_helper.php:// ------------------------------------------------------------------------
helpers/compatibility_helper.php:// ------------------------------------------------------------------------
helpers/compatibility_helper.php:// ------------------------------------------------------------------------
helpers/compatibility_helper.php:		$length = @fwrite($handle, substr($out, 0, -1)."\n");
helpers/compatibility_helper.php:// ------------------------------------------------------------------------
helpers/compatibility_helper.php: * Find position of first occurrence of a case-insensitive string
helpers/compatibility_helper.php:// ------------------------------------------------------------------------
helpers/compatibility_helper.php: * Find position of first occurrence of a case-insensitive string
helpers/compatibility_helper.php: * http://us.php.net/manual/en/function.str-ireplace.php
helpers/compatibility_helper.php:// ------------------------------------------------------------------------
helpers/compatibility_helper.php: * Generate URL-encoded query string
helpers/compatibility_helper.php: * http://us.php.net/manual/en/function.http-build-query.php
helpers/compatibility_helper.php: * @return	string		URL-encoded string
helpers/path_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/path_helper.php:// ------------------------------------------------------------------------
helpers/path_helper.php:// ------------------------------------------------------------------------
helpers/path_helper.php:		if (preg_match("#^(http:\/\/|https:\/\/|www\.|ftp|[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})#i", $path))
helpers/download_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/download_helper.php:// ------------------------------------------------------------------------
helpers/download_helper.php:// ------------------------------------------------------------------------
helpers/download_helper.php:			$mime = 'application/octet-stream';
helpers/download_helper.php:			header('Content-Type: "'.$mime.'"');
helpers/download_helper.php:			header('Content-Disposition: attachment; filename="'.$filename.'"');
helpers/download_helper.php:			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
helpers/download_helper.php:			header("Content-Transfer-Encoding: binary");
helpers/download_helper.php:			header("Content-Length: ".strlen($data));
helpers/download_helper.php:			header('Content-Type: "'.$mime.'"');
helpers/download_helper.php:			header('Content-Disposition: attachment; filename="'.$filename.'"');
helpers/download_helper.php:			header("Content-Transfer-Encoding: binary");
helpers/download_helper.php:			header('Pragma: no-cache');
helpers/download_helper.php:			header("Content-Length: ".strlen($data));
helpers/html_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php: * Generates an HTML unordered list from an single or multi-dimensional array.
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php: * Generates an HTML ordered list from an single or multi-dimensional array.
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php: * Generates an HTML ordered list from an single or multi-dimensional array.
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php:					$img .= ' src="'.$CI->config->site_url($v).'" ';
helpers/html_helper.php:					$img .= ' src="'.$CI->config->slash_item('base_url').$v.'" ';
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php: * Valid options are xhtml-11, xhtml-strict, xhtml-trans, xhtml-frame,
helpers/html_helper.php: * html4-strict, html4-trans, and html4-frame.  Values are saved in the
helpers/html_helper.php:	function doctype($type = 'xhtml1-strict')
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php:						$link .= ' href="'.$CI->config->site_url($v).'" ';
helpers/html_helper.php:						$link .= ' href="'.$CI->config->slash_item('base_url').$v.'" ';
helpers/html_helper.php:				$link .= ' href="'.$CI->config->site_url($href).'" ';
helpers/html_helper.php:				$link .= ' href="'.$CI->config->slash_item('base_url').$href.'" ';
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php:			$type 		= ( ! isset($meta['type']) OR $meta['type'] == 'name') ? 'name' : 'http-equiv';
helpers/html_helper.php:// ------------------------------------------------------------------------
helpers/html_helper.php: * Generates non-breaking space entities based on number supplied
helpers/form_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:		$action = ( strpos($action, '://') === FALSE) ? $CI->config->site_url($action) : $action;
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php: * Form Declaration - Multipart type
helpers/form_helper.php: * Creates the opening portion of the form, but with "multipart/form-data".
helpers/form_helper.php:		$attributes['enctype'] = 'multipart/form-data';
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php: * Multi-select menu
helpers/form_helper.php:// --------------------------------------------------------------------
helpers/form_helper.php: * Drop-down Menu
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php: * re-populate an input field or textarea.  If Form Validation
helpers/form_helper.php:		return form_prep($OBJ->set_value($field, $default), $field);
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:		return $OBJ->set_select($field, $value, $default);
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:		return $OBJ->set_checkbox($field, $value, $default);
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:		return $OBJ->set_radio($field, $value, $default);
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:		return $OBJ->error($field, $prefix, $suffix);
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:		return $OBJ->error_string($prefix, $suffix);
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:// ------------------------------------------------------------------------
helpers/form_helper.php:		if ( ! isset($CI->load->_ci_classes) OR  ! isset($CI->load->_ci_classes['form_validation']))
helpers/form_helper.php:		$object = $CI->load->_ci_classes['form_validation'];
helpers/form_helper.php:		if ( ! isset($CI->$object) OR ! is_object($CI->$object))
helpers/form_helper.php:		return $CI->$object;
helpers/email_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/email_helper.php:// ------------------------------------------------------------------------
helpers/email_helper.php:// ------------------------------------------------------------------------
helpers/email_helper.php:		return ( ! preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $address)) ? FALSE : TRUE;
helpers/email_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:		if (strtolower($CI->config->item('time_reference')) == 'gmt')
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:		$datestr = str_replace('%\\', '', preg_replace("/([a-z]+?){1}/i", "\\\\\\1", $datestr));
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:						'DATE_ATOM'		=>	'%Y-%m-%dT%H:%i:%s%Q',
helpers/date_helper.php:						'DATE_COOKIE'	=>	'%l, %d-%M-%y %H:%i:%s UTC',
helpers/date_helper.php:						'DATE_ISO8601'	=>	'%Y-%m-%dT%H:%i:%s%O',
helpers/date_helper.php:						'DATE_RFC850'	=>	'%l, %d-%M-%y %H:%m:%i UTC',
helpers/date_helper.php:						'DATE_W3C'		=>	'%Y-%m-%dT%H:%i:%s%Q'
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:		$CI->lang->load('date');
helpers/date_helper.php:			$seconds = $time - $seconds;
helpers/date_helper.php:			$str .= $years.' '.$CI->lang->line((($years	> 1) ? 'date_years' : 'date_year')).', ';
helpers/date_helper.php:		$seconds -= $years * 31536000;
helpers/date_helper.php:				$str .= $months.' '.$CI->lang->line((($months	> 1) ? 'date_months' : 'date_month')).', ';
helpers/date_helper.php:			$seconds -= $months * 2628000;
helpers/date_helper.php:				$str .= $weeks.' '.$CI->lang->line((($weeks	> 1) ? 'date_weeks' : 'date_week')).', ';
helpers/date_helper.php:			$seconds -= $weeks * 604800;
helpers/date_helper.php:				$str .= $days.' '.$CI->lang->line((($days	> 1) ? 'date_days' : 'date_day')).', ';
helpers/date_helper.php:			$seconds -= $days * 86400;
helpers/date_helper.php:				$str .= $hours.' '.$CI->lang->line((($hours	> 1) ? 'date_hours' : 'date_hour')).', ';
helpers/date_helper.php:			$seconds -= $hours * 3600;
helpers/date_helper.php:				$str .= $minutes.' '.$CI->lang->line((($minutes	> 1) ? 'date_minutes' : 'date_minute')).', ';
helpers/date_helper.php:			$seconds -= $minutes * 60;
helpers/date_helper.php:			$str .= $seconds.' '.$CI->lang->line((($seconds	> 1) ? 'date_seconds' : 'date_second')).', ';
helpers/date_helper.php:		return substr(trim($str), 0, -1);
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:		return $days_in_month[$month - 1];
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:		// YYYY-MM-DD HH:MM:SS
helpers/date_helper.php:		$time = str_replace('-', '', $time);
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php: * Formats Unix timestamp to the following prototype: 2006-08-21 11:35 PM
helpers/date_helper.php:		$r  = date('Y', $time).'-'.date('m', $time).'-'.date('d', $time).' ';
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:		if ( ! preg_match('/^[0-9]{2,4}\-[0-9]{1,2}\-[0-9]{1,2}\s[0-9]{1,2}:[0-9]{1,2}(?::[0-9]{1,2})?(?:\s[AP]M)?$/i', $datestr))
helpers/date_helper.php:		$ex = explode("-", $split['0']);
helpers/date_helper.php:		if (isset($ex['2']) && preg_match('/[0-9]{1,2}/', $ex['2']))
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php: * Generates a drop-down menu of timezones.
helpers/date_helper.php:		$CI->lang->load('date');
helpers/date_helper.php:			$menu .= "<option value='{$key}'{$selected}>".$CI->lang->line($key)."</option>\n";
helpers/date_helper.php:// ------------------------------------------------------------------------
helpers/date_helper.php:						'UM12'		=> -12,
helpers/date_helper.php:						'UM11'		=> -11,
helpers/date_helper.php:						'UM10'		=> -10,
helpers/date_helper.php:						'UM95'		=> -9.5,
helpers/date_helper.php:						'UM9'		=> -9,
helpers/date_helper.php:						'UM8'		=> -8,
helpers/date_helper.php:						'UM7'		=> -7,
helpers/date_helper.php:						'UM6'		=> -6,
helpers/date_helper.php:						'UM5'		=> -5,
helpers/date_helper.php:						'UM45'		=> -4.5,
helpers/date_helper.php:						'UM4'		=> -4,
helpers/date_helper.php:						'UM35'		=> -3.5,
helpers/date_helper.php:						'UM3'		=> -3,
helpers/date_helper.php:						'UM2'		=> -2,
helpers/date_helper.php:						'UM1'		=> -1,
helpers/file_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/file_helper.php:// ------------------------------------------------------------------------
helpers/file_helper.php:// ------------------------------------------------------------------------
helpers/file_helper.php:// ------------------------------------------------------------------------
helpers/file_helper.php: * Creates a new file if non-existent.
helpers/file_helper.php:// ------------------------------------------------------------------------
helpers/file_helper.php:// ------------------------------------------------------------------------
helpers/file_helper.php: * Any sub-folders contained within the specified path are read as well.
helpers/file_helper.php: * @param	bool	internal variable to determine recursion status - do not use in calls
helpers/file_helper.php:// --------------------------------------------------------------------
helpers/file_helper.php: * Any sub-folders contained within the specified path are read as well.
helpers/file_helper.php: * @param	bool	internal variable to determine recursion status - do not use in calls
helpers/file_helper.php:// --------------------------------------------------------------------
helpers/file_helper.php:					// There are known problems using is_weritable on IIS.  It may not be reliable - consider fileperms()
helpers/file_helper.php:// --------------------------------------------------------------------
helpers/file_helper.php:// --------------------------------------------------------------------
helpers/file_helper.php:			$symbolic = '-'; // Regular
helpers/file_helper.php:		$symbolic .= (($perms & 0x0100) ? 'r' : '-');
helpers/file_helper.php:		$symbolic .= (($perms & 0x0080) ? 'w' : '-');
helpers/file_helper.php:		$symbolic .= (($perms & 0x0040) ? (($perms & 0x0800) ? 's' : 'x' ) : (($perms & 0x0800) ? 'S' : '-'));
helpers/file_helper.php:		$symbolic .= (($perms & 0x0020) ? 'r' : '-');
helpers/file_helper.php:		$symbolic .= (($perms & 0x0010) ? 'w' : '-');
helpers/file_helper.php:		$symbolic .= (($perms & 0x0008) ? (($perms & 0x0400) ? 's' : 'x' ) : (($perms & 0x0400) ? 'S' : '-'));
helpers/file_helper.php:		$symbolic .= (($perms & 0x0004) ? 'r' : '-');
helpers/file_helper.php:		$symbolic .= (($perms & 0x0002) ? 'w' : '-');
helpers/file_helper.php:		$symbolic .= (($perms & 0x0001) ? (($perms & 0x0200) ? 't' : 'x' ) : (($perms & 0x0200) ? 'T' : '-'));
helpers/file_helper.php:// --------------------------------------------------------------------
helpers/file_helper.php:		return substr(sprintf('%o', $perms), -3);
helpers/number_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/number_helper.php:// ------------------------------------------------------------------------
helpers/number_helper.php:// ------------------------------------------------------------------------
helpers/number_helper.php:		$CI->lang->load('number');
helpers/number_helper.php:			$unit = $CI->lang->line('terabyte_abbr');
helpers/number_helper.php:			$unit = $CI->lang->line('gigabyte_abbr');
helpers/number_helper.php:			$unit = $CI->lang->line('megabyte_abbr');
helpers/number_helper.php:			$unit = $CI->lang->line('kilobyte_abbr');
helpers/number_helper.php:			$unit = $CI->lang->line('bytes');
helpers/security_helper.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
helpers/security_helper.php:// ------------------------------------------------------------------------
helpers/security_helper.php:// ------------------------------------------------------------------------
helpers/security_helper.php:		return $CI->input->xss_clean($str, $is_image);
helpers/security_helper.php:// --------------------------------------------------------------------
helpers/security_helper.php:					return $SH->generate($str);
helpers/security_helper.php:// ------------------------------------------------------------------------
helpers/security_helper.php:// ------------------------------------------------------------------------
language/english/form_validation_lang.php:$lang['alpha_numeric']		= "The %s field may only contain alpha-numeric characters.";
language/english/form_validation_lang.php:$lang['alpha_dash']			= "The %s field may only contain alpha-numeric characters, underscores, and dashes.";
language/english/validation_lang.php:$lang['alpha_numeric']		= "The %s field may only contain alpha-numeric characters.";
language/english/validation_lang.php:$lang['alpha_dash']			= "The %s field may only contain alpha-numeric characters, underscores, and dashes.";
language/english/date_lang.php:$lang['UM12']	= '(UTC -12:00) Baker/Howland Island';
language/english/date_lang.php:$lang['UM11']	= '(UTC -11:00) Samoa Time Zone, Niue';
language/english/date_lang.php:$lang['UM10']	= '(UTC -10:00) Hawaii-Aleutian Standard Time, Cook Islands, Tahiti';
language/english/date_lang.php:$lang['UM95']	= '(UTC -9:30) Marquesas Islands';
language/english/date_lang.php:$lang['UM9']	= '(UTC -9:00) Alaska Standard Time, Gambier Islands';
language/english/date_lang.php:$lang['UM8']	= '(UTC -8:00) Pacific Standard Time, Clipperton Island';
language/english/date_lang.php:$lang['UM7']	= '(UTC -7:00) Mountain Standard Time';
language/english/date_lang.php:$lang['UM6']	= '(UTC -6:00) Central Standard Time';
language/english/date_lang.php:$lang['UM5']	= '(UTC -5:00) Eastern Standard Time, Western Caribbean Standard Time';
language/english/date_lang.php:$lang['UM45']	= '(UTC -4:30) Venezuelan Standard Time';
language/english/date_lang.php:$lang['UM4']	= '(UTC -4:00) Atlantic Standard Time, Eastern Caribbean Standard Time';
language/english/date_lang.php:$lang['UM35']	= '(UTC -3:30) Newfoundland Standard Time';
language/english/date_lang.php:$lang['UM3']	= '(UTC -3:00) Argentina, Brazil, French Guiana, Uruguay';
language/english/date_lang.php:$lang['UM2']	= '(UTC -2:00) South Georgia/South Sandwich Islands';
language/english/date_lang.php:$lang['UM1']	= '(UTC -1:00) Azores, Cape Verde Islands';
libraries/Controller.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Controller.php:// ------------------------------------------------------------------------
libraries/Controller.php:		$this->_ci_initialize();
libraries/Controller.php:	// --------------------------------------------------------------------
libraries/Controller.php:			$this->$var =& load_class($class);
libraries/Controller.php:			$this->load =& load_class('Loader');
libraries/Controller.php:			$this->load->_ci_autoloader();
libraries/Controller.php:			$this->_ci_autoloader();
libraries/Controller.php:				if (is_object($this->$attribute))
libraries/Controller.php:					$this->load->$attribute =& $this->$attribute;
libraries/Controller.php:	// --------------------------------------------------------------------
libraries/Controller.php:		if ($this->_ci_scaffolding === FALSE OR $this->_ci_scaff_table === FALSE)
libraries/Controller.php:		$method = ( ! in_array($this->uri->segment(3), array('add', 'insert', 'edit', 'update', 'view', 'delete', 'do_delete'), TRUE)) ? 'view' : $this->uri->segment(3);
libraries/Controller.php:		$scaff = new Scaffolding($this->_ci_scaff_table);
libraries/Controller.php:		$scaff->$method();
libraries/Zip.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Zip.php:// ------------------------------------------------------------------------
libraries/Zip.php: * refactored it and added several additional methods -- Rick Ellis
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:			$this->_add_dir($dir);
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:		$this->zipdata .=
libraries/Zip.php:		$this->directory .=
libraries/Zip.php:			.pack('V', 16) // external file attributes - 'directory' bit set
libraries/Zip.php:			.pack('V', $this->offset) // relative offset of local header
libraries/Zip.php:		$this->offset = strlen($this->zipdata);
libraries/Zip.php:		$this->entries++;
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:				$this->_add_data($path, $data);
libraries/Zip.php:			$this->_add_data($filepath, $data);
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:		$gzdata = substr($gzdata, 2, -4);
libraries/Zip.php:		$this->zipdata .=
libraries/Zip.php:		$this->directory .=
libraries/Zip.php:			.pack('V', 32) // external file attributes - 'archive' bit set
libraries/Zip.php:			.pack('V', $this->offset) // relative offset of local header
libraries/Zip.php:		$this->offset = strlen($this->zipdata);
libraries/Zip.php:		$this->entries++;
libraries/Zip.php:		$this->file_num++;
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:			$this->add_data($name, $data);
libraries/Zip.php:	// ------------------------------------------------------------------------
libraries/Zip.php:	 * sub-folders) and creates a zip based on it.  Whatever directory structure
libraries/Zip.php:					$this->read_dir($path.$file."/");
libraries/Zip.php:						$this->add_data(str_replace("\\", "/", $path).$file, $data);
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:		if ($this->entries == 0)
libraries/Zip.php:		$zip_data = $this->zipdata;
libraries/Zip.php:		$zip_data .= $this->directory."\x50\x4b\x05\x06\x00\x00\x00\x00";
libraries/Zip.php:		$zip_data .= pack('v', $this->entries); // total # of entries "on this disk"
libraries/Zip.php:		$zip_data .= pack('v', $this->entries); // total # of entries overall
libraries/Zip.php:		$zip_data .= pack('V', strlen($this->directory)); // size of central dir
libraries/Zip.php:		$zip_data .= pack('V', strlen($this->zipdata)); // offset to start of central dir
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:		fwrite($fp, $this->get_zip());
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:		$zip_content =& $this->get_zip();
libraries/Zip.php:		$CI->load->helper('download');
libraries/Zip.php:	// --------------------------------------------------------------------
libraries/Zip.php:		$this->zipdata		= '';
libraries/Zip.php:		$this->directory	= '';
libraries/Zip.php:		$this->entries		= 0;
libraries/Zip.php:		$this->file_num		= 0;
libraries/Zip.php:		$this->offset		= 0;
libraries/Profiler.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Profiler.php:// ------------------------------------------------------------------------
libraries/Profiler.php: 		$this->CI =& get_instance();
libraries/Profiler.php: 		$this->CI->load->language('profiler');
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php: 		foreach ($this->CI->benchmark->marker as $key => $val)
libraries/Profiler.php: 				if (isset($this->CI->benchmark->marker[$match[1].'_end']) AND isset($this->CI->benchmark->marker[$match[1].'_start']))
libraries/Profiler.php: 					$profile[$match[1]] = $this->CI->benchmark->elapsed_time($match[1].'_start', $key);
libraries/Profiler.php:		$output .= '<fieldset style="border:1px solid #990000;padding:6px 10px 10px 10px;margin:0 0 20px 0;background-color:#eee">';
libraries/Profiler.php:		$output .= '<legend style="color:#990000;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_benchmarks').'&nbsp;&nbsp;</legend>';
libraries/Profiler.php:			$key = ucwords(str_replace(array('_', '-'), ' ', $key));
libraries/Profiler.php:			$output .= "<tr><td width='50%' style='color:#000;font-weight:bold;background-color:#ddd;'>".$key."&nbsp;&nbsp;</td><td width='50%' style='color:#990000;font-weight:normal;background-color:#ddd;'>".$val."</td></tr>\n";
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php:		foreach (get_object_vars($this->CI) as $CI_object)
libraries/Profiler.php:			$output .= '<fieldset style="border:1px solid #0000FF;padding:6px 10px 10px 10px;margin:20px 0 20px 0;background-color:#eee">';
libraries/Profiler.php:			$output .= '<legend style="color:#0000FF;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_queries').'&nbsp;&nbsp;</legend>';
libraries/Profiler.php:			$output .="<tr><td width='100%' style='color:#0000FF;font-weight:normal;background-color:#eee;'>".$this->CI->lang->line('profiler_no_db')."</td></tr>\n";
libraries/Profiler.php:		$this->CI->load->helper('text');
libraries/Profiler.php:			$output .= '<fieldset style="border:1px solid #0000FF;padding:6px 10px 10px 10px;margin:20px 0 20px 0;background-color:#eee">';
libraries/Profiler.php:			$output .= '<legend style="color:#0000FF;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_database').':&nbsp; '.$db->database.'&nbsp;&nbsp;&nbsp;'.$this->CI->lang->line('profiler_queries').': '.count($this->CI->db->queries).'&nbsp;&nbsp;&nbsp;</legend>';
libraries/Profiler.php:			if (count($db->queries) == 0)
libraries/Profiler.php:				$output .= "<tr><td width='100%' style='color:#0000FF;font-weight:normal;background-color:#eee;'>".$this->CI->lang->line('profiler_no_queries')."</td></tr>\n";
libraries/Profiler.php:				foreach ($db->queries as $key => $val)
libraries/Profiler.php:					$time = number_format($db->query_times[$key], 4);
libraries/Profiler.php:					$output .= "<tr><td width='1%' valign='top' style='color:#990000;font-weight:normal;background-color:#ddd;'>".$time."&nbsp;&nbsp;</td><td style='color:#000;font-weight:normal;background-color:#ddd;'>".$val."</td></tr>\n";
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php:		$output .= '<fieldset style="border:1px solid #cd6e00;padding:6px 10px 10px 10px;margin:20px 0 20px 0;background-color:#eee">';
libraries/Profiler.php:		$output .= '<legend style="color:#cd6e00;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_get_data').'&nbsp;&nbsp;</legend>';
libraries/Profiler.php:			$output .= "<div style='color:#cd6e00;font-weight:normal;padding:4px 0 4px 0'>".$this->CI->lang->line('profiler_no_get')."</div>";
libraries/Profiler.php:				$output .= "<tr><td width='50%' style='color:#000;background-color:#ddd;'>&#36;_GET[".$key."]&nbsp;&nbsp; </td><td width='50%' style='color:#cd6e00;font-weight:normal;background-color:#ddd;'>";
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php:		$output .= '<fieldset style="border:1px solid #009900;padding:6px 10px 10px 10px;margin:20px 0 20px 0;background-color:#eee">';
libraries/Profiler.php:		$output .= '<legend style="color:#009900;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_post_data').'&nbsp;&nbsp;</legend>';
libraries/Profiler.php:			$output .= "<div style='color:#009900;font-weight:normal;padding:4px 0 4px 0'>".$this->CI->lang->line('profiler_no_post')."</div>";
libraries/Profiler.php:				$output .= "<tr><td width='50%' style='color:#000;background-color:#ddd;'>&#36;_POST[".$key."]&nbsp;&nbsp; </td><td width='50%' style='color:#009900;font-weight:normal;background-color:#ddd;'>";
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php:		$output .= '<fieldset style="border:1px solid #000;padding:6px 10px 10px 10px;margin:20px 0 20px 0;background-color:#eee">';
libraries/Profiler.php:		$output .= '<legend style="color:#000;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_uri_string').'&nbsp;&nbsp;</legend>';
libraries/Profiler.php:		if ($this->CI->uri->uri_string == '')
libraries/Profiler.php:			$output .= "<div style='color:#000;font-weight:normal;padding:4px 0 4px 0'>".$this->CI->lang->line('profiler_no_uri')."</div>";
libraries/Profiler.php:			$output .= "<div style='color:#000;font-weight:normal;padding:4px 0 4px 0'>".$this->CI->uri->uri_string."</div>";				
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php:		$output .= '<fieldset style="border:1px solid #995300;padding:6px 10px 10px 10px;margin:20px 0 20px 0;background-color:#eee">';
libraries/Profiler.php:		$output .= '<legend style="color:#995300;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_controller_info').'&nbsp;&nbsp;</legend>';
libraries/Profiler.php:		$output .= "<div style='color:#995300;font-weight:normal;padding:4px 0 4px 0'>".$this->CI->router->fetch_class()."/".$this->CI->router->fetch_method()."</div>";				
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php:		$output .= '<fieldset style="border:1px solid #5a0099;padding:6px 10px 10px 10px;margin:20px 0 20px 0;background-color:#eee">';
libraries/Profiler.php:		$output .= '<legend style="color:#5a0099;">&nbsp;&nbsp;'.$this->CI->lang->line('profiler_memory_usage').'&nbsp;&nbsp;</legend>';
libraries/Profiler.php:			$output .= "<div style='color:#5a0099;font-weight:normal;padding:4px 0 4px 0'>".number_format($usage).' bytes</div>';
libraries/Profiler.php:			$output .= "<div style='color:#5a0099;font-weight:normal;padding:4px 0 4px 0'>".$this->CI->lang->line('profiler_no_memory_usage')."</div>";				
libraries/Profiler.php:	// --------------------------------------------------------------------
libraries/Profiler.php:		$output = "<div id='codeigniter_profiler' style='clear:both;background-color:#fff;padding:10px;'>";
libraries/Profiler.php:		$output .= $this->_compile_uri_string();
libraries/Profiler.php:		$output .= $this->_compile_controller_info();
libraries/Profiler.php:		$output .= $this->_compile_memory_usage();
libraries/Profiler.php:		$output .= $this->_compile_benchmarks();
libraries/Profiler.php:		$output .= $this->_compile_get();
libraries/Profiler.php:		$output .= $this->_compile_post();
libraries/Profiler.php:		$output .= $this->_compile_queries();
libraries/Output.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Output.php:// ------------------------------------------------------------------------
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		return $this->final_output;
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		$this->final_output = $output;
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		if ($this->final_output == '')
libraries/Output.php:			$this->final_output = $output;
libraries/Output.php:			$this->final_output .= $output;
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		$this->headers[] = array($header, $replace);
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		$this->enable_profiler = (is_bool($val)) ? $val : TRUE;
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		$this->cache_expiration = ( ! is_numeric($time)) ? 0 : $time;
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:	 * $this->final_output
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:			$output =& $this->final_output;
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:		if ($this->cache_expiration > 0)
libraries/Output.php:			$this->_write_cache($output);
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:		// then swap the pseudo-variables with the data
libraries/Output.php:		$elapsed = $BM->elapsed_time('total_execution_time_start', 'total_execution_time_end');		
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:		if ($CFG->item('compress_output') === TRUE)
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:		if (count($this->headers) > 0)
libraries/Output.php:			foreach ($this->headers as $header)
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:		if ($this->enable_profiler == TRUE)
libraries/Output.php:			$CI->load->library('profiler');				
libraries/Output.php:				$output .= $CI->profiler->run();
libraries/Output.php:				$output .= $CI->profiler->run();
libraries/Output.php:		// --------------------------------------------------------------------
libraries/Output.php:			$CI->_output($output);
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		$path = $CI->config->item('cache_path');
libraries/Output.php:		$uri =	$CI->config->item('base_url').
libraries/Output.php:				$CI->config->item('index_page').
libraries/Output.php:				$CI->uri->uri_string();
libraries/Output.php:		$expire = time() + ($this->cache_expiration * 60);
libraries/Output.php:			fwrite($fp, $expire.'TS--->'.$output);
libraries/Output.php:	// --------------------------------------------------------------------
libraries/Output.php:		$cache_path = ($CFG->item('cache_path') == '') ? BASEPATH.'cache/' : $CFG->item('cache_path');
libraries/Output.php:		$uri =	$CFG->item('base_url').
libraries/Output.php:				$CFG->item('index_page').
libraries/Output.php:				$URI->uri_string;
libraries/Output.php:		if ( ! preg_match("/(\d+TS--->)/", $cache, $match))
libraries/Output.php:		if (time() >= trim(str_replace('TS--->', '', $match['1'])))
libraries/Output.php:		$this->_display(str_replace($match['0'], '', $cache));
libraries/Cart.php: * @copyright	Copyright (c) 2006 - 2009, EllisLab, Inc.
libraries/Cart.php:// ------------------------------------------------------------------------
libraries/Cart.php:	var $product_id_rules	= '\.a-z0-9_-'; // alpha-numeric, dashes, underscores, or periods
libraries/Cart.php:	var $product_name_rules	= '\.\:\-_ a-z0-9'; // alpha-numeric, dashes, underscores, colons or periods
libraries/Cart.php:		$this->CI =& get_instance();
libraries/Cart.php:		$this->CI->load->library('session', $config);
libraries/Cart.php:		if ($this->CI->session->userdata('cart_contents') !== FALSE)
libraries/Cart.php:			$this->_cart_contents = $this->CI->session->userdata('cart_contents');
libraries/Cart.php:			$this->_cart_contents['cart_total'] = 0;		
libraries/Cart.php:			$this->_cart_contents['total_items'] = 0;		
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		// You can either insert a single product using a one-dimensional array, 
libraries/Cart.php:		// or multiple products using a multi-dimensional one. The way we
libraries/Cart.php:		// at the top level. If it's not found, we will assume it's a multi-dimensional array.
libraries/Cart.php:			if ($this->_insert($items) == TRUE)
libraries/Cart.php:					if ($this->_insert($val) == TRUE)
libraries/Cart.php:			$this->_save_cart();
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		// --------------------------------------------------------------------
libraries/Cart.php:		// --------------------------------------------------------------------
libraries/Cart.php:		$items['qty'] = trim(preg_replace('/([^0-9])/i', '', $items['qty']));
libraries/Cart.php:		// --------------------------------------------------------------------
libraries/Cart.php:		// Validate the product ID. It can only be alpha-numeric, dashes, underscores or periods
libraries/Cart.php:		// Note: These can be user-specified by setting the $this->product_id_rules variable.
libraries/Cart.php:		if ( ! preg_match("/^[".$this->product_id_rules."]+$/i", $items['id']))
libraries/Cart.php:			log_message('error', 'Invalid product ID.  The product ID can only contain alpha-numeric characters, dashes, and underscores');
libraries/Cart.php:		// --------------------------------------------------------------------
libraries/Cart.php:		// Validate the product name. It can only be alpha-numeric, dashes, underscores, colons or periods.
libraries/Cart.php:		// Note: These can be user-specified by setting the $this->product_name_rules variable.
libraries/Cart.php:		if ( ! preg_match("/^[".$this->product_name_rules."]+$/i", $items['name']))
libraries/Cart.php:			log_message('error', 'An invalid name was submitted as the product name: '.$items['name'].' The name can only contain alpha-numeric characters, dashes, underscores, colons, and spaces');
libraries/Cart.php:		// --------------------------------------------------------------------
libraries/Cart.php:		$items['price'] = trim(preg_replace('/([^0-9\.])/i', '', $items['price']));
libraries/Cart.php:		// --------------------------------------------------------------------
libraries/Cart.php:		// For example, what if someone buys two identical t-shirts (same product ID), but in 
libraries/Cart.php:		// --------------------------------------------------------------------
libraries/Cart.php:		unset($this->_cart_contents[$rowid]);		
libraries/Cart.php:		$this->_cart_contents[$rowid]['rowid'] = $rowid;
libraries/Cart.php:			$this->_cart_contents[$rowid][$key] = $val;
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		// You can either update a single product using a one-dimensional array, 
libraries/Cart.php:		// or multiple products using a multi-dimensional one.  The way we
libraries/Cart.php:		// If it's not found we assume it's a multi-dimensional array
libraries/Cart.php:			if ($this->_update($items) == TRUE)
libraries/Cart.php:					if ($this->_update($val) == TRUE)
libraries/Cart.php:			$this->_save_cart();
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		if ( ! isset($items['qty']) OR ! isset($items['rowid']) OR ! isset($this->_cart_contents[$items['rowid']]))
libraries/Cart.php:		$items['qty'] = preg_replace('/([^0-9])/i', '', $items['qty']);
libraries/Cart.php:		if ($this->_cart_contents[$items['rowid']]['qty'] == $items['qty'])
libraries/Cart.php:			unset($this->_cart_contents[$items['rowid']]);		
libraries/Cart.php:			$this->_cart_contents[$items['rowid']]['qty'] = $items['qty'];
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		unset($this->_cart_contents['total_items']);
libraries/Cart.php:		unset($this->_cart_contents['cart_total']);
libraries/Cart.php:		// Lets add up the individual prices and set the cart sub-total
libraries/Cart.php:		foreach ($this->_cart_contents as $key => $val)
libraries/Cart.php:			$this->_cart_contents[$key]['subtotal'] = ($this->_cart_contents[$key]['price'] * $this->_cart_contents[$key]['qty']);
libraries/Cart.php:		$this->_cart_contents['total_items'] = count($this->_cart_contents);			
libraries/Cart.php:		$this->_cart_contents['cart_total'] = $total;
libraries/Cart.php:		if (count($this->_cart_contents) <= 2)
libraries/Cart.php:			$this->CI->session->unset_userdata('cart_contents');
libraries/Cart.php:		$this->CI->session->set_userdata(array('cart_contents' => $this->_cart_contents));
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		return $this->_cart_contents['cart_total'];
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		return $this->_cart_contents['total_items'];
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		$cart = $this->_cart_contents;
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		if ( ! isset($this->_cart_contents[$rowid]['options']) OR count($this->_cart_contents[$rowid]['options']) === 0)
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		if ( ! isset($this->_cart_contents[$rowid]['options']))
libraries/Cart.php:		return $this->_cart_contents[$rowid]['options'];
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		$n = trim(preg_replace('/([^0-9\.])/i', '', $n));
libraries/Cart.php:	// --------------------------------------------------------------------
libraries/Cart.php:		unset($this->_cart_contents);
libraries/Cart.php:		$this->_cart_contents['cart_total'] = 0;		
libraries/Cart.php:		$this->_cart_contents['total_items'] = 0;		
libraries/Cart.php:		$this->CI->session->unset_userdata('cart_contents');
libraries/Calendar.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Calendar.php:// ------------------------------------------------------------------------
libraries/Calendar.php:		$this->CI =& get_instance();
libraries/Calendar.php:		if ( ! in_array('calendar_lang'.EXT, $this->CI->lang->is_loaded, TRUE))
libraries/Calendar.php:			$this->CI->lang->load('calendar');
libraries/Calendar.php:		$this->local_time = time();
libraries/Calendar.php:			$this->initialize($config);
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:			if (isset($this->$key))
libraries/Calendar.php:				$this->$key = $val;
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:			$year  = date("Y", $this->local_time);
libraries/Calendar.php:			$month = date("m", $this->local_time);
libraries/Calendar.php:		$adjusted_date = $this->adjust_date($month, $year);
libraries/Calendar.php:		$total_days = $this->get_total_days($month, $year);
libraries/Calendar.php:		$start_day = ( ! isset($start_days[$this->start_day])) ? 0 : $start_days[$this->start_day];
libraries/Calendar.php:		$day  = $start_day + 1 - $date["wday"];
libraries/Calendar.php:			$day -= 7;
libraries/Calendar.php:		$cur_year	= date("Y", $this->local_time);
libraries/Calendar.php:		$cur_month	= date("m", $this->local_time);
libraries/Calendar.php:		$cur_day	= date("j", $this->local_time);
libraries/Calendar.php:		$this->parse_template();
libraries/Calendar.php:		$out = $this->temp['table_open'];
libraries/Calendar.php:		$out .= $this->temp['heading_row_start'];
libraries/Calendar.php:		if ($this->show_next_prev == TRUE)
libraries/Calendar.php:			$this->next_prev_url = preg_replace("/(.+?)\/*$/", "\\1/",  $this->next_prev_url);
libraries/Calendar.php:			$adjusted_date = $this->adjust_date($month - 1, $year);
libraries/Calendar.php:			$out .= str_replace('{previous_url}', $this->next_prev_url.$adjusted_date['year'].'/'.$adjusted_date['month'], $this->temp['heading_previous_cell']);
libraries/Calendar.php:		$colspan = ($this->show_next_prev == TRUE) ? 5 : 7;
libraries/Calendar.php:		$this->temp['heading_title_cell'] = str_replace('{colspan}', $colspan, $this->temp['heading_title_cell']);
libraries/Calendar.php:		$this->temp['heading_title_cell'] = str_replace('{heading}', $this->get_month_name($month)."&nbsp;".$year, $this->temp['heading_title_cell']);
libraries/Calendar.php:		$out .= $this->temp['heading_title_cell'];
libraries/Calendar.php:		if ($this->show_next_prev == TRUE)
libraries/Calendar.php:			$adjusted_date = $this->adjust_date($month + 1, $year);
libraries/Calendar.php:			$out .= str_replace('{next_url}', $this->next_prev_url.$adjusted_date['year'].'/'.$adjusted_date['month'], $this->temp['heading_next_cell']);
libraries/Calendar.php:		$out .= $this->temp['heading_row_end'];
libraries/Calendar.php:		$out .= $this->temp['week_row_start'];
libraries/Calendar.php:		$day_names = $this->get_day_names();
libraries/Calendar.php:			$out .= str_replace('{week_day}', $day_names[($start_day + $i) %7], $this->temp['week_day_cell']);
libraries/Calendar.php:		$out .= $this->temp['week_row_end'];
libraries/Calendar.php:			$out .= $this->temp['cal_row_start'];
libraries/Calendar.php:				$out .= ($is_current_month == TRUE AND $day == $cur_day) ? $this->temp['cal_cell_start_today'] : $this->temp['cal_cell_start'];
libraries/Calendar.php:						$temp = ($is_current_month == TRUE AND $day == $cur_day) ? $this->temp['cal_cell_content_today'] : $this->temp['cal_cell_content'];
libraries/Calendar.php:						$temp = ($is_current_month == TRUE AND $day == $cur_day) ? $this->temp['cal_cell_no_content_today'] : $this->temp['cal_cell_no_content'];
libraries/Calendar.php:					$out .= $this->temp['cal_cell_blank'];
libraries/Calendar.php:				$out .= ($is_current_month == TRUE AND $day == $cur_day) ? $this->temp['cal_cell_end_today'] : $this->temp['cal_cell_end'];					  	
libraries/Calendar.php:			$out .= $this->temp['cal_row_end'];
libraries/Calendar.php:		$out .= $this->temp['table_close'];
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:		if ($this->month_type == 'short')
libraries/Calendar.php:		if ($this->CI->lang->line($month) === FALSE)
libraries/Calendar.php:		return $this->CI->lang->line($month);
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:			$this->day_type = $day_type;
libraries/Calendar.php:		if ($this->day_type == 'long')
libraries/Calendar.php:		elseif ($this->day_type == 'short')
libraries/Calendar.php:			$days[] = ($this->CI->lang->line('cal_'.$val) === FALSE) ? ucfirst($val) : $this->CI->lang->line('cal_'.$val);
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:			$date['month'] -= 12;
libraries/Calendar.php:			$date['year']--;
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:		return $days_in_month[$month - 1];
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:	// --------------------------------------------------------------------
libraries/Calendar.php:	 * Harvests the data within the template {pseudo-variables}
libraries/Calendar.php:		$this->temp = $this->default_template();
libraries/Calendar.php: 		if ($this->template == '')
libraries/Calendar.php:			if (preg_match("/\{".$val."\}(.*?)\{\/".$val."\}/si", $this->template, $match))
libraries/Calendar.php:				$this->temp[$val] = $match['1'];
libraries/Calendar.php:					$this->temp[$val] = $this->temp[str_replace('_today', '', $val)];
libraries/Router.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Router.php:// ------------------------------------------------------------------------
libraries/Router.php:		$this->config =& load_class('Config');
libraries/Router.php:		$this->uri =& load_class('URI');
libraries/Router.php:		$this->_set_routing();
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		if ($this->config->item('enable_query_strings') === TRUE AND isset($_GET[$this->config->item('controller_trigger')]))
libraries/Router.php:			$this->set_class(trim($this->uri->_filter_uri($_GET[$this->config->item('controller_trigger')])));
libraries/Router.php:			if (isset($_GET[$this->config->item('function_trigger')]))
libraries/Router.php:				$this->set_method(trim($this->uri->_filter_uri($_GET[$this->config->item('function_trigger')])));
libraries/Router.php:		$this->routes = ( ! isset($route) OR ! is_array($route)) ? array() : $route;
libraries/Router.php:		$this->default_controller = ( ! isset($this->routes['default_controller']) OR $this->routes['default_controller'] == '') ? FALSE : strtolower($this->routes['default_controller']);	
libraries/Router.php:		$this->uri->_fetch_uri_string();
libraries/Router.php:		if ($this->uri->uri_string == '')
libraries/Router.php:			if ($this->default_controller === FALSE)
libraries/Router.php:			if (strpos($this->default_controller, '/') !== FALSE)
libraries/Router.php:				$x = explode('/', $this->default_controller);
libraries/Router.php:				$this->set_class(end($x));
libraries/Router.php:				$this->set_method('index');
libraries/Router.php:				$this->_set_request($x);
libraries/Router.php:				$this->set_class($this->default_controller);
libraries/Router.php:				$this->set_method('index');
libraries/Router.php:				$this->_set_request(array($this->default_controller, 'index'));
libraries/Router.php:			// re-index the routed segments array so it starts with 1 rather than 0
libraries/Router.php:			$this->uri->_reindex_segments();
libraries/Router.php:		unset($this->routes['default_controller']);
libraries/Router.php:		$this->uri->_remove_url_suffix();
libraries/Router.php:		$this->uri->_explode_segments();
libraries/Router.php:		$this->_parse_routes();		
libraries/Router.php:		// Re-index the segment array so that it starts with 1 rather than 0
libraries/Router.php:		$this->uri->_reindex_segments();
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		$segments = $this->_validate_request($segments);
libraries/Router.php:		$this->set_class($segments[0]);
libraries/Router.php:			if ($this->routes['scaffolding_trigger'] == $segments[1] AND $segments[1] != '_ci_scaffolding')
libraries/Router.php:				$this->scaffolding_request = TRUE;
libraries/Router.php:				unset($this->routes['scaffolding_trigger']);
libraries/Router.php:				$this->set_method($segments[1]);
libraries/Router.php:		// identical to $this->uri->segments
libraries/Router.php:		$this->uri->rsegments = $segments;
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		// Is the controller in a sub-folder?
libraries/Router.php:			$this->set_directory($segments[0]);
libraries/Router.php:				// Does the requested controller exist in the sub-folder?
libraries/Router.php:				if ( ! file_exists(APPPATH.'controllers/'.$this->fetch_directory().$segments[0].EXT))
libraries/Router.php:					show_404($this->fetch_directory().$segments[0]);
libraries/Router.php:				$this->set_class($this->default_controller);
libraries/Router.php:				$this->set_method('index');
libraries/Router.php:				// Does the default controller exist in the sub-folder?
libraries/Router.php:				if ( ! file_exists(APPPATH.'controllers/'.$this->fetch_directory().$this->default_controller.EXT))
libraries/Router.php:					$this->directory = '';
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		if (count($this->routes) == 1)
libraries/Router.php:			$this->_set_request($this->uri->segments);
libraries/Router.php:		$uri = implode('/', $this->uri->segments);
libraries/Router.php:		if (isset($this->routes[$uri]))
libraries/Router.php:			$this->_set_request(explode('/', $this->routes[$uri]));		
libraries/Router.php:		// Loop through the route array looking for wild-cards
libraries/Router.php:		foreach ($this->routes as $key => $val)
libraries/Router.php:			// Convert wild-cards to RegEx
libraries/Router.php:			$key = str_replace(':any', '.+', str_replace(':num', '[0-9]+', $key));
libraries/Router.php:				// Do we have a back-reference?
libraries/Router.php:				$this->_set_request(explode('/', $val));		
libraries/Router.php:		$this->_set_request($this->uri->segments);
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		$this->class = $class;
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		return $this->class;
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		$this->method = $method;
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		if ($this->method == $this->fetch_class())
libraries/Router.php:		return $this->method;
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:		$this->directory = $dir.'/';
libraries/Router.php:	// --------------------------------------------------------------------
libraries/Router.php:	 *  Fetch the sub-directory (if any) that contains the requested controller class
libraries/Router.php:		return $this->directory;
libraries/Parser.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Parser.php:// ------------------------------------------------------------------------
libraries/Parser.php:	 * Parses pseudo-variables contained in the specified template,
libraries/Parser.php:		$template = $CI->load->view($template, $data, TRUE);
libraries/Parser.php:				$template = $this->_parse_pair($key, $val, $template);		
libraries/Parser.php:				$template = $this->_parse_single($key, (string)$val, $template);
libraries/Parser.php:			$CI->output->append_output($template);
libraries/Parser.php:	// --------------------------------------------------------------------
libraries/Parser.php:		$this->l_delim = $l;
libraries/Parser.php:		$this->r_delim = $r;
libraries/Parser.php:	// --------------------------------------------------------------------
libraries/Parser.php:		return str_replace($this->l_delim.$key.$this->r_delim, $val, $string);
libraries/Parser.php:	// --------------------------------------------------------------------
libraries/Parser.php:		if (FALSE === ($match = $this->_match_pair($string, $variable)))
libraries/Parser.php:					$temp = $this->_parse_single($key, $val, $temp);
libraries/Parser.php:					$temp = $this->_parse_pair($key, $val, $temp);
libraries/Parser.php:	// --------------------------------------------------------------------
libraries/Parser.php:		if ( ! preg_match("|".$this->l_delim . $variable . $this->r_delim."(.+?)".$this->l_delim . '/' . $variable . $this->r_delim."|s", $string, $match))
libraries/Unit_test.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Unit_test.php:// ------------------------------------------------------------------------
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:		if ($this->active == FALSE)
libraries/Unit_test.php:			if ($this->strict == TRUE)
libraries/Unit_test.php:		$back = $this->_backtrace();
libraries/Unit_test.php:		$this->results[] = $report;		
libraries/Unit_test.php:		return($this->report($this->result($report)));
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:			$result = $this->result();
libraries/Unit_test.php:		$CI->load->language('unit_test');
libraries/Unit_test.php:		$this->_parse_template();
libraries/Unit_test.php:				if ($key == $CI->lang->line('ut_result'))
libraries/Unit_test.php:					if ($val == $CI->lang->line('ut_passed'))
libraries/Unit_test.php:					elseif ($val == $CI->lang->line('ut_failed'))
libraries/Unit_test.php:				$temp = $this->_template_rows;
libraries/Unit_test.php:			$r .= str_replace('{rows}', $table, $this->_template);
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:		$this->strict = ($state == FALSE) ? FALSE : TRUE;
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:		$this->active = ($state == FALSE) ? FALSE : TRUE;
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:		$CI->load->language('unit_test');
libraries/Unit_test.php:			$results = $this->results;
libraries/Unit_test.php:						if (FALSE !== ($line = $CI->lang->line(strtolower('ut_'.$v))))
libraries/Unit_test.php:						$temp[$CI->lang->line('ut_'.$k)] = $v;					
libraries/Unit_test.php:					if (FALSE !== ($line = $CI->lang->line(strtolower('ut_'.$val))))
libraries/Unit_test.php:					$temp[$CI->lang->line('ut_'.$key)] = $val;
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:		$this->_template = $template;
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:		$this->_template = "\n".'<table style="width:100%; font-size:small; margin:10px 0; border-collapse:collapse; border:1px solid #CCC;">';
libraries/Unit_test.php:		$this->_template .= '{rows}';
libraries/Unit_test.php:		$this->_template .= "\n".'</table>';
libraries/Unit_test.php:		$this->_template_rows = "\n\t".'<tr>';
libraries/Unit_test.php:		$this->_template_rows .= "\n\t\t".'<th style="text-align: left; border-bottom:1px solid #CCC;">{item}</th>';
libraries/Unit_test.php:		$this->_template_rows .= "\n\t\t".'<td style="border-bottom:1px solid #CCC;">{result}</td>';
libraries/Unit_test.php:		$this->_template_rows .= "\n\t".'</tr>';	
libraries/Unit_test.php:	// --------------------------------------------------------------------
libraries/Unit_test.php:	 * Harvests the data within the template {pseudo-variables}
libraries/Unit_test.php: 		if ( ! is_null($this->_template_rows))
libraries/Unit_test.php: 		if (is_null($this->_template))
libraries/Unit_test.php: 			$this->_default_template();
libraries/Unit_test.php:		if ( ! preg_match("/\{rows\}(.*?)\{\/rows\}/si", $this->_template, $match))
libraries/Unit_test.php: 			$this->_default_template();
libraries/Unit_test.php:		$this->_template_rows = $match['1'];
libraries/Unit_test.php:		$this->_template = str_replace($match['0'], '{rows}', $this->_template); 	
libraries/Xmlrpcs.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Xmlrpcs.php:// ------------------------------------------------------------------------
libraries/Xmlrpcs.php: * XML-RPC server class
libraries/Xmlrpcs.php: * @category	XML-RPC
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$this->set_system_methods();
libraries/Xmlrpcs.php:			$this->methods = array_merge($this->methods, $config['functions']);
libraries/Xmlrpcs.php:		log_message('debug', "XML-RPC Server Class Initialized");
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:			$this->methods = array_merge($this->methods, $config['functions']);
libraries/Xmlrpcs.php:			$this->debug = $config['debug'];
libraries/Xmlrpcs.php:			$this->object = $config['object'];
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$this->methods = array(
libraries/Xmlrpcs.php:													'signature' => array(array($this->xmlrpcArray, $this->xmlrpcString), array($this->xmlrpcArray)),
libraries/Xmlrpcs.php:													'signature' => array(array($this->xmlrpcString, $this->xmlrpcString)),
libraries/Xmlrpcs.php:													'signature' => array(array($this->xmlrpcArray, $this->xmlrpcString)),
libraries/Xmlrpcs.php:												'signature' => array(array($this->xmlrpcArray, $this->xmlrpcArray)),
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$r = $this->parseRequest();
libraries/Xmlrpcs.php:		$payload  = '<?xml version="1.0" encoding="'.$this->xmlrpc_defencoding.'"?'.'>'."\n";
libraries/Xmlrpcs.php:		$payload .= $this->debug_msg;
libraries/Xmlrpcs.php:		$payload .= $r->prepare_response();
libraries/Xmlrpcs.php:		header("Content-Type: text/xml");
libraries/Xmlrpcs.php:		header("Content-Length: ".strlen($payload));
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$this->methods[$methodname] = array(
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		$parser = xml_parser_create($this->xmlrpc_defencoding);
libraries/Xmlrpcs.php:		$parser_object->xh[$parser]					= array();
libraries/Xmlrpcs.php:		$parser_object->xh[$parser]['isf']			= 0;
libraries/Xmlrpcs.php:		$parser_object->xh[$parser]['isf_reason']	= '';
libraries/Xmlrpcs.php:		$parser_object->xh[$parser]['params']		= array();
libraries/Xmlrpcs.php:		$parser_object->xh[$parser]['stack']		= array();
libraries/Xmlrpcs.php:		$parser_object->xh[$parser]['valuestack']	= array();
libraries/Xmlrpcs.php:		$parser_object->xh[$parser]['method']		= '';
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------  	
libraries/Xmlrpcs.php:			$this->xmlrpcerrxml + xml_get_error_code($parser),
libraries/Xmlrpcs.php:		elseif($parser_object->xh[$parser]['isf'])
libraries/Xmlrpcs.php:			return new XML_RPC_Response(0, $this->xmlrpcerr['invalid_return'], $this->xmlrpcstr['invalid_return']);
libraries/Xmlrpcs.php:			$m = new XML_RPC_Message($parser_object->xh[$parser]['method']);
libraries/Xmlrpcs.php:			for($i=0; $i < count($parser_object->xh[$parser]['params']); $i++)
libraries/Xmlrpcs.php:				if ($this->debug === TRUE)
libraries/Xmlrpcs.php:					$plist .= "$i - " .  print_r(get_object_vars($parser_object->xh[$parser]['params'][$i]), TRUE). ";\n";
libraries/Xmlrpcs.php:				$m->addParam($parser_object->xh[$parser]['params'][$i]);
libraries/Xmlrpcs.php:			if ($this->debug === TRUE)
libraries/Xmlrpcs.php:				echo "---PLIST---\n" . $plist . "\n---PLIST END---\n\n";
libraries/Xmlrpcs.php:			$r = $this->_execute($m);
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------  	
libraries/Xmlrpcs.php:		if ($this->debug === TRUE)
libraries/Xmlrpcs.php:			$this->debug_msg = "<!-- DEBUG INFO:\n\n".$plist."\n END DEBUG-->\n";
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$methName = $m->method_name;
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		if ( ! isset($this->methods[$methName]['function']))
libraries/Xmlrpcs.php:			return new XML_RPC_Response(0, $this->xmlrpcerr['unknown_method'], $this->xmlrpcstr['unknown_method']);
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		$method_parts = explode(".", $this->methods[$methName]['function']);
libraries/Xmlrpcs.php:				return new XML_RPC_Response(0, $this->xmlrpcerr['unknown_method'], $this->xmlrpcstr['unknown_method']);
libraries/Xmlrpcs.php:				return new XML_RPC_Response(0, $this->xmlrpcerr['unknown_method'], $this->xmlrpcstr['unknown_method']);
libraries/Xmlrpcs.php:			elseif ( ! $objectCall && ! is_callable($this->methods[$methName]['function']))
libraries/Xmlrpcs.php:				return new XML_RPC_Response(0, $this->xmlrpcerr['unknown_method'], $this->xmlrpcstr['unknown_method']);
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		if (isset($this->methods[$methName]['signature']))
libraries/Xmlrpcs.php:			$sig = $this->methods[$methName]['signature'];
libraries/Xmlrpcs.php:				if (count($current_sig) == count($m->params)+1)
libraries/Xmlrpcs.php:					for($n=0; $n < count($m->params); $n++)
libraries/Xmlrpcs.php:						$p = $m->params[$n];
libraries/Xmlrpcs.php:						$pt = ($p->kindOf() == 'scalar') ? $p->scalarval() : $p->kindOf();
libraries/Xmlrpcs.php:								$this->xmlrpcerr['incorrect_params'],
libraries/Xmlrpcs.php:								$this->xmlrpcstr['incorrect_params'] .
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:		//-------------------------------------
libraries/Xmlrpcs.php:				if ($this->object === FALSE)
libraries/Xmlrpcs.php:					return $CI->$method_parts['1']($m);
libraries/Xmlrpcs.php:					return $this->object->$method_parts['1']($m);
libraries/Xmlrpcs.php:			return call_user_func($this->methods[$methName]['function'], $m);
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		foreach($this->methods as $key => $value)
libraries/Xmlrpcs.php:		foreach($this->system_methods as $key => $value)
libraries/Xmlrpcs.php:		$v->addArray($output);
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$parameters = $m->output_parameters();
libraries/Xmlrpcs.php:		if (isset($this->methods[$method_name]))
libraries/Xmlrpcs.php:			if ($this->methods[$method_name]['signature'])
libraries/Xmlrpcs.php:				$signature = $this->methods[$method_name]['signature'];
libraries/Xmlrpcs.php:			$r = new XML_RPC_Response(0,$this->xmlrpcerr['introspect_unknown'], $this->xmlrpcstr['introspect_unknown']);
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$parameters = $m->output_parameters();
libraries/Xmlrpcs.php:		if (isset($this->methods[$method_name]))
libraries/Xmlrpcs.php:			$docstring = isset($this->methods[$method_name]['docstring']) ? $this->methods[$method_name]['docstring'] : '';
libraries/Xmlrpcs.php:			return new XML_RPC_Response(0, $this->xmlrpcerr['introspect_unknown'], $this->xmlrpcstr['introspect_unknown']);
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//  Server Function:  Multi-call
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		return new XML_RPC_Response(0, $this->xmlrpcerr['unknown_method'], $this->xmlrpcstr['unknown_method']);
libraries/Xmlrpcs.php:		$parameters = $m->output_parameters();
libraries/Xmlrpcs.php:			//$attempt = $this->_execute(new XML_RPC_Message($value[0], $value[1]));
libraries/Xmlrpcs.php:				$m->addParam(new XML_RPC_Values($value[1][$i], 'string'));
libraries/Xmlrpcs.php:			$attempt = $this->_execute($m);
libraries/Xmlrpcs.php:			if ($attempt->faultCode() != 0)
libraries/Xmlrpcs.php:			$result[] = new XML_RPC_Values(array($attempt->value()), 'array');
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//  Multi-call Function:  Error Handling
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		$str  = is_string($err) ? $this->xmlrpcstr["multicall_${err}"] : $err->faultString();
libraries/Xmlrpcs.php:		$code = is_string($err) ? $this->xmlrpcerr["multicall_${err}"] : $err->faultCode();
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:	//  Multi-call Function:  Processes method
libraries/Xmlrpcs.php:	//-------------------------------------
libraries/Xmlrpcs.php:		if ($call->kindOf() != 'struct')
libraries/Xmlrpcs.php:			return $this->multicall_error('notstruct');
libraries/Xmlrpcs.php:		elseif ( ! $methName = $call->me['struct']['methodName'])
libraries/Xmlrpcs.php:			return $this->multicall_error('nomethod');
libraries/Xmlrpcs.php:		list($scalar_type,$scalar_value)=each($methName->me);
libraries/Xmlrpcs.php:		$scalar_type = $scalar_type == $this->xmlrpcI4 ? $this->xmlrpcInt : $scalar_type;
libraries/Xmlrpcs.php:		if ($methName->kindOf() != 'scalar' OR $scalar_type != 'string')
libraries/Xmlrpcs.php:			return $this->multicall_error('notstring');
libraries/Xmlrpcs.php:			return $this->multicall_error('recursion');
libraries/Xmlrpcs.php:		elseif ( ! $params = $call->me['struct']['params'])
libraries/Xmlrpcs.php:			return $this->multicall_error('noparams');
libraries/Xmlrpcs.php:		elseif ($params->kindOf() != 'array')
libraries/Xmlrpcs.php:			return $this->multicall_error('notarray');
libraries/Xmlrpcs.php:		list($a,$b)=each($params->me);
libraries/Xmlrpcs.php:			$msg->params[] = $params->me['array'][$i];
libraries/Xmlrpcs.php:		$result = $this->_execute($msg);
libraries/Xmlrpcs.php:		if ($result->faultCode() != 0)
libraries/Xmlrpcs.php:			return $this->multicall_error($result);
libraries/Xmlrpcs.php:		return new XML_RPC_Values(array($result->value()), 'array');
libraries/Email.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Email.php:// ------------------------------------------------------------------------
libraries/Email.php:	var	$wordwrap		= TRUE;		// TRUE/FALSE  Turns word-wrap on/off
libraries/Email.php:	var	$charset		= "utf-8";	// Default char set: iso-8859-1 or us-ascii
libraries/Email.php:	var	$priority		= "3";		// Default priority (1 - 5)
libraries/Email.php:	var $crlf			= "\n";		// The RFC 2045 compliant CRLF for quoted-printable is "\r\n".  Apparently some servers,
libraries/Email.php:	var $send_multipart	= TRUE;		// TRUE/FALSE - Yahoo does not like multipart alternative, so this is an override.  Set to FALSE for Yahoo.
libraries/Email.php:	var	$_base_charsets	= array('us-ascii', 'iso-2022-');	// 7-bit charsets (excluding language suffix)
libraries/Email.php:	 * Constructor - Sets Email Preferences
libraries/Email.php:			$this->initialize($config);
libraries/Email.php:			$this->_smtp_auth = ($this->smtp_user == '' AND $this->smtp_pass == '') ? FALSE : TRUE;
libraries/Email.php:			$this->_safe_mode = ((boolean)@ini_get("safe_mode") === FALSE) ? FALSE : TRUE;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->clear();
libraries/Email.php:			if (isset($this->$key))
libraries/Email.php:					$this->$method($val);
libraries/Email.php:					$this->$key = $val;
libraries/Email.php:		$this->_smtp_auth = ($this->smtp_user == '' AND $this->smtp_pass == '') ? FALSE : TRUE;
libraries/Email.php:		$this->_safe_mode = ((boolean)@ini_get("safe_mode") === FALSE) ? FALSE : TRUE;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_subject		= "";
libraries/Email.php:		$this->_body		= "";
libraries/Email.php:		$this->_finalbody	= "";
libraries/Email.php:		$this->_header_str	= "";
libraries/Email.php:		$this->_replyto_flag = FALSE;
libraries/Email.php:		$this->_recipients	= array();
libraries/Email.php:		$this->_headers		= array();
libraries/Email.php:		$this->_debug_msg	= array();
libraries/Email.php:		$this->_set_header('User-Agent', $this->useragent);
libraries/Email.php:		$this->_set_header('Date', $this->_set_date());
libraries/Email.php:			$this->_attach_name = array();
libraries/Email.php:			$this->_attach_type = array();
libraries/Email.php:			$this->_attach_disp = array();
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ($this->validate)
libraries/Email.php:			$this->validate_email($this->_str_to_array($from));
libraries/Email.php:			if ( ! preg_match('/[\200-\377]/', $name))
libraries/Email.php:				// add slashes for non-printing characters, slashes, and double quotes, and surround it in double quotes
libraries/Email.php:				$name = $this->_prep_q_encoding($name, TRUE);
libraries/Email.php:		$this->_set_header('From', $name.' <'.$from.'>');
libraries/Email.php:		$this->_set_header('Return-Path', '<'.$from.'>');
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:	 * Set Reply-to
libraries/Email.php:		if ($this->validate)
libraries/Email.php:			$this->validate_email($this->_str_to_array($replyto));
libraries/Email.php:		$this->_set_header('Reply-To', $name.' <'.$replyto.'>');
libraries/Email.php:		$this->_replyto_flag = TRUE;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$to = $this->_str_to_array($to);
libraries/Email.php:		$to = $this->clean_email($to);
libraries/Email.php:		if ($this->validate)
libraries/Email.php:			$this->validate_email($to);
libraries/Email.php:		if ($this->_get_protocol() != 'mail')
libraries/Email.php:			$this->_set_header('To', implode(", ", $to));
libraries/Email.php:		switch ($this->_get_protocol())
libraries/Email.php:			case 'smtp'		: $this->_recipients = $to;
libraries/Email.php:			case 'sendmail'	: $this->_recipients = implode(", ", $to);
libraries/Email.php:			case 'mail'		: $this->_recipients = implode(", ", $to);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$cc = $this->_str_to_array($cc);
libraries/Email.php:		$cc = $this->clean_email($cc);
libraries/Email.php:		if ($this->validate)
libraries/Email.php:			$this->validate_email($cc);
libraries/Email.php:		$this->_set_header('Cc', implode(", ", $cc));
libraries/Email.php:		if ($this->_get_protocol() == "smtp")
libraries/Email.php:			$this->_cc_array = $cc;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:			$this->bcc_batch_mode = TRUE;
libraries/Email.php:			$this->bcc_batch_size = $limit;
libraries/Email.php:		$bcc = $this->_str_to_array($bcc);
libraries/Email.php:		$bcc = $this->clean_email($bcc);
libraries/Email.php:		if ($this->validate)
libraries/Email.php:			$this->validate_email($bcc);
libraries/Email.php:		if (($this->_get_protocol() == "smtp") OR ($this->bcc_batch_mode && count($bcc) > $this->bcc_batch_size))
libraries/Email.php:			$this->_bcc_array = $bcc;
libraries/Email.php:			$this->_set_header('Bcc', implode(", ", $bcc));
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$subject = $this->_prep_q_encoding($subject);
libraries/Email.php:		$this->_set_header('Subject', $subject);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_body = stripslashes(rtrim(str_replace("\r", "", $body)));
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_attach_name[] = $filename;
libraries/Email.php:		$this->_attach_type[] = $this->_mime_types(next(explode('.', basename($filename))));
libraries/Email.php:		$this->_attach_disp[] = $disposition; // Can also be 'inline'  Not sure if it matters
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_headers[$header] = $value;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:				$email = preg_split('/[\s,]/', $email, -1, PREG_SPLIT_NO_EMPTY);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->alt_message = ($str == '') ? '' : $str;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->mailtype = ($type == 'html') ? 'html' : 'text';
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->wordwrap = ($wordwrap === FALSE) ? FALSE : TRUE;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->protocol = ( ! in_array($protocol, $this->_protocols, TRUE)) ? 'mail' : strtolower($protocol);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:			$this->priority = 3;
libraries/Email.php:			$this->priority = 3;
libraries/Email.php:		$this->priority = $n;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:			$this->newline	= "\n";
libraries/Email.php:		$this->newline	= $newline;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:			$this->crlf	= "\n";
libraries/Email.php:		$this->crlf	= $crlf;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_alt_boundary = "B_ALT_".uniqid(''); // multipart/alternative
libraries/Email.php:		$this->_atc_boundary = "B_ATC_".uniqid(''); // attachment boundary
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$from = $this->_headers['Return-Path'];
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->protocol = strtolower($this->protocol);
libraries/Email.php:		$this->protocol = ( ! in_array($this->protocol, $this->_protocols, TRUE)) ? 'mail' : $this->protocol;
libraries/Email.php:			return $this->protocol;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_encoding = ( ! in_array($this->_encoding, $this->_bit_depths)) ? '8bit' : $this->_encoding;
libraries/Email.php:		foreach ($this->_base_charsets as $charset)
libraries/Email.php:			if (strncmp($charset, $this->charset, strlen($charset)) == 0)
libraries/Email.php:				$this->_encoding = '7bit';
libraries/Email.php:			return $this->_encoding;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if	($this->mailtype == 'html' &&  count($this->_attach_name) == 0)
libraries/Email.php:		elseif	($this->mailtype == 'html' &&  count($this->_attach_name)  > 0)
libraries/Email.php:			return 'html-attach';
libraries/Email.php:		elseif	($this->mailtype == 'text' &&  count($this->_attach_name)  > 0)
libraries/Email.php:			return 'plain-attach';
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$operator = (strncmp($timezone, '-', 1) == 0) ? '-' : '+';
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		return "This is a multi-part message in MIME format.".$this->newline."Your email application may not support this format.";
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:			$this->_set_error_message('email_must_be_array');
libraries/Email.php:			if ( ! $this->valid_email($val))
libraries/Email.php:				$this->_set_error_message('email_invalid_address', $val);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		return ( ! preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $address)) ? FALSE : TRUE;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:	 * in plain-text headers of HTML-formatted emails.
libraries/Email.php:		if ($this->alt_message != "")
libraries/Email.php:			return $this->word_wrap($this->alt_message, '76');
libraries/Email.php:		if (preg_match('/\<body.*?\>(.*)\<\/body\>/si', $this->_body, $match))
libraries/Email.php:			$body = $this->_body;
libraries/Email.php:		$body = preg_replace( '#<!--(.*)--\>#', "", $body);
libraries/Email.php:		for ($i = 20; $i >= 3; $i--)
libraries/Email.php:		return $this->word_wrap($body, '76');
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:			$charlim = ($this->wrapchars == "") ? "76" : $this->wrapchars;
libraries/Email.php:				$output .= $line.$this->newline;
libraries/Email.php:				// If the over-length word is a URL we won't wrap it
libraries/Email.php:				$temp .= substr($line, 0, $charlim-1);
libraries/Email.php:				$line = substr($line, $charlim-1);
libraries/Email.php:			// If $temp contains data it means we had to split up an over-length
libraries/Email.php:				$output .= $temp.$this->newline.$line;
libraries/Email.php:			$output .= $this->newline;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_set_header('X-Sender', $this->clean_email($this->_headers['From']));
libraries/Email.php:		$this->_set_header('X-Mailer', $this->useragent);
libraries/Email.php:		$this->_set_header('X-Priority', $this->_priorities[$this->priority - 1]);
libraries/Email.php:		$this->_set_header('Message-ID', $this->_get_message_id());
libraries/Email.php:		$this->_set_header('Mime-Version', '1.0');
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ($this->protocol == 'mail')
libraries/Email.php:			$this->_subject = $this->_headers['Subject'];
libraries/Email.php:			unset($this->_headers['Subject']);
libraries/Email.php:		reset($this->_headers);
libraries/Email.php:		$this->_header_str = "";
libraries/Email.php:		foreach($this->_headers as $key => $val)
libraries/Email.php:				$this->_header_str .= $key.": ".$val.$this->newline;
libraries/Email.php:		if ($this->_get_protocol() == 'mail')
libraries/Email.php:			$this->_header_str = rtrim($this->_header_str);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ($this->wordwrap === TRUE  AND  $this->mailtype != 'html')
libraries/Email.php:			$this->_body = $this->word_wrap($this->_body);
libraries/Email.php:		$this->_set_boundaries();
libraries/Email.php:		$this->_write_headers();
libraries/Email.php:		$hdr = ($this->_get_protocol() == 'mail') ? $this->newline : '';
libraries/Email.php:		switch ($this->_get_content_type())
libraries/Email.php:				$hdr .= "Content-Type: text/plain; charset=" . $this->charset . $this->newline;
libraries/Email.php:				$hdr .= "Content-Transfer-Encoding: " . $this->_get_encoding();
libraries/Email.php:				if ($this->_get_protocol() == 'mail')
libraries/Email.php:					$this->_header_str .= $hdr;
libraries/Email.php:					$this->_finalbody = $this->_body;
libraries/Email.php:				$hdr .= $this->newline . $this->newline . $this->_body;
libraries/Email.php:				$this->_finalbody = $hdr;
libraries/Email.php:				if ($this->send_multipart === FALSE)
libraries/Email.php:					$hdr .= "Content-Type: text/html; charset=" . $this->charset . $this->newline;
libraries/Email.php:					$hdr .= "Content-Transfer-Encoding: quoted-printable";
libraries/Email.php:					$hdr .= "Content-Type: multipart/alternative; boundary=\"" . $this->_alt_boundary . "\"" . $this->newline . $this->newline;
libraries/Email.php:					$hdr .= $this->_get_mime_message() . $this->newline . $this->newline;
libraries/Email.php:					$hdr .= "--" . $this->_alt_boundary . $this->newline;
libraries/Email.php:					$hdr .= "Content-Type: text/plain; charset=" . $this->charset . $this->newline;
libraries/Email.php:					$hdr .= "Content-Transfer-Encoding: " . $this->_get_encoding() . $this->newline . $this->newline;
libraries/Email.php:					$hdr .= $this->_get_alt_message() . $this->newline . $this->newline . "--" . $this->_alt_boundary . $this->newline;
libraries/Email.php:					$hdr .= "Content-Type: text/html; charset=" . $this->charset . $this->newline;
libraries/Email.php:					$hdr .= "Content-Transfer-Encoding: quoted-printable";
libraries/Email.php:				$this->_body = $this->_prep_quoted_printable($this->_body);
libraries/Email.php:				if ($this->_get_protocol() == 'mail')
libraries/Email.php:					$this->_header_str .= $hdr;
libraries/Email.php:					$this->_finalbody = $this->_body . $this->newline . $this->newline;
libraries/Email.php:					if ($this->send_multipart !== FALSE)
libraries/Email.php:						$this->_finalbody .= "--" . $this->_alt_boundary . "--";
libraries/Email.php:				$hdr .= $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->_body . $this->newline . $this->newline;
libraries/Email.php:				if ($this->send_multipart !== FALSE)
libraries/Email.php:					$hdr .= "--" . $this->_alt_boundary . "--";
libraries/Email.php:				$this->_finalbody = $hdr;
libraries/Email.php:			case 'plain-attach' :
libraries/Email.php:				$hdr .= "Content-Type: multipart/".$this->multipart."; boundary=\"" . $this->_atc_boundary."\"" . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->_get_mime_message() . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= "--" . $this->_atc_boundary . $this->newline;
libraries/Email.php:				$hdr .= "Content-Type: text/plain; charset=" . $this->charset . $this->newline;
libraries/Email.php:				$hdr .= "Content-Transfer-Encoding: " . $this->_get_encoding();
libraries/Email.php:				if ($this->_get_protocol() == 'mail')
libraries/Email.php:					$this->_header_str .= $hdr;
libraries/Email.php:					$body  = $this->_body . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->_body . $this->newline . $this->newline;
libraries/Email.php:			case 'html-attach' :
libraries/Email.php:				$hdr .= "Content-Type: multipart/".$this->multipart."; boundary=\"" . $this->_atc_boundary."\"" . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->_get_mime_message() . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= "--" . $this->_atc_boundary . $this->newline;
libraries/Email.php:				$hdr .= "Content-Type: multipart/alternative; boundary=\"" . $this->_alt_boundary . "\"" . $this->newline .$this->newline;
libraries/Email.php:				$hdr .= "--" . $this->_alt_boundary . $this->newline;
libraries/Email.php:				$hdr .= "Content-Type: text/plain; charset=" . $this->charset . $this->newline;
libraries/Email.php:				$hdr .= "Content-Transfer-Encoding: " . $this->_get_encoding() . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->_get_alt_message() . $this->newline . $this->newline . "--" . $this->_alt_boundary . $this->newline;
libraries/Email.php:				$hdr .= "Content-Type: text/html; charset=" . $this->charset . $this->newline;
libraries/Email.php:				$hdr .= "Content-Transfer-Encoding: quoted-printable";
libraries/Email.php:				$this->_body = $this->_prep_quoted_printable($this->_body);
libraries/Email.php:				if ($this->_get_protocol() == 'mail')
libraries/Email.php:					$this->_header_str .= $hdr;
libraries/Email.php:					$body  = $this->_body . $this->newline . $this->newline;
libraries/Email.php:					$body .= "--" . $this->_alt_boundary . "--" . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->newline . $this->newline;
libraries/Email.php:				$hdr .= $this->_body . $this->newline . $this->newline;
libraries/Email.php:				$hdr .= "--" . $this->_alt_boundary . "--" . $this->newline . $this->newline;
libraries/Email.php:		for ($i=0; $i < count($this->_attach_name); $i++)
libraries/Email.php:			$filename = $this->_attach_name[$i];
libraries/Email.php:			$ctype = $this->_attach_type[$i];
libraries/Email.php:				$this->_set_error_message('email_attachment_missing', $filename);
libraries/Email.php:			$h  = "--".$this->_atc_boundary.$this->newline;
libraries/Email.php:			$h .= "Content-type: ".$ctype."; ";
libraries/Email.php:			$h .= "name=\"".$basename."\"".$this->newline;
libraries/Email.php:			$h .= "Content-Disposition: ".$this->_attach_disp[$i].";".$this->newline;
libraries/Email.php:			$h .= "Content-Transfer-Encoding: base64".$this->newline;
libraries/Email.php:				$this->_set_error_message('email_attachment_unreadable', $filename);
libraries/Email.php:		if ($this->_get_protocol() == 'mail')
libraries/Email.php:			$this->_finalbody = $body . implode($this->newline, $attachment).$this->newline."--".$this->_atc_boundary."--";
libraries/Email.php:		$this->_finalbody = $hdr.implode($this->newline, $attachment).$this->newline."--".$this->_atc_boundary."--";
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:	 * Prepares string for Quoted-Printable Content-Transfer-Encoding
libraries/Email.php:		// all over quoted-printable data
libraries/Email.php:			// Loop through each character in the line to add soft-wrap
libraries/Email.php:				if ($i == ($length - 1))
libraries/Email.php:					$output .= $temp.$escape.$this->crlf;
libraries/Email.php:			$output .= $temp.$this->crlf;
libraries/Email.php:		$output = substr($output, 0, strlen($this->crlf) * -1);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:	 * but not identical to quoted-printable, so it has its own method
libraries/Email.php:		$limit = 75 - 7 - strlen($this->charset);
libraries/Email.php:			// convert ALL non-printable ASCII characters and our specials
libraries/Email.php:				$output .= $temp.$this->crlf;
libraries/Email.php:		$str = trim(preg_replace('/^(.*)$/m', ' =?'.$this->charset.'?Q?$1?=', $str));
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ($this->_replyto_flag == FALSE)
libraries/Email.php:			$this->reply_to($this->_headers['From']);
libraries/Email.php:		if (( ! isset($this->_recipients) AND ! isset($this->_headers['To']))  AND
libraries/Email.php:			( ! isset($this->_bcc_array) AND ! isset($this->_headers['Bcc'])) AND
libraries/Email.php:			( ! isset($this->_headers['Cc'])))
libraries/Email.php:			$this->_set_error_message('email_no_recipients');
libraries/Email.php:		$this->_build_headers();
libraries/Email.php:		if ($this->bcc_batch_mode  AND  count($this->_bcc_array) > 0)
libraries/Email.php:			if (count($this->_bcc_array) > $this->bcc_batch_size)
libraries/Email.php:				return $this->batch_bcc_send();
libraries/Email.php:		$this->_build_message();
libraries/Email.php:		if ( ! $this->_spool_email())
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$float = $this->bcc_batch_size -1;
libraries/Email.php:		for ($i = 0; $i < count($this->_bcc_array); $i++)
libraries/Email.php:			if (isset($this->_bcc_array[$i]))
libraries/Email.php:				$set .= ", ".$this->_bcc_array[$i];
libraries/Email.php:				$float = $float + $this->bcc_batch_size;
libraries/Email.php:			if ($i == count($this->_bcc_array)-1)
libraries/Email.php:			unset($this->_headers['Bcc']);
libraries/Email.php:			$bcc = $this->_str_to_array($chunk[$i]);
libraries/Email.php:			$bcc = $this->clean_email($bcc);
libraries/Email.php:			if ($this->protocol != 'smtp')
libraries/Email.php:				$this->_set_header('Bcc', implode(", ", $bcc));
libraries/Email.php:				$this->_bcc_array = $bcc;
libraries/Email.php:			$this->_build_message();
libraries/Email.php:			$this->_spool_email();
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_finalbody = preg_replace_callback("/\{unwrap\}(.*?)\{\/unwrap\}/si", array($this, '_remove_nl_callback'), $this->_finalbody);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:	 * Strip line-breaks via callback
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_unwrap_specials();
libraries/Email.php:		switch ($this->_get_protocol())
libraries/Email.php:					if ( ! $this->_send_with_mail())
libraries/Email.php:						$this->_set_error_message('email_send_failure_phpmail');
libraries/Email.php:					if ( ! $this->_send_with_sendmail())
libraries/Email.php:						$this->_set_error_message('email_send_failure_sendmail');
libraries/Email.php:					if ( ! $this->_send_with_smtp())
libraries/Email.php:						$this->_set_error_message('email_send_failure_smtp');
libraries/Email.php:		$this->_set_error_message('email_sent', $this->_get_protocol());
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ($this->_safe_mode == TRUE)
libraries/Email.php:			if ( ! mail($this->_recipients, $this->_subject, $this->_finalbody, $this->_header_str))
libraries/Email.php:			// most documentation of sendmail using the "-f" flag lacks a space after it, however
libraries/Email.php:			if ( ! mail($this->_recipients, $this->_subject, $this->_finalbody, $this->_header_str, "-f ".$this->clean_email($this->_headers['From'])))
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$fp = @popen($this->mailpath . " -oi -f ".$this->clean_email($this->_headers['From'])." -t", 'w');
libraries/Email.php:		fputs($fp, $this->_header_str);
libraries/Email.php:		fputs($fp, $this->_finalbody);
libraries/Email.php:		if (version_compare(PHP_VERSION, '4.2.3') == -1)
libraries/Email.php:			$this->_set_error_message('email_exit_status', $status);
libraries/Email.php:			$this->_set_error_message('email_no_socket');
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ($this->smtp_host == '')
libraries/Email.php:			$this->_set_error_message('email_no_hostname');
libraries/Email.php:		$this->_smtp_connect();
libraries/Email.php:		$this->_smtp_authenticate();
libraries/Email.php:		$this->_send_command('from', $this->clean_email($this->_headers['From']));
libraries/Email.php:		foreach($this->_recipients as $val)
libraries/Email.php:			$this->_send_command('to', $val);
libraries/Email.php:		if (count($this->_cc_array) > 0)
libraries/Email.php:			foreach($this->_cc_array as $val)
libraries/Email.php:					$this->_send_command('to', $val);
libraries/Email.php:		if (count($this->_bcc_array) > 0)
libraries/Email.php:			foreach($this->_bcc_array as $val)
libraries/Email.php:					$this->_send_command('to', $val);
libraries/Email.php:		$this->_send_command('data');
libraries/Email.php:		$this->_send_data($this->_header_str . preg_replace('/^\./m', '..$1', $this->_finalbody));
libraries/Email.php:		$this->_send_data('.');
libraries/Email.php:		$reply = $this->_get_smtp_data();
libraries/Email.php:		$this->_set_error_message($reply);
libraries/Email.php:			$this->_set_error_message('email_smtp_error', $reply);
libraries/Email.php:		$this->_send_command('quit');
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$this->_smtp_connect = fsockopen($this->smtp_host,
libraries/Email.php:										$this->smtp_port,
libraries/Email.php:										$this->smtp_timeout);
libraries/Email.php:		if( ! is_resource($this->_smtp_connect))
libraries/Email.php:			$this->_set_error_message('email_smtp_error', $errno." ".$errstr);
libraries/Email.php:		$this->_set_error_message($this->_get_smtp_data());
libraries/Email.php:		return $this->_send_command('hello');
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:					if ($this->_smtp_auth OR $this->_get_encoding() == '8bit')
libraries/Email.php:						$this->_send_data('EHLO '.$this->_get_hostname());
libraries/Email.php:						$this->_send_data('HELO '.$this->_get_hostname());
libraries/Email.php:						$this->_send_data('MAIL FROM:<'.$data.'>');
libraries/Email.php:						$this->_send_data('RCPT TO:<'.$data.'>');
libraries/Email.php:						$this->_send_data('DATA');
libraries/Email.php:						$this->_send_data('QUIT');
libraries/Email.php:		$reply = $this->_get_smtp_data();
libraries/Email.php:		$this->_debug_msg[] = "<pre>".$cmd.": ".$reply."</pre>";
libraries/Email.php:			$this->_set_error_message('email_smtp_error', $reply);
libraries/Email.php:			fclose($this->_smtp_connect);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ( ! $this->_smtp_auth)
libraries/Email.php:		if ($this->smtp_user == ""  AND  $this->smtp_pass == "")
libraries/Email.php:			$this->_set_error_message('email_no_smtp_unpw');
libraries/Email.php:		$this->_send_data('AUTH LOGIN');
libraries/Email.php:		$reply = $this->_get_smtp_data();
libraries/Email.php:			$this->_set_error_message('email_failed_smtp_login', $reply);
libraries/Email.php:		$this->_send_data(base64_encode($this->smtp_user));
libraries/Email.php:		$reply = $this->_get_smtp_data();
libraries/Email.php:			$this->_set_error_message('email_smtp_auth_un', $reply);
libraries/Email.php:		$this->_send_data(base64_encode($this->smtp_pass));
libraries/Email.php:		$reply = $this->_get_smtp_data();
libraries/Email.php:			$this->_set_error_message('email_smtp_auth_pw', $reply);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ( ! fwrite($this->_smtp_connect, $data . $this->newline))
libraries/Email.php:			$this->_set_error_message('email_smtp_data_failure', $data);
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		while ($str = fgets($this->_smtp_connect, 512))
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if ($this->_IP !== FALSE)
libraries/Email.php:			return $this->_IP;
libraries/Email.php:		if ($cip && $rip) 	$this->_IP = $cip;
libraries/Email.php:		elseif ($rip)		$this->_IP = $rip;
libraries/Email.php:		elseif ($cip)		$this->_IP = $cip;
libraries/Email.php:		elseif ($fip)		$this->_IP = $fip;
libraries/Email.php:		if (strstr($this->_IP, ','))
libraries/Email.php:			$x = explode(',', $this->_IP);
libraries/Email.php:			$this->_IP = end($x);
libraries/Email.php:		if ( ! preg_match( "/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/", $this->_IP))
libraries/Email.php:			$this->_IP = '0.0.0.0';
libraries/Email.php:		return $this->_IP;
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		if (count($this->_debug_msg) > 0)
libraries/Email.php:			foreach ($this->_debug_msg as $val)
libraries/Email.php:		$msg .= "<pre>".$this->_header_str."\n".htmlspecialchars($this->_subject)."\n".htmlspecialchars($this->_finalbody).'</pre>';
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$CI->lang->load('email');
libraries/Email.php:		if (FALSE === ($line = $CI->lang->line($msg)))
libraries/Email.php:			$this->_debug_msg[] = str_replace('%s', $val, $msg)."<br />";
libraries/Email.php:			$this->_debug_msg[] = str_replace('%s', $val, $line)."<br />";
libraries/Email.php:	// --------------------------------------------------------------------
libraries/Email.php:		$mimes = array(	'hqx'	=>	'application/mac-binhex40',
libraries/Email.php:						'cpt'	=>	'application/mac-compactpro',
libraries/Email.php:						'dms'	=>	'application/octet-stream',
libraries/Email.php:						'lha'	=>	'application/octet-stream',
libraries/Email.php:						'lzh'	=>	'application/octet-stream',
libraries/Email.php:						'exe'	=>	'application/octet-stream',
libraries/Email.php:						'class'	=>	'application/octet-stream',
libraries/Email.php:						'psd'	=>	'application/octet-stream',
libraries/Email.php:						'so'	=>	'application/octet-stream',
libraries/Email.php:						'sea'	=>	'application/octet-stream',
libraries/Email.php:						'dll'	=>	'application/octet-stream',
libraries/Email.php:						'xls'	=>	'application/vnd.ms-excel',
libraries/Email.php:						'ppt'	=>	'application/vnd.ms-powerpoint',
libraries/Email.php:						'dcr'	=>	'application/x-director',
libraries/Email.php:						'dir'	=>	'application/x-director',
libraries/Email.php:						'dxr'	=>	'application/x-director',
libraries/Email.php:						'dvi'	=>	'application/x-dvi',
libraries/Email.php:						'gtar'	=>	'application/x-gtar',
libraries/Email.php:						'php'	=>	'application/x-httpd-php',
libraries/Email.php:						'php4'	=>	'application/x-httpd-php',
libraries/Email.php:						'php3'	=>	'application/x-httpd-php',
libraries/Email.php:						'phtml'	=>	'application/x-httpd-php',
libraries/Email.php:						'phps'	=>	'application/x-httpd-php-source',
libraries/Email.php:						'js'	=>	'application/x-javascript',
libraries/Email.php:						'swf'	=>	'application/x-shockwave-flash',
libraries/Email.php:						'sit'	=>	'application/x-stuffit',
libraries/Email.php:						'tar'	=>	'application/x-tar',
libraries/Email.php:						'tgz'	=>	'application/x-tar',
libraries/Email.php:						'aif'	=>	'audio/x-aiff',
libraries/Email.php:						'aiff'	=>	'audio/x-aiff',
libraries/Email.php:						'aifc'	=>	'audio/x-aiff',
libraries/Email.php:						'ram'	=>	'audio/x-pn-realaudio',
libraries/Email.php:						'rm'	=>	'audio/x-pn-realaudio',
libraries/Email.php:						'rpm'	=>	'audio/x-pn-realaudio-plugin',
libraries/Email.php:						'ra'	=>	'audio/x-realaudio',
libraries/Email.php:						'rv'	=>	'video/vnd.rn-realvideo',
libraries/Email.php:						'wav'	=>	'audio/x-wav',
libraries/Email.php:						'avi'	=>	'video/x-msvideo',
libraries/Email.php:						'movie'	=>	'video/x-sgi-movie',
libraries/Email.php:		return ( ! isset($mimes[strtolower($ext)])) ? "application/x-unknown-content-type" : $mimes[strtolower($ext)];
libraries/User_agent.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/User_agent.php:// ------------------------------------------------------------------------
libraries/User_agent.php:			$this->agent = trim($_SERVER['HTTP_USER_AGENT']);
libraries/User_agent.php:		if ( ! is_null($this->agent))
libraries/User_agent.php:			if ($this->_load_agent_file())
libraries/User_agent.php:				$this->_compile_data();
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:			$this->platforms = $platforms;
libraries/User_agent.php:			$this->browsers = $browsers;
libraries/User_agent.php:			$this->mobiles = $mobiles;
libraries/User_agent.php:			$this->robots = $robots;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		$this->_set_platform();
libraries/User_agent.php:			if ($this->$function() === TRUE)
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if (is_array($this->platforms) AND count($this->platforms) > 0)
libraries/User_agent.php:			foreach ($this->platforms as $key => $val)
libraries/User_agent.php:				if (preg_match("|".preg_quote($key)."|i", $this->agent))
libraries/User_agent.php:					$this->platform = $val;
libraries/User_agent.php:		$this->platform = 'Unknown Platform';
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if (is_array($this->browsers) AND count($this->browsers) > 0)
libraries/User_agent.php:			foreach ($this->browsers as $key => $val)
libraries/User_agent.php:				if (preg_match("|".preg_quote($key).".*?([0-9\.]+)|i", $this->agent, $match))
libraries/User_agent.php:					$this->is_browser = TRUE;
libraries/User_agent.php:					$this->version = $match[1];
libraries/User_agent.php:					$this->browser = $val;
libraries/User_agent.php:					$this->_set_mobile();
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if (is_array($this->robots) AND count($this->robots) > 0)
libraries/User_agent.php:			foreach ($this->robots as $key => $val)
libraries/User_agent.php:				if (preg_match("|".preg_quote($key)."|i", $this->agent))
libraries/User_agent.php:					$this->is_robot = TRUE;
libraries/User_agent.php:					$this->robot = $val;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if (is_array($this->mobiles) AND count($this->mobiles) > 0)
libraries/User_agent.php:			foreach ($this->mobiles as $key => $val)
libraries/User_agent.php:				if (FALSE !== (strpos(strtolower($this->agent), $key)))
libraries/User_agent.php:					$this->is_mobile = TRUE;
libraries/User_agent.php:					$this->mobile = $val;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if ((count($this->languages) == 0) AND isset($_SERVER['HTTP_ACCEPT_LANGUAGE']) AND $_SERVER['HTTP_ACCEPT_LANGUAGE'] != '')
libraries/User_agent.php:			$languages = preg_replace('/(;q=[0-9\.]+)/i', '', strtolower(trim($_SERVER['HTTP_ACCEPT_LANGUAGE'])));
libraries/User_agent.php:			$this->languages = explode(',', $languages);
libraries/User_agent.php:		if (count($this->languages) == 0)
libraries/User_agent.php:			$this->languages = array('Undefined');
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if ((count($this->charsets) == 0) AND isset($_SERVER['HTTP_ACCEPT_CHARSET']) AND $_SERVER['HTTP_ACCEPT_CHARSET'] != '')
libraries/User_agent.php:			$this->charsets = explode(',', $charsets);
libraries/User_agent.php:		if (count($this->charsets) == 0)
libraries/User_agent.php:			$this->charsets = array('Undefined');
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->is_browser;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->is_robot;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->is_mobile;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->agent;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->platform;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->browser;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->version;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->robot;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return $this->mobile;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if (count($this->languages) == 0)
libraries/User_agent.php:			$this->_set_languages();
libraries/User_agent.php:		return $this->languages;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		if (count($this->charsets) == 0)
libraries/User_agent.php:			$this->_set_charsets();
libraries/User_agent.php:		return $this->charsets;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:		return (in_array(strtolower($lang), $this->languages(), TRUE)) ? TRUE : FALSE;
libraries/User_agent.php:	// --------------------------------------------------------------------
libraries/User_agent.php:	function accept_charset($charset = 'utf-8')
libraries/User_agent.php:		return (in_array(strtolower($charset), $this->charsets(), TRUE)) ? TRUE : FALSE;
libraries/Language.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Language.php:// ------------------------------------------------------------------------
libraries/Language.php:	// --------------------------------------------------------------------
libraries/Language.php:		if (in_array($langfile, $this->is_loaded, TRUE))
libraries/Language.php:			$deft_lang = $CI->config->item('language');
libraries/Language.php:		$this->is_loaded[] = $langfile;
libraries/Language.php:		$this->language = array_merge($this->language, $lang);
libraries/Language.php:	// --------------------------------------------------------------------
libraries/Language.php:		$line = ($line == '' OR ! isset($this->language[$line])) ? FALSE : $this->language[$line];
libraries/Ftp.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Ftp.php:// ------------------------------------------------------------------------
libraries/Ftp.php:	 * Constructor - Sets Preferences
libraries/Ftp.php:			$this->initialize($config);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:			if (isset($this->$key))
libraries/Ftp.php:				$this->$key = $val;
libraries/Ftp.php:		$this->hostname = preg_replace('|.+?://|', '', $this->hostname);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:			$this->initialize($config);
libraries/Ftp.php:		if (FALSE === ($this->conn_id = @ftp_connect($this->hostname, $this->port)))
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_connect');
libraries/Ftp.php:		if ( ! $this->_login())
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_login');
libraries/Ftp.php:		if ($this->passive == TRUE)
libraries/Ftp.php:			ftp_pasv($this->conn_id, TRUE);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		return @ftp_login($this->conn_id, $this->username, $this->password);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ( ! is_resource($this->conn_id))
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_no_connection');
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ($path == '' OR ! $this->_is_conn())
libraries/Ftp.php:		$result = @ftp_chdir($this->conn_id, $path);
libraries/Ftp.php:			if ($this->debug == TRUE AND $supress_debug == FALSE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_changedir');
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ($path == '' OR ! $this->_is_conn())
libraries/Ftp.php:		$result = @ftp_mkdir($this->conn_id, $path);
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_makdir');
libraries/Ftp.php:			$this->chmod($path, (int)$permissions);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:			$this->_error('ftp_no_source_file');
libraries/Ftp.php:			$ext = $this->_getext($locpath);
libraries/Ftp.php:			$mode = $this->_settype($ext);
libraries/Ftp.php:		$result = @ftp_put($this->conn_id, $rempath, $locpath, $mode);
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_upload');
libraries/Ftp.php:			$this->chmod($rempath, (int)$permissions);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:		$result = @ftp_rename($this->conn_id, $old_file, $new_file);
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error($msg);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		return $this->rename($old_file, $new_file, TRUE);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:		$result = @ftp_delete($this->conn_id, $filepath);
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_delete');
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:	 * Delete a folder and recursively delete everything (including sub-folders)
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:		$list = $this->list_files($filepath);
libraries/Ftp.php:				if ( ! @ftp_delete($this->conn_id, $item))
libraries/Ftp.php:					$this->delete_dir($item);
libraries/Ftp.php:		$result = @ftp_rmdir($this->conn_id, $filepath);
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_delete');
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_chmod');
libraries/Ftp.php:		$result = @ftp_chmod($this->conn_id, $perm, $path);
libraries/Ftp.php:			if ($this->debug == TRUE)
libraries/Ftp.php:				$this->_error('ftp_unable_to_chmod');
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:		return ftp_nlist($this->conn_id, $path);
libraries/Ftp.php:	// ------------------------------------------------------------------------
libraries/Ftp.php:	 * sub-folders) and creates a mirror via FTP based on it.  Whatever the directory structure
libraries/Ftp.php:	 * @param	string	path to destination - include the base folder with trailing slash
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:			if ( ! $this->changedir($rempath, TRUE))
libraries/Ftp.php:				if ( ! $this->mkdir($rempath) OR ! $this->changedir($rempath))
libraries/Ftp.php:					$this->mirror($locpath.$file."/", $rempath.$file."/");
libraries/Ftp.php:					$ext = $this->_getext($file);
libraries/Ftp.php:					$mode = $this->_settype($ext);
libraries/Ftp.php:					$this->upload($locpath.$file, $rempath.$file, $mode);
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:	// --------------------------------------------------------------------
libraries/Ftp.php:	// ------------------------------------------------------------------------
libraries/Ftp.php:		if ( ! $this->_is_conn())
libraries/Ftp.php:		@ftp_close($this->conn_id);
libraries/Ftp.php:	// ------------------------------------------------------------------------
libraries/Ftp.php:		$CI->lang->load('ftp');
libraries/Ftp.php:		show_error($CI->lang->line($line));
libraries/Typography.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Typography.php:// ------------------------------------------------------------------------
libraries/Typography.php:	 * 	- Converts double spaces into paragraphs.
libraries/Typography.php:	 * 	- Converts single line breaks into <br /> tags
libraries/Typography.php:	 * 	- Converts single and double quotes into correctly facing curly quote entities.
libraries/Typography.php:	 * 	- Converts three dots into ellipsis.
libraries/Typography.php:	 * 	- Converts double dashes into em-dashes.
libraries/Typography.php:	 *  - Converts two spaces into entities
libraries/Typography.php:		if (strpos($str, '<!--') !== FALSE)
libraries/Typography.php:			if (preg_match_all("#(<!\-\-.*?\-\->)#s", $str, $matches))
libraries/Typography.php:		if ($this->protect_braced_quotes === TRUE)
libraries/Typography.php:		$str = preg_replace("#<(/*)(".$this->inline_elements.")([ >])#i", "{@TAG}\\1\\2\\3", $str);
libraries/Typography.php:		$chunks = preg_split('/(<(?:[^<>]+(?:"[^"]*"|\'[^\']*\')?)+>)/', $str, -1, PREG_SPLIT_DELIM_CAPTURE|PREG_SPLIT_NO_EMPTY);
libraries/Typography.php:			if (preg_match("#<(/*)(".$this->block_elements.").*?>#", $chunk, $match))
libraries/Typography.php:				if (preg_match("#".$this->skip_elements."#", $match[2]))
libraries/Typography.php:					$this->last_block_element = $match[2];
libraries/Typography.php:			$str .= $this->_format_newlines($chunk);
libraries/Typography.php:		if ( ! preg_match("/^\s*<(?:".$this->block_elements.")/i", $str))
libraries/Typography.php:			$str = preg_replace("/^(.*?)<(".$this->block_elements.")/i", '<p>$1</p><$2', $str);
libraries/Typography.php:		// Convert quotes, elipsis, em-dashes, non-breaking spaces, and ampersands
libraries/Typography.php:		$str = $this->format_characters($str);
libraries/Typography.php:						'#<p></p><('.$this->block_elements.')#'	=> '<$1',
libraries/Typography.php:						// Clean up stray non-breaking spaces preceeding block elements
libraries/Typography.php:						'#(&nbsp;\s*)+<('.$this->block_elements.')#'	=> '  <$2',
libraries/Typography.php:						'/\{@DD\}/'			=> '--',
libraries/Typography.php:			// If we have empty paragraph tags we add a non-breaking space
libraries/Typography.php:	// --------------------------------------------------------------------
libraries/Typography.php:	 * to curly entities, but it also converts em-dashes,
libraries/Typography.php:							// on which direction to curl, with non-word characters like punctuation
libraries/Typography.php:							'/\s?\-\-\s?/'					=> '&#8212;',
libraries/Typography.php:							'/&(?!#?[a-zA-Z0-9]{2,};)/'		=> '&amp;'
libraries/Typography.php:	// --------------------------------------------------------------------
libraries/Typography.php:		if (strpos($str, "\n") === FALSE  && ! in_array($this->last_block_element, $this->inner_block_required))
libraries/Typography.php:	// ------------------------------------------------------------------------
libraries/Typography.php:		return str_replace(array("'",'"','--','  '), array('{@SQ}', '{@DQ}', '{@DD}', '{@NBS}'), $match[0]);
libraries/Typography.php:	// --------------------------------------------------------------------
libraries/Typography.php:			if ($ct - 1 != $i)
libraries/Pagination.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Pagination.php:// ------------------------------------------------------------------------
libraries/Pagination.php:			$this->initialize($params);
libraries/Pagination.php:	// --------------------------------------------------------------------
libraries/Pagination.php:				if (isset($this->$key))
libraries/Pagination.php:					$this->$key = $val;
libraries/Pagination.php:	// --------------------------------------------------------------------
libraries/Pagination.php:		// If our item count or per-page total is zero there is no need to continue.
libraries/Pagination.php:		if ($this->total_rows == 0 OR $this->per_page == 0)
libraries/Pagination.php:		$num_pages = ceil($this->total_rows / $this->per_page);
libraries/Pagination.php:		if ($CI->config->item('enable_query_strings') === TRUE OR $this->page_query_string === TRUE)
libraries/Pagination.php:			if ($CI->input->get($this->query_string_segment) != 0)
libraries/Pagination.php:				$this->cur_page = $CI->input->get($this->query_string_segment);
libraries/Pagination.php:				// Prep the current page - no funny business!
libraries/Pagination.php:				$this->cur_page = (int) $this->cur_page;
libraries/Pagination.php:			if ($CI->uri->segment($this->uri_segment) != 0)
libraries/Pagination.php:				$this->cur_page = $CI->uri->segment($this->uri_segment);
libraries/Pagination.php:				// Prep the current page - no funny business!
libraries/Pagination.php:				$this->cur_page = (int) $this->cur_page;
libraries/Pagination.php:		$this->num_links = (int)$this->num_links;
libraries/Pagination.php:		if ($this->num_links < 1)
libraries/Pagination.php:		if ( ! is_numeric($this->cur_page))
libraries/Pagination.php:			$this->cur_page = 0;
libraries/Pagination.php:		if ($this->cur_page > $this->total_rows)
libraries/Pagination.php:			$this->cur_page = ($num_pages - 1) * $this->per_page;
libraries/Pagination.php:		$uri_page_number = $this->cur_page;
libraries/Pagination.php:		$this->cur_page = floor(($this->cur_page/$this->per_page) + 1);
libraries/Pagination.php:		$start = (($this->cur_page - $this->num_links) > 0) ? $this->cur_page - ($this->num_links - 1) : 1;
libraries/Pagination.php:		$end   = (($this->cur_page + $this->num_links) < $num_pages) ? $this->cur_page + $this->num_links : $num_pages;
libraries/Pagination.php:		if ($CI->config->item('enable_query_strings') === TRUE OR $this->page_query_string === TRUE)
libraries/Pagination.php:			$this->base_url = rtrim($this->base_url).'&amp;'.$this->query_string_segment.'=';
libraries/Pagination.php:			$this->base_url = rtrim($this->base_url, '/') .'/';
libraries/Pagination.php:		if  ($this->cur_page > ($this->num_links + 1))
libraries/Pagination.php:			$output .= $this->first_tag_open.'<a href="'.$this->base_url.'">'.$this->first_link.'</a>'.$this->first_tag_close;
libraries/Pagination.php:		if  ($this->cur_page != 1)
libraries/Pagination.php:			$i = $uri_page_number - $this->per_page;
libraries/Pagination.php:			$output .= $this->prev_tag_open.'<a href="'.$this->base_url.$i.'">'.$this->prev_link.'</a>'.$this->prev_tag_close;
libraries/Pagination.php:		for ($loop = $start -1; $loop <= $end; $loop++)
libraries/Pagination.php:			$i = ($loop * $this->per_page) - $this->per_page;
libraries/Pagination.php:				if ($this->cur_page == $loop)
libraries/Pagination.php:					$output .= $this->cur_tag_open.$loop.$this->cur_tag_close; // Current page
libraries/Pagination.php:					$output .= $this->num_tag_open.'<a href="'.$this->base_url.$n.'">'.$loop.'</a>'.$this->num_tag_close;
libraries/Pagination.php:		if ($this->cur_page < $num_pages)
libraries/Pagination.php:			$output .= $this->next_tag_open.'<a href="'.$this->base_url.($this->cur_page * $this->per_page).'">'.$this->next_link.'</a>'.$this->next_tag_close;
libraries/Pagination.php:		if (($this->cur_page + $this->num_links) < $num_pages)
libraries/Pagination.php:			$i = (($num_pages * $this->per_page) - $this->per_page);
libraries/Pagination.php:			$output .= $this->last_tag_open.'<a href="'.$this->base_url.$i.'">'.$this->last_link.'</a>'.$this->last_tag_close;
libraries/Pagination.php:		$output = $this->full_tag_open.$output.$this->full_tag_close;
libraries/Upload.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Upload.php:// ------------------------------------------------------------------------
libraries/Upload.php:			$this->initialize($props);
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:					$this->$method($config[$key]);
libraries/Upload.php:					$this->$key = $config[$key];
libraries/Upload.php:				$this->$key = $val;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:			$this->set_error('upload_no_file_selected');
libraries/Upload.php:		if ( ! $this->validate_upload_path())
libraries/Upload.php:					$this->set_error('upload_file_exceeds_limit');
libraries/Upload.php:					$this->set_error('upload_file_exceeds_form_limit');
libraries/Upload.php:				   $this->set_error('upload_file_partial');
libraries/Upload.php:				   $this->set_error('upload_no_file_selected');
libraries/Upload.php:					$this->set_error('upload_no_temp_directory');
libraries/Upload.php:					$this->set_error('upload_unable_to_write_file');
libraries/Upload.php:					$this->set_error('upload_stopped_by_extension');
libraries/Upload.php:				default :   $this->set_error('upload_no_file_selected');
libraries/Upload.php:		$this->file_temp = $_FILES[$field]['tmp_name'];		
libraries/Upload.php:		$this->file_name = $this->_prep_filename($_FILES[$field]['name']);
libraries/Upload.php:		$this->file_size = $_FILES[$field]['size'];		
libraries/Upload.php:		$this->file_type = preg_replace("/^(.+?);.*$/", "\\1", $_FILES[$field]['type']);
libraries/Upload.php:		$this->file_type = strtolower($this->file_type);
libraries/Upload.php:		$this->file_ext	 = $this->get_extension($_FILES[$field]['name']);
libraries/Upload.php:		if ($this->file_size > 0)
libraries/Upload.php:			$this->file_size = round($this->file_size/1024, 2);
libraries/Upload.php:		if ( ! $this->is_allowed_filetype())
libraries/Upload.php:			$this->set_error('upload_invalid_filetype');
libraries/Upload.php:		if ( ! $this->is_allowed_filesize())
libraries/Upload.php:			$this->set_error('upload_invalid_filesize');
libraries/Upload.php:		if ( ! $this->is_allowed_dimensions())
libraries/Upload.php:			$this->set_error('upload_invalid_dimensions');
libraries/Upload.php:		$this->file_name = $this->clean_file_name($this->file_name);
libraries/Upload.php:		if ($this->max_filename > 0)
libraries/Upload.php:			$this->file_name = $this->limit_filename_length($this->file_name, $this->max_filename);
libraries/Upload.php:		if ($this->remove_spaces == TRUE)
libraries/Upload.php:			$this->file_name = preg_replace("/\s+/", "_", $this->file_name);
libraries/Upload.php:		$this->orig_name = $this->file_name;
libraries/Upload.php:		if ($this->overwrite == FALSE)
libraries/Upload.php:			$this->file_name = $this->set_filename($this->upload_path, $this->file_name);
libraries/Upload.php:			if ($this->file_name === FALSE)
libraries/Upload.php:		if ( ! @copy($this->file_temp, $this->upload_path.$this->file_name))
libraries/Upload.php:			if ( ! @move_uploaded_file($this->file_temp, $this->upload_path.$this->file_name))
libraries/Upload.php:				 $this->set_error('upload_destination_error');
libraries/Upload.php:		if ($this->xss_clean == TRUE)
libraries/Upload.php:			$this->do_xss_clean();
libraries/Upload.php:		$this->set_image_properties($this->upload_path.$this->file_name);
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:						'file_name'			=> $this->file_name,
libraries/Upload.php:						'file_type'			=> $this->file_type,
libraries/Upload.php:						'file_path'			=> $this->upload_path,
libraries/Upload.php:						'full_path'			=> $this->upload_path.$this->file_name,
libraries/Upload.php:						'raw_name'			=> str_replace($this->file_ext, '', $this->file_name),
libraries/Upload.php:						'orig_name'			=> $this->orig_name,
libraries/Upload.php:						'file_ext'			=> $this->file_ext,
libraries/Upload.php:						'file_size'			=> $this->file_size,
libraries/Upload.php:						'is_image'			=> $this->is_image(),
libraries/Upload.php:						'image_width'		=> $this->image_width,
libraries/Upload.php:						'image_height'		=> $this->image_height,
libraries/Upload.php:						'image_type'		=> $this->image_type,
libraries/Upload.php:						'image_size_str'	=> $this->image_size_str,
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$this->upload_path = rtrim($path, '/').'/';
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:	 * number to the end of the filename to avoid overwriting a pre-existing file.
libraries/Upload.php:		if ($this->encrypt_name == TRUE)
libraries/Upload.php:			$filename = md5(uniqid(mt_rand())).$this->file_ext;	
libraries/Upload.php:		$filename = str_replace($this->file_ext, '', $filename);
libraries/Upload.php:			if ( ! file_exists($path.$filename.$i.$this->file_ext))
libraries/Upload.php:				$new_filename = $filename.$i.$this->file_ext;
libraries/Upload.php:			$this->set_error('upload_bad_filename');
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$this->max_size = ((int) $n < 0) ? 0: (int) $n;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$this->max_filename = ((int) $n < 0) ? 0: (int) $n;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$this->max_width = ((int) $n < 0) ? 0: (int) $n;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$this->max_height = ((int) $n < 0) ? 0: (int) $n;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$this->allowed_types = explode('|', $types);
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		if ( ! $this->is_image())
libraries/Upload.php:				$this->image_width		= $D['0'];
libraries/Upload.php:				$this->image_height		= $D['1'];
libraries/Upload.php:				$this->image_type		= ( ! isset($types[$D['2']])) ? 'unknown' : $types[$D['2']];
libraries/Upload.php:				$this->image_size_str	= $D['3'];  // string containing height and width
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$this->xss_clean = ($flag == TRUE) ? TRUE : FALSE;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		// IE will sometimes return odd mime-types during upload, so here we just standardize all
libraries/Upload.php:		$png_mimes  = array('image/x-png');
libraries/Upload.php:		if (in_array($this->file_type, $png_mimes))
libraries/Upload.php:			$this->file_type = 'image/png';
libraries/Upload.php:		if (in_array($this->file_type, $jpeg_mimes))
libraries/Upload.php:			$this->file_type = 'image/jpeg';
libraries/Upload.php:		return (in_array($this->file_type, $img_mimes, TRUE)) ? TRUE : FALSE;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		if (count($this->allowed_types) == 0 OR ! is_array($this->allowed_types))
libraries/Upload.php:			$this->set_error('upload_no_file_types');
libraries/Upload.php:		foreach ($this->allowed_types as $val)
libraries/Upload.php:			$mime = $this->mimes_types(strtolower($val));
libraries/Upload.php:				if (getimagesize($this->file_temp) === FALSE)
libraries/Upload.php:				if (in_array($this->file_type, $mime, TRUE))
libraries/Upload.php:				if ($mime == $this->file_type)
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		if ($this->max_size != 0  AND  $this->file_size > $this->max_size)
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		if ( ! $this->is_image())
libraries/Upload.php:			$D = @getimagesize($this->file_temp);
libraries/Upload.php:			if ($this->max_width > 0 AND $D['0'] > $this->max_width)
libraries/Upload.php:			if ($this->max_height > 0 AND $D['1'] > $this->max_height)
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		if ($this->upload_path == '')
libraries/Upload.php:			$this->set_error('upload_no_filepath');
libraries/Upload.php:		if (function_exists('realpath') AND @realpath($this->upload_path) !== FALSE)
libraries/Upload.php:			$this->upload_path = str_replace("\\", "/", realpath($this->upload_path));
libraries/Upload.php:		if ( ! @is_dir($this->upload_path))
libraries/Upload.php:			$this->set_error('upload_no_filepath');
libraries/Upload.php:		if ( ! is_really_writable($this->upload_path))
libraries/Upload.php:			$this->set_error('upload_not_writable');
libraries/Upload.php:		$this->upload_path = preg_replace("/(.+?)\/*$/", "\\1/",  $this->upload_path);
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:						"<!--",
libraries/Upload.php:						"-->",
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		return substr($filename, 0, ($length - strlen($ext))).$ext;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$file = $this->upload_path.$this->file_name;
libraries/Upload.php:		$data = $CI->input->xss_clean($data);
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		$CI->lang->load('upload');
libraries/Upload.php:				$msg = ($CI->lang->line($val) == FALSE) ? $val : $CI->lang->line($val);				
libraries/Upload.php:				$this->error_msg[] = $msg;
libraries/Upload.php:			$msg = ($CI->lang->line($msg) == FALSE) ? $msg : $CI->lang->line($msg);
libraries/Upload.php:			$this->error_msg[] = $msg;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		foreach ($this->error_msg as $val)
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:		if (count($this->mimes) == 0)
libraries/Upload.php:				$this->mimes = $mimes;
libraries/Upload.php:		return ( ! isset($this->mimes[$mime])) ? FALSE : $this->mimes[$mime];
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Upload.php:			if ($this->mimes_types(strtolower($part)) === FALSE)
libraries/Upload.php:		// run it through a $this->mimes check.
libraries/Upload.php:		if ($this->file_name != '')
libraries/Upload.php:			$filename = $this->file_name;
libraries/Upload.php:	// --------------------------------------------------------------------
libraries/Encrypt.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Encrypt.php:// ------------------------------------------------------------------------
libraries/Encrypt.php: * Provides two-way keyed encoding using XOR Hashing and Mcrypt
libraries/Encrypt.php:		$this->CI =& get_instance();
libraries/Encrypt.php:		$this->_mcrypt_exists = ( ! function_exists('mcrypt_encrypt')) ? FALSE : TRUE;
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:	 * Returns it as MD5 in order to have an exact-length 128 bit key.
libraries/Encrypt.php:			if ($this->encryption_key != '')
libraries/Encrypt.php:				return $this->encryption_key;
libraries/Encrypt.php:			$key = $CI->config->item('encryption_key');
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$this->encryption_key = $key;
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:	 * The end result is a double-encrypted message string
libraries/Encrypt.php:		$key = $this->get_key($key);
libraries/Encrypt.php:		$enc = $this->_xor_encode($string, $key);
libraries/Encrypt.php:		if ($this->_mcrypt_exists === TRUE)
libraries/Encrypt.php:			$enc = $this->mcrypt_encode($enc, $key);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$key = $this->get_key($key);
libraries/Encrypt.php:		if (preg_match('/[^a-zA-Z0-9\/\+=]/', $string))
libraries/Encrypt.php:		if ($this->_mcrypt_exists === TRUE)
libraries/Encrypt.php:			if (($dec = $this->mcrypt_decode($dec, $key)) === FALSE)
libraries/Encrypt.php:		return $this->_xor_decode($dec, $key);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:	 * Takes a plain-text string and key as input and generates an
libraries/Encrypt.php:	 * encoded bit-string using XOR
libraries/Encrypt.php:		$rand = $this->hash($rand);
libraries/Encrypt.php:		return $this->_xor_merge($enc, $key);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:	 * plain-text original message
libraries/Encrypt.php:		$string = $this->_xor_merge($string, $key);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$hash = $this->hash($key);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$init_size = mcrypt_get_iv_size($this->_get_cipher(), $this->_get_mode());
libraries/Encrypt.php:		return $this->_add_cipher_noise($init_vect.mcrypt_encrypt($this->_get_cipher(), $key, $data, $this->_get_mode(), $init_vect), $key);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$data = $this->_remove_cipher_noise($data, $key);
libraries/Encrypt.php:		$init_size = mcrypt_get_iv_size($this->_get_cipher(), $this->_get_mode());
libraries/Encrypt.php:		return rtrim(mcrypt_decrypt($this->_get_cipher(), $key, $data, $this->_get_mode(), $init_vect), "\0");
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:	 * against Man-in-the-middle attacks on CBC mode ciphers
libraries/Encrypt.php:		$keyhash = $this->hash($key);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$keyhash = $this->hash($key);
libraries/Encrypt.php:			$temp = ord($data[$i]) - ord($keyhash[$j]);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$this->_mcrypt_cipher = $cipher;
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$this->_mcrypt_mode = $mode;
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		if ($this->_mcrypt_cipher == '')
libraries/Encrypt.php:			$this->_mcrypt_cipher = MCRYPT_RIJNDAEL_256;
libraries/Encrypt.php:		return $this->_mcrypt_cipher;
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		if ($this->_mcrypt_mode == '')
libraries/Encrypt.php:			$this->_mcrypt_mode = MCRYPT_MODE_ECB;
libraries/Encrypt.php:		return $this->_mcrypt_mode;
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		$this->_hash_type = ($type != 'sha1' AND $type != 'md5') ? 'sha1' : $type;
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:		return ($this->_hash_type == 'sha1') ? $this->sha1($str) : md5($str);
libraries/Encrypt.php:	// --------------------------------------------------------------------
libraries/Encrypt.php:				return $SH->generate($str);
libraries/URI.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/URI.php:// ------------------------------------------------------------------------
libraries/URI.php:		$this->config =& load_class('Config');
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		if (strtoupper($this->config->item('uri_protocol')) == 'AUTO')
libraries/URI.php:				$this->uri_string = key($_GET);
libraries/URI.php:				$this->uri_string = $path;
libraries/URI.php:				$this->uri_string = $path;
libraries/URI.php:				$this->uri_string = $path;
libraries/URI.php:			$this->uri_string = '';
libraries/URI.php:			$uri = strtoupper($this->config->item('uri_protocol'));
libraries/URI.php:				$this->uri_string = $this->_parse_request_uri();
libraries/URI.php:			$this->uri_string = (isset($_SERVER[$uri])) ? $_SERVER[$uri] : @getenv($uri);
libraries/URI.php:		if ($this->uri_string == '/')
libraries/URI.php:			$this->uri_string = '';
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		if ($str != '' && $this->config->item('permitted_uri_chars') != '' && $this->config->item('enable_query_strings') == FALSE)
libraries/URI.php:			// preg_quote() in PHP 5.3 escapes -, so the str_replace() and addition of - to preg_quote() is to maintain backwards
libraries/URI.php:			if ( ! preg_match("|^[".str_replace(array('\\-', '\-'), '-', preg_quote($this->config->item('permitted_uri_chars'), '-'))."]+$|i", $str))
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		if  ($this->config->item('url_suffix') != "")
libraries/URI.php:			$this->uri_string = preg_replace("|".preg_quote($this->config->item('url_suffix'))."$|", "", $this->uri_string);
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	 * be stored in the $this->segments array.
libraries/URI.php:		foreach(explode("/", preg_replace("|/*(.+?)/*$|", "\\1", $this->uri_string)) as $val)
libraries/URI.php:			$val = trim($this->_filter_uri($val));
libraries/URI.php:				$this->segments[] = $val;
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	 * Re-index Segments
libraries/URI.php:	 * This function re-indexes the $this->segment array so that it
libraries/URI.php:	 * use functions like $this->uri->segment(n) since there is
libraries/URI.php:		array_unshift($this->segments, NULL);
libraries/URI.php:		array_unshift($this->rsegments, NULL);
libraries/URI.php:		unset($this->segments[0]);
libraries/URI.php:		unset($this->rsegments[0]);
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return ( ! isset($this->segments[$n])) ? $no_result : $this->segments[$n];
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	 * This function returns the re-routed URI segment (assuming routing rules are used)
libraries/URI.php:	 * same result as $this->segment()
libraries/URI.php:		return ( ! isset($this->rsegments[$n])) ? $no_result : $this->rsegments[$n];
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	 	return $this->_uri_to_assoc($n, $default, 'segment');
libraries/URI.php:	 * Identical to above only it uses the re-routed segment array
libraries/URI.php:	 	return $this->_uri_to_assoc($n, $default, 'rsegment');
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	 * Generate a key value pair from the URI string or Re-routed URI string
libraries/URI.php:		if (isset($this->keyval[$n]))
libraries/URI.php:			return $this->keyval[$n];
libraries/URI.php:		if ($this->$total_segments() < $n)
libraries/URI.php:		$segments = array_slice($this->$segment_array(), ($n - 1));
libraries/URI.php:		$this->keyval[$n] = $retval;
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return $this->_slash_segment($n, $where, 'segment');
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return $this->_slash_segment($n, $where, 'rsegment');
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	 * Fetch a URI Segment and add a trailing slash - helper function
libraries/URI.php:		return $leading.$this->$which($n).$trailing;
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return $this->segments;
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return $this->rsegments;
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return count($this->segments);
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return count($this->rsegments);
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:		return $this->uri_string;
libraries/URI.php:	// --------------------------------------------------------------------
libraries/URI.php:	 * Fetch the entire Re-routed URI string
libraries/URI.php:		return '/'.implode('/', $this->rsegment_array()).'/';
libraries/Input.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Input.php:// ------------------------------------------------------------------------
libraries/Input.php: * Pre-processes global input data for security
libraries/Input.php:									'-moz-binding'		=> '[removed]',
libraries/Input.php:									'<!--'				=> '&lt;!--',
libraries/Input.php:									'-->'				=> '--&gt;',
libraries/Input.php:		$this->use_xss_clean	= ($CFG->item('global_xss_filtering') === TRUE) ? TRUE : FALSE;
libraries/Input.php:		$this->allow_get_array	= ($CFG->item('enable_query_strings') === TRUE) ? TRUE : FALSE;
libraries/Input.php:		$this->_sanitize_globals();
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		if ($this->allow_get_array == FALSE)
libraries/Input.php:			$_GET = $this->_clean_input_data($_GET);
libraries/Input.php:		$_POST = $this->_clean_input_data($_POST);
libraries/Input.php:		$_COOKIE = $this->_clean_input_data($_COOKIE);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:				$new_array[$this->_clean_input_keys($key)] = $this->_clean_input_data($val);
libraries/Input.php:		if ($this->use_xss_clean === TRUE)
libraries/Input.php:			$str = $this->xss_clean($str);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:	* only named with alpha-numeric text and a few other items.
libraries/Input.php:		if ( ! preg_match("/^[a-z0-9:_\/-]+$/i", $str))
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:			return $this->xss_clean($array[$index]);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		return $this->_fetch_from_array($_GET, $index, $xss_clean);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		return $this->_fetch_from_array($_POST, $index, $xss_clean);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:			return $this->get($index, $xss_clean);
libraries/Input.php:			return $this->post($index, $xss_clean);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		return $this->_fetch_from_array($_COOKIE, $index, $xss_clean);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		return $this->_fetch_from_array($_SERVER, $index, $xss_clean);
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		if ($this->ip_address !== FALSE)
libraries/Input.php:			return $this->ip_address;
libraries/Input.php:		if (config_item('proxy_ips') != '' && $this->server('HTTP_X_FORWARDED_FOR') && $this->server('REMOTE_ADDR'))
libraries/Input.php:			$proxies = preg_split('/[\s,]/', config_item('proxy_ips'), -1, PREG_SPLIT_NO_EMPTY);
libraries/Input.php:			$this->ip_address = in_array($_SERVER['REMOTE_ADDR'], $proxies) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];
libraries/Input.php:		elseif ($this->server('REMOTE_ADDR') AND $this->server('HTTP_CLIENT_IP'))
libraries/Input.php:			$this->ip_address = $_SERVER['HTTP_CLIENT_IP'];
libraries/Input.php:		elseif ($this->server('REMOTE_ADDR'))
libraries/Input.php:			$this->ip_address = $_SERVER['REMOTE_ADDR'];
libraries/Input.php:		elseif ($this->server('HTTP_CLIENT_IP'))
libraries/Input.php:			$this->ip_address = $_SERVER['HTTP_CLIENT_IP'];
libraries/Input.php:		elseif ($this->server('HTTP_X_FORWARDED_FOR'))
libraries/Input.php:			$this->ip_address = $_SERVER['HTTP_X_FORWARDED_FOR'];
libraries/Input.php:		if ($this->ip_address === FALSE)
libraries/Input.php:			$this->ip_address = '0.0.0.0';
libraries/Input.php:			return $this->ip_address;
libraries/Input.php:		if (strstr($this->ip_address, ','))
libraries/Input.php:			$x = explode(',', $this->ip_address);
libraries/Input.php:			$this->ip_address = trim(end($x));
libraries/Input.php:		if ( ! $this->valid_ip($this->ip_address))
libraries/Input.php:			$this->ip_address = '0.0.0.0';
libraries/Input.php:		return $this->ip_address;
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:			if ($segment == '' OR preg_match("/[^0-9]/", $segment) OR $segment > 255 OR strlen($segment) > 3)
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		if ($this->user_agent !== FALSE)
libraries/Input.php:			return $this->user_agent;
libraries/Input.php:		$this->user_agent = ( ! isset($_SERVER['HTTP_USER_AGENT'])) ? FALSE : $_SERVER['HTTP_USER_AGENT'];
libraries/Input.php:		return $this->user_agent;
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:						"<!--",
libraries/Input.php:						"-->",
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:				$str[$key] = $this->xss_clean($str[$key]);
libraries/Input.php:		$str = $this->_remove_invisible_characters($str);
libraries/Input.php:		$str = preg_replace('|\&([a-z\_0-9]+)\=([a-z\_0-9]+)|i', $this->xss_hash()."\\1=\\2", $str);
libraries/Input.php:		$str = preg_replace('#(&\#?[0-9a-z]{2,})([\x00-\x20])*;?#i', "\\1;\\2", $str);
libraries/Input.php:		$str = preg_replace('#(&\#x?)([0-9A-F]+);?#i',"\\1\\2;",$str);
libraries/Input.php:		* Un-Protect GET variables in URLs
libraries/Input.php:		$str = str_replace($this->xss_hash(), '&', $str);
libraries/Input.php:		$str = preg_replace_callback("/[a-z]+=([\'\"]).*?\\1/si", array($this, '_convert_attribute'), $str);
libraries/Input.php:		$str = $this->_remove_invisible_characters($str);
libraries/Input.php:		foreach ($this->never_allowed_str as $key => $val)
libraries/Input.php:		foreach ($this->never_allowed_regex as $key => $val)
libraries/Input.php:			// We only want to do this when it is followed by a non-word character
libraries/Input.php:			$str = preg_replace_callback('#('.substr($temp, 0, -3).')(\W)#is', array($this, '_compact_exploded_words'), $str);
libraries/Input.php:		* to these simplified non-capturing preg_match(), especially if the pattern exists in the string
libraries/Input.php:		$event_handlers = array('[^a-z_\-]on\w*','xmlns');
libraries/Input.php:			* so we have to allow this for images. -Paul
libraries/Input.php:		* rendering the code un-executable.
libraries/Input.php:		foreach ($this->never_allowed_str as $key => $val)
libraries/Input.php:		foreach ($this->never_allowed_regex as $key => $val)
libraries/Input.php:		*  - Essentially, we want to know that after all of the character conversion is done whether
libraries/Input.php:		*  However, if the string post-conversion does not matched the string post-removal of XSS,
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		if ($this->xss_hash == '')
libraries/Input.php:				mt_srand(hexdec(substr(md5(microtime()), -8)) & 0x7fffffff);
libraries/Input.php:			$this->xss_hash = md5(time() + mt_rand(0, 1999999999));
libraries/Input.php:		return $this->xss_hash;
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:										'/%0[0-8bcef]/',			// url encoded 00-08, 11, 12, 14, 15
libraries/Input.php:										'/%1[0-9a-f]/',				// url encoded 16-31
libraries/Input.php:										'/[\x00-\x08]/',			// 00-08
libraries/Input.php:										'/[\x0e-\x1f]/'				// 14-31
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:	* PHP 5.2+ on link-heavy strings
libraries/Input.php:		$attributes = $this->_filter_attributes(str_replace(array('<', '>'), '', $match[1]));
libraries/Input.php:		$attributes = $this->_filter_attributes(str_replace(array('<', '>'), '', $match[1]));
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		$charset = $CFG->item('charset');
libraries/Input.php:		return $this->_html_entity_decode($match[0], strtoupper($charset));
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:	* when UTF-8 is the specified character set, so this gives us
libraries/Input.php:	* a work-around.  More info here:
libraries/Input.php:	/* -------------------------------------------------
libraries/Input.php:	/* -------------------------------------------------*/
libraries/Input.php:	NOTE: html_entity_decode() has a bug in some PHP versions when UTF-8 is the
libraries/Input.php:	function _html_entity_decode($str, $charset='UTF-8')
libraries/Input.php:		if (function_exists('html_entity_decode') && (strtolower($charset) != 'utf-8' OR version_compare(phpversion(), '5.0.0', '>=')))
libraries/Input.php:			$str = preg_replace('~&#x(0*[0-9a-f]{2,5})~ei', 'chr(hexdec("\\1"))', $str);
libraries/Input.php:			return preg_replace('~&#([0-9]{2,4})~e', 'chr(\\1)', $str);
libraries/Input.php:		$str = preg_replace('~&#x(0*[0-9a-f]{2,5});{0,1}~ei', 'chr(hexdec("\\1"))', $str);
libraries/Input.php:		$str = preg_replace('~&#([0-9]{2,4});{0,1}~e', 'chr(\\1)', $str);
libraries/Input.php:		// Literal Entities - Slightly slow so we do another check
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Input.php:		if (preg_match_all('#\s*[a-z\-]+\s*=\s*(\042|\047)([^\\1]*?)\\1#is', $str, $matches))
libraries/Input.php:	// --------------------------------------------------------------------
libraries/Model.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Model.php:// ------------------------------------------------------------------------
libraries/Model.php:		$this->_assign_libraries( (method_exists($this, '__get') OR method_exists($this, '__set')) ? FALSE : TRUE );
libraries/Model.php:		$this->_parent_name = ucfirst(get_class($this));
libraries/Model.php:			if ( ! isset($this->$key) AND $key != $this->_parent_name)
libraries/Model.php:					$this->$key = NULL; // Needed to prevent reference errors with some configurations
libraries/Model.php:					$this->$key =& $CI->$key;
libraries/Model.php:					$this->$key = $CI->$key;
libraries/Hooks.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Hooks.php:// ------------------------------------------------------------------------
libraries/Hooks.php:		$this->_initialize();
libraries/Hooks.php:	// --------------------------------------------------------------------
libraries/Hooks.php:		if ($CFG->item('enable_hooks') == FALSE)
libraries/Hooks.php:		$this->hooks =& $hook;
libraries/Hooks.php:		$this->enabled = TRUE;
libraries/Hooks.php:	// --------------------------------------------------------------------
libraries/Hooks.php:		if ( ! $this->enabled OR ! isset($this->hooks[$which]))
libraries/Hooks.php:		if (isset($this->hooks[$which][0]) AND is_array($this->hooks[$which][0]))
libraries/Hooks.php:			foreach ($this->hooks[$which] as $val)
libraries/Hooks.php:				$this->_run_hook($val);
libraries/Hooks.php:			$this->_run_hook($this->hooks[$which]);
libraries/Hooks.php:	// --------------------------------------------------------------------
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		// Safety - Prevents run-away loops
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		if ($this->in_progress == TRUE)
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		$this->in_progress = TRUE;
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:		// -----------------------------------
libraries/Hooks.php:			$HOOK->$function($params);
libraries/Hooks.php:		$this->in_progress = FALSE;
libraries/Config.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Config.php:// ------------------------------------------------------------------------
libraries/Config.php:		$this->config =& get_config();
libraries/Config.php:	// --------------------------------------------------------------------
libraries/Config.php:		if (in_array($file, $this->is_loaded, TRUE))
libraries/Config.php:			if (isset($this->config[$file]))
libraries/Config.php:				$this->config[$file] = array_merge($this->config[$file], $config);
libraries/Config.php:				$this->config[$file] = $config;
libraries/Config.php:			$this->config = array_merge($this->config, $config);
libraries/Config.php:		$this->is_loaded[] = $file;
libraries/Config.php:	// --------------------------------------------------------------------
libraries/Config.php:			if ( ! isset($this->config[$item]))
libraries/Config.php:			$pref = $this->config[$item];
libraries/Config.php:			if ( ! isset($this->config[$index]))
libraries/Config.php:			if ( ! isset($this->config[$index][$item]))
libraries/Config.php:			$pref = $this->config[$index][$item];
libraries/Config.php:  	// --------------------------------------------------------------------
libraries/Config.php:	 * Fetch a config file item - adds slash after item
libraries/Config.php:		if ( ! isset($this->config[$item]))
libraries/Config.php:		$pref = $this->config[$item];
libraries/Config.php:		if ($pref != '' && substr($pref, -1) != '/')
libraries/Config.php:	// --------------------------------------------------------------------
libraries/Config.php:			return $this->slash_item('base_url').$this->item('index_page');
libraries/Config.php:			$suffix = ($this->item('url_suffix') == FALSE) ? '' : $this->item('url_suffix');
libraries/Config.php:			return $this->slash_item('base_url').$this->slash_item('index_page').trim($uri, '/').$suffix; 
libraries/Config.php:	// --------------------------------------------------------------------
libraries/Config.php:		return $this->slash_item('base_url').end($x).'/';
libraries/Config.php:	// --------------------------------------------------------------------
libraries/Config.php:		$this->config[$item] = $value;
libraries/Exceptions.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Exceptions.php:// ------------------------------------------------------------------------
libraries/Exceptions.php:		$this->ob_level = ob_get_level();
libraries/Exceptions.php:	// --------------------------------------------------------------------
libraries/Exceptions.php:		$severity = ( ! isset($this->levels[$severity])) ? $severity : $this->levels[$severity];
libraries/Exceptions.php:		log_message('error', 'Severity: '.$severity.'  --> '.$message. ' '.$filepath.' '.$line, TRUE);
libraries/Exceptions.php:	// --------------------------------------------------------------------
libraries/Exceptions.php:		log_message('error', '404 Page Not Found --> '.$page);
libraries/Exceptions.php:		echo $this->show_error($heading, $message, 'error_404', 404);
libraries/Exceptions.php:	// --------------------------------------------------------------------
libraries/Exceptions.php:		if (ob_get_level() > $this->ob_level + 1)
libraries/Exceptions.php:	// --------------------------------------------------------------------
libraries/Exceptions.php:		$severity = ( ! isset($this->levels[$severity])) ? $severity : $this->levels[$severity];
libraries/Exceptions.php:			$filepath = $x[count($x)-2].'/'.end($x);
libraries/Exceptions.php:		if (ob_get_level() > $this->ob_level + 1)
libraries/Session.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Session.php:// ------------------------------------------------------------------------
libraries/Session.php:		$this->CI =& get_instance();
libraries/Session.php:			$this->$key = (isset($params[$key])) ? $params[$key] : $this->CI->config->item($key);
libraries/Session.php:		$this->CI->load->helper('string');
libraries/Session.php:		if ($this->sess_encrypt_cookie == TRUE)
libraries/Session.php:			$this->CI->load->library('encrypt');
libraries/Session.php:		if ($this->sess_use_database === TRUE AND $this->sess_table_name != '')
libraries/Session.php:			$this->CI->load->database();
libraries/Session.php:		$this->now = $this->_get_time();
libraries/Session.php:		if ($this->sess_expiration == 0)
libraries/Session.php:			$this->sess_expiration = (60*60*24*365*2);
libraries/Session.php:		$this->sess_cookie_name = $this->cookie_prefix.$this->sess_cookie_name;
libraries/Session.php:		if ( ! $this->sess_read())
libraries/Session.php:			$this->sess_create();
libraries/Session.php:			$this->sess_update();
libraries/Session.php:	   	$this->_flashdata_sweep();
libraries/Session.php:	   	$this->_flashdata_mark();
libraries/Session.php:		$this->_sess_gc();
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		$session = $this->CI->input->cookie($this->sess_cookie_name);
libraries/Session.php:		if ($this->sess_encrypt_cookie == TRUE)
libraries/Session.php:			$session = $this->CI->encrypt->decode($session);
libraries/Session.php:			$hash	 = substr($session, strlen($session)-32); // get last 32 chars
libraries/Session.php:			$session = substr($session, 0, strlen($session)-32);
libraries/Session.php:			if ($hash !==  md5($session.$this->encryption_key))
libraries/Session.php:				$this->sess_destroy();
libraries/Session.php:		$session = $this->_unserialize($session);
libraries/Session.php:			$this->sess_destroy();
libraries/Session.php:		if (($session['last_activity'] + $this->sess_expiration) < $this->now)
libraries/Session.php:			$this->sess_destroy();
libraries/Session.php:		if ($this->sess_match_ip == TRUE AND $session['ip_address'] != $this->CI->input->ip_address())
libraries/Session.php:			$this->sess_destroy();
libraries/Session.php:		if ($this->sess_match_useragent == TRUE AND trim($session['user_agent']) != trim(substr($this->CI->input->user_agent(), 0, 50)))
libraries/Session.php:			$this->sess_destroy();
libraries/Session.php:		if ($this->sess_use_database === TRUE)
libraries/Session.php:			$this->CI->db->where('session_id', $session['session_id']);
libraries/Session.php:			if ($this->sess_match_ip == TRUE)
libraries/Session.php:				$this->CI->db->where('ip_address', $session['ip_address']);
libraries/Session.php:			if ($this->sess_match_useragent == TRUE)
libraries/Session.php:				$this->CI->db->where('user_agent', $session['user_agent']);
libraries/Session.php:			$query = $this->CI->db->get($this->sess_table_name);
libraries/Session.php:			if ($query->num_rows() == 0)
libraries/Session.php:				$this->sess_destroy();
libraries/Session.php:			$row = $query->row();
libraries/Session.php:			if (isset($row->user_data) AND $row->user_data != '')
libraries/Session.php:				$custom_data = $this->_unserialize($row->user_data);
libraries/Session.php:		$this->userdata = $session;
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		if ($this->sess_use_database === FALSE)
libraries/Session.php:			$this->_set_cookie();
libraries/Session.php:		$custom_userdata = $this->userdata;
libraries/Session.php:			$cookie_userdata[$val] = $this->userdata[$val];
libraries/Session.php:			$custom_userdata = $this->_serialize($custom_userdata);
libraries/Session.php:		$this->CI->db->where('session_id', $this->userdata['session_id']);
libraries/Session.php:		$this->CI->db->update($this->sess_table_name, array('last_activity' => $this->userdata['last_activity'], 'user_data' => $custom_userdata));
libraries/Session.php:		// _set_cookie() function. Normally that function will store $this->userdata, but
libraries/Session.php:		$this->_set_cookie($cookie_userdata);
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		$sessid .= $this->CI->input->ip_address();
libraries/Session.php:		$this->userdata = array(
libraries/Session.php:							'ip_address' 	=> $this->CI->input->ip_address(),
libraries/Session.php:							'user_agent' 	=> substr($this->CI->input->user_agent(), 0, 50),
libraries/Session.php:							'last_activity'	=> $this->now
libraries/Session.php:		if ($this->sess_use_database === TRUE)
libraries/Session.php:			$this->CI->db->query($this->CI->db->insert_string($this->sess_table_name, $this->userdata));
libraries/Session.php:		$this->_set_cookie();
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		if (($this->userdata['last_activity'] + $this->sess_time_to_update) >= $this->now)
libraries/Session.php:		$old_sessid = $this->userdata['session_id'];
libraries/Session.php:		$new_sessid .= $this->CI->input->ip_address();
libraries/Session.php:		$this->userdata['session_id'] = $new_sessid;
libraries/Session.php:		$this->userdata['last_activity'] = $this->now;
libraries/Session.php:		if ($this->sess_use_database === TRUE)
libraries/Session.php:				$cookie_data[$val] = $this->userdata[$val];
libraries/Session.php:			$this->CI->db->query($this->CI->db->update_string($this->sess_table_name, array('last_activity' => $this->now, 'session_id' => $new_sessid), array('session_id' => $old_sessid)));
libraries/Session.php:		$this->_set_cookie($cookie_data);
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		if ($this->sess_use_database === TRUE AND isset($this->userdata['session_id']))
libraries/Session.php:			$this->CI->db->where('session_id', $this->userdata['session_id']);
libraries/Session.php:			$this->CI->db->delete($this->sess_table_name);
libraries/Session.php:					$this->sess_cookie_name,
libraries/Session.php:					($this->now - 31500000),
libraries/Session.php:					$this->cookie_path,
libraries/Session.php:					$this->cookie_domain,
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		return ( ! isset($this->userdata[$item])) ? FALSE : $this->userdata[$item];
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		return ( ! isset($this->userdata)) ? FALSE : $this->userdata;
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:				$this->userdata[$key] = $val;
libraries/Session.php:		$this->sess_write();
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:				unset($this->userdata[$key]);
libraries/Session.php:		$this->sess_write();
libraries/Session.php:	// ------------------------------------------------------------------------
libraries/Session.php:				$flashdata_key = $this->flashdata_key.':new:'.$key;
libraries/Session.php:				$this->set_userdata($flashdata_key, $val);
libraries/Session.php:	// ------------------------------------------------------------------------
libraries/Session.php:		$old_flashdata_key = $this->flashdata_key.':old:'.$key;
libraries/Session.php:		$value = $this->userdata($old_flashdata_key);
libraries/Session.php:		$new_flashdata_key = $this->flashdata_key.':new:'.$key;
libraries/Session.php:		$this->set_userdata($new_flashdata_key, $value);
libraries/Session.php:	// ------------------------------------------------------------------------
libraries/Session.php:		$flashdata_key = $this->flashdata_key.':old:'.$key;
libraries/Session.php:		return $this->userdata($flashdata_key);
libraries/Session.php:	// ------------------------------------------------------------------------
libraries/Session.php:		$userdata = $this->all_userdata();
libraries/Session.php:				$new_name = $this->flashdata_key.':old:'.$parts[1];
libraries/Session.php:				$this->set_userdata($new_name, $value);
libraries/Session.php:				$this->unset_userdata($name);
libraries/Session.php:	// ------------------------------------------------------------------------
libraries/Session.php:		$userdata = $this->all_userdata();
libraries/Session.php:				$this->unset_userdata($key);
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		if (strtolower($this->time_reference) == 'gmt')
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:			$cookie_data = $this->userdata;
libraries/Session.php:		$cookie_data = $this->_serialize($cookie_data);
libraries/Session.php:		if ($this->sess_encrypt_cookie == TRUE)
libraries/Session.php:			$cookie_data = $this->CI->encrypt->encode($cookie_data);
libraries/Session.php:			$cookie_data = $cookie_data.md5($cookie_data.$this->encryption_key);
libraries/Session.php:					$this->sess_cookie_name,
libraries/Session.php:					$this->sess_expiration + time(),
libraries/Session.php:					$this->cookie_path,
libraries/Session.php:					$this->cookie_domain,
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:	// --------------------------------------------------------------------
libraries/Session.php:		if ($this->sess_use_database != TRUE)
libraries/Session.php:		if ((rand() % 100) < $this->gc_probability)
libraries/Session.php:			$expire = $this->now - $this->sess_expiration;
libraries/Session.php:			$this->CI->db->where("last_activity < {$expire}");
libraries/Session.php:			$this->CI->db->delete($this->sess_table_name);
libraries/Loader.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Loader.php:// ------------------------------------------------------------------------
libraries/Loader.php:		$this->_ci_is_php5 = (floor(phpversion()) >= 5) ? TRUE : FALSE;
libraries/Loader.php:		$this->_ci_view_path = APPPATH.'views/';
libraries/Loader.php:		$this->_ci_ob_level  = ob_get_level();
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:				$this->_ci_load_class($class, $params, $object_name);
libraries/Loader.php:			$this->_ci_load_class($library, $params, $object_name);
libraries/Loader.php:		$this->_ci_assign_to_models();
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:				$this->model($babe);	
libraries/Loader.php:		// Is the model in a sub-folder? If so, parse out the filename and path.
libraries/Loader.php:			unset($x[count($x)-1]);
libraries/Loader.php:		if (in_array($name, $this->_ci_models, TRUE))
libraries/Loader.php:		if (isset($CI->$name))
libraries/Loader.php:			$CI->load->database($db_conn, FALSE, TRUE);
libraries/Loader.php:		$CI->$name = new $model();
libraries/Loader.php:		$CI->$name->_assign_libraries();
libraries/Loader.php:		$this->_ci_models[] = $name;	
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		if (class_exists('CI_DB') AND $return == FALSE AND $active_record == FALSE AND isset($CI->db) AND is_object($CI->db))
libraries/Loader.php:		$CI->db = '';
libraries/Loader.php:		$CI->db =& DB($params, $active_record);	
libraries/Loader.php:		$this->_ci_assign_to_models();
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			$this->database();
libraries/Loader.php:		$CI->load->dbforge();
libraries/Loader.php:		require_once(BASEPATH.'database/drivers/'.$CI->db->dbdriver.'/'.$CI->db->dbdriver.'_utility'.EXT);
libraries/Loader.php:		$class = 'CI_DB_'.$CI->db->dbdriver.'_utility';
libraries/Loader.php:		$CI->dbutil =& instantiate_class(new $class());
libraries/Loader.php:		$CI->load->_ci_assign_to_models();
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			$this->database();
libraries/Loader.php:		require_once(BASEPATH.'database/drivers/'.$CI->db->dbdriver.'/'.$CI->db->dbdriver.'_forge'.EXT);
libraries/Loader.php:		$class = 'CI_DB_'.$CI->db->dbdriver.'_forge';
libraries/Loader.php:		$CI->dbforge = new $class();
libraries/Loader.php:		$CI->load->_ci_assign_to_models();
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:	 * 3. TRUE/FALSE - whether to return the data or load it.  In
libraries/Loader.php:		return $this->_ci_load(array('_ci_view' => $view, '_ci_vars' => $this->_ci_object_to_array($vars), '_ci_return' => $return));
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		return $this->_ci_load(array('_ci_path' => $path, '_ci_return' => $return));
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		$vars = $this->_ci_object_to_array($vars);
libraries/Loader.php:				$this->_ci_cached_vars[$key] = $val;
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			if (isset($this->_ci_helpers[$helper]))
libraries/Loader.php:			$this->_ci_helpers[$helper] = TRUE;
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		$this->helper($helpers);
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			if (isset($this->_ci_plugins[$plugin]))
libraries/Loader.php:			$this->_ci_plugins[$plugin] = TRUE;
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		$this->plugin($plugins);
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			$CI->lang->load($langfile, $lang);
libraries/Loader.php:		return $CI->lang->load($file, $lang, $return);
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		$CI->config->load($file, $use_sections, $fail_gracefully);
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		$CI->_ci_scaffolding = TRUE;
libraries/Loader.php:		$CI->_ci_scaff_table = $table;
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			$_ci_path = $this->_ci_view_path.$_ci_file;
libraries/Loader.php:		// This allows anything loaded using $this->load (views, files, etc.)
libraries/Loader.php:		if ($this->_ci_is_instance())
libraries/Loader.php:				if ( ! isset($this->$_ci_key))
libraries/Loader.php:					$this->$_ci_key =& $_ci_CI->$_ci_key;
libraries/Loader.php:		 * You can either set variables using the dedicated $this->load_vars()
libraries/Loader.php:			$this->_ci_cached_vars = array_merge($this->_ci_cached_vars, $_ci_vars);
libraries/Loader.php:		extract($this->_ci_cached_vars);
libraries/Loader.php:		 * post-processed by the output class.  Why do we
libraries/Loader.php:		if (ob_get_level() > $this->_ci_ob_level + 1)
libraries/Loader.php:			$OUT->append_output(ob_get_contents());
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			unset($x[count($x)-1]);
libraries/Loader.php:				if (in_array($subclass, $this->_ci_loaded_files))
libraries/Loader.php:						if ( ! isset($CI->$object_name))
libraries/Loader.php:							return $this->_ci_init_class($class, config_item('subclass_prefix'), $params, $object_name);			
libraries/Loader.php:				$this->_ci_loaded_files[] = $subclass;
libraries/Loader.php:				return $this->_ci_init_class($class, config_item('subclass_prefix'), $params, $object_name);			
libraries/Loader.php:				if (in_array($filepath, $this->_ci_loaded_files))
libraries/Loader.php:						if ( ! isset($CI->$object_name))
libraries/Loader.php:							return $this->_ci_init_class($class, '', $params, $object_name);
libraries/Loader.php:				$this->_ci_loaded_files[] = $filepath;
libraries/Loader.php:				return $this->_ci_init_class($class, '', $params, $object_name);
libraries/Loader.php:			return $this->_ci_load_class($path, $params);
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:			// are case-sensitive with regard to file names
libraries/Loader.php:			log_message('error', "Non-existent class: ".$name);
libraries/Loader.php:			show_error("Non-existent class: ".$class);
libraries/Loader.php:			$classvar = ( ! isset($this->_ci_varmap[$class])) ? $class : $this->_ci_varmap[$class];
libraries/Loader.php:		$this->_ci_classes[$class] = $classvar;
libraries/Loader.php:			$CI->$classvar = new $name($config);
libraries/Loader.php:			$CI->$classvar = new $name;
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:	 * The config/autoload.php file contains an array that permits sub-systems,
libraries/Loader.php:				$CI->config->load($val);
libraries/Loader.php:				$this->$type($autoload[$type]);
libraries/Loader.php:				$this->database();
libraries/Loader.php:				$this->scaffolding();
libraries/Loader.php:				$this->library($item);
libraries/Loader.php:			$this->model($autoload['model']);
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		if (count($this->_ci_models) == 0)
libraries/Loader.php:		if ($this->_ci_is_instance())
libraries/Loader.php:			foreach ($this->_ci_models as $model)
libraries/Loader.php:				$CI->$model->_assign_libraries();
libraries/Loader.php:			foreach ($this->_ci_models as $model)
libraries/Loader.php:				$this->$model->_assign_libraries();
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:	// --------------------------------------------------------------------
libraries/Loader.php:		if ($this->_ci_is_php5 == TRUE)
libraries/Benchmark.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Benchmark.php:// ------------------------------------------------------------------------
libraries/Benchmark.php:	// --------------------------------------------------------------------
libraries/Benchmark.php:		$this->marker[$name] = microtime();
libraries/Benchmark.php:	// --------------------------------------------------------------------
libraries/Benchmark.php:	 * {elapsed_time} pseudo-variable. This permits the full system
libraries/Benchmark.php:		if ( ! isset($this->marker[$point1]))
libraries/Benchmark.php:		if ( ! isset($this->marker[$point2]))
libraries/Benchmark.php:			$this->marker[$point2] = microtime();
libraries/Benchmark.php:		list($sm, $ss) = explode(' ', $this->marker[$point1]);
libraries/Benchmark.php:		list($em, $es) = explode(' ', $this->marker[$point2]);
libraries/Benchmark.php:		return number_format(($em + $es) - ($sm + $ss), $decimals);
libraries/Benchmark.php:	// --------------------------------------------------------------------
libraries/Benchmark.php:	 * This function returns the {memory_usage} pseudo-variable.
libraries/Sha1.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Sha1.php:// ------------------------------------------------------------------------
libraries/Sha1.php: * http://www.tecknik.net/sha-1/
libraries/Sha1.php: * a hex conversion bug. - Rick Ellis
libraries/Sha1.php:			$x[$i >> 2] |= ord(substr($str, $i, 1)) << (24 - ($i % 4) * 8);
libraries/Sha1.php:		$x[$i >> 2] |= 0x80 << (24 - ($i % 4) * 8);
libraries/Sha1.php:		$x[$n * 16 - 1] = strlen($str) * 8;
libraries/Sha1.php:		$b = -271733879;
libraries/Sha1.php:		$c = -1732584194;
libraries/Sha1.php:		$e = -1009589776;
libraries/Sha1.php:					$w[$j] = $this->_rol($w[$j - 3] ^ $w[$j - 8] ^ $w[$j - 14] ^ $w[$j - 16], 1);
libraries/Sha1.php:				$t = $this->_safe_add($this->_safe_add($this->_rol($a, 5), $this->_ft($j, $b, $c, $d)), $this->_safe_add($this->_safe_add($e, $w[$j]), $this->_kt($j)));
libraries/Sha1.php:				$c = $this->_rol($b, 30);
libraries/Sha1.php:			$a = $this->_safe_add($a, $olda);
libraries/Sha1.php:			$b = $this->_safe_add($b, $oldb);
libraries/Sha1.php:			$c = $this->_safe_add($c, $oldc);
libraries/Sha1.php:			$d = $this->_safe_add($d, $oldd);
libraries/Sha1.php:			$e = $this->_safe_add($e, $olde);
libraries/Sha1.php:		return $this->_hex($a).$this->_hex($b).$this->_hex($c).$this->_hex($d).$this->_hex($e);
libraries/Sha1.php:	// --------------------------------------------------------------------
libraries/Sha1.php:	// --------------------------------------------------------------------
libraries/Sha1.php:	// --------------------------------------------------------------------
libraries/Sha1.php:			return -1894007588;
libraries/Sha1.php:			return -899497514;
libraries/Sha1.php:	// --------------------------------------------------------------------
libraries/Sha1.php:	// --------------------------------------------------------------------
libraries/Sha1.php:	 * Bitwise rotate a 32-bit number
libraries/Sha1.php:		return ($num << $cnt) | $this->_zero_fill($num, 32 - $cnt);
libraries/Sha1.php:	// --------------------------------------------------------------------
libraries/Sha1.php:			$bin = substr($bin, 0, strlen($bin) - $b);
libraries/Xmlrpc.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Xmlrpc.php:// ------------------------------------------------------------------------
libraries/Xmlrpc.php: * XML-RPC request handler class
libraries/Xmlrpc.php: * @category	XML-RPC
libraries/Xmlrpc.php:	var $xmlrpc_defencoding = 'UTF-8';
libraries/Xmlrpc.php:	var $xmlrpcName			= 'XML-RPC for CodeIgniter';
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$this->xmlrpcName 		= $this->xmlrpcName;
libraries/Xmlrpc.php:		$this->xmlrpc_backslash = chr(92).chr(92);
libraries/Xmlrpc.php:		$this->xmlrpcTypes = array(
libraries/Xmlrpc.php:			$this->xmlrpcI4	   => '1',
libraries/Xmlrpc.php:			$this->xmlrpcInt	  => '1',
libraries/Xmlrpc.php:			$this->xmlrpcBoolean  => '1',
libraries/Xmlrpc.php:			$this->xmlrpcString   => '1',
libraries/Xmlrpc.php:			$this->xmlrpcDouble   => '1',
libraries/Xmlrpc.php:			$this->xmlrpcDateTime => '1',
libraries/Xmlrpc.php:			$this->xmlrpcBase64   => '1',
libraries/Xmlrpc.php:			$this->xmlrpcArray	=> '2',
libraries/Xmlrpc.php:			$this->xmlrpcStruct   => '3'
libraries/Xmlrpc.php:		// Array of Valid Parents for Various XML-RPC elements
libraries/Xmlrpc.php:		$this->valid_parents = array('BOOLEAN'			=> array('VALUE'),
libraries/Xmlrpc.php:		// XML-RPC Responses
libraries/Xmlrpc.php:		$this->xmlrpcerr['unknown_method'] = '1';
libraries/Xmlrpc.php:		$this->xmlrpcstr['unknown_method'] = 'This is not a known method for this XML-RPC Server';
libraries/Xmlrpc.php:		$this->xmlrpcerr['invalid_return'] = '2';
libraries/Xmlrpc.php:		$this->xmlrpcstr['invalid_return'] = 'The XML data receieved was either invalid or not in the correct form for XML-RPC.  Turn on debugging to examine the XML data further.';
libraries/Xmlrpc.php:		$this->xmlrpcerr['incorrect_params'] = '3';
libraries/Xmlrpc.php:		$this->xmlrpcstr['incorrect_params'] = 'Incorrect parameters were passed to method';
libraries/Xmlrpc.php:		$this->xmlrpcerr['introspect_unknown'] = '4';
libraries/Xmlrpc.php:		$this->xmlrpcstr['introspect_unknown'] = "Cannot inspect signature for request: method unknown";
libraries/Xmlrpc.php:		$this->xmlrpcerr['http_error'] = '5';
libraries/Xmlrpc.php:		$this->xmlrpcstr['http_error'] = "Did not receive a '200 OK' response from remote server.";
libraries/Xmlrpc.php:		$this->xmlrpcerr['no_data'] = '6';
libraries/Xmlrpc.php:		$this->xmlrpcstr['no_data'] ='No data received from server.';
libraries/Xmlrpc.php:		$this->initialize($config);
libraries/Xmlrpc.php:		log_message('debug', "XML-RPC Class Initialized");
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:				if (isset($this->$key))
libraries/Xmlrpc.php:					$this->$key = $val;			
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$this->client = new XML_RPC_Client($path, $parts['host'], $port);
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		if ( ! is_null($this->client) && is_int($seconds))
libraries/Xmlrpc.php:			$this->client->timeout = $seconds;
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$this->method = $function;
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$this->data = array();
libraries/Xmlrpc.php:			$this->data[$key] = $this->values_parsing($value);
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$this->debug = ($flag == TRUE) ? TRUE : FALSE;
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:			if ( ! isset($value['1']) OR (! isset($this->xmlrpcTypes[$value['1']])))
libraries/Xmlrpc.php:					$value['0'][$k] = $this->values_parsing($value['0'][$k], TRUE);
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//  Sends XML-RPC Request
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$this->message = new XML_RPC_Message($this->method,$this->data);
libraries/Xmlrpc.php:		$this->message->debug = $this->debug;
libraries/Xmlrpc.php:		if ( ! $this->result = $this->client->send($this->message))
libraries/Xmlrpc.php:			$this->error = $this->result->errstr;
libraries/Xmlrpc.php:		elseif( ! is_object($this->result->val))
libraries/Xmlrpc.php:			$this->error = $this->result->errstr;
libraries/Xmlrpc.php:		$this->response = $this->result->decode();
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		return $this->error;
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		return $this->response;
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		// based on their data and type into a valid group of XML-RPC values
libraries/Xmlrpc.php:		$response = $this->values_parsing($response);
libraries/Xmlrpc.php: * XML-RPC Client class
libraries/Xmlrpc.php: * @category	XML-RPC
libraries/Xmlrpc.php:		$this->port = $port;
libraries/Xmlrpc.php:		$this->server = $server;
libraries/Xmlrpc.php:		$this->path = $path;
libraries/Xmlrpc.php:			// Multi-call disabled
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['multicall_recursion'],$this->xmlrpcstr['multicall_recursion']);
libraries/Xmlrpc.php:		return $this->sendPayload($msg);
libraries/Xmlrpc.php:		$fp = @fsockopen($this->server, $this->port,$this->errno, $this->errstr, $this->timeout);
libraries/Xmlrpc.php:			error_log($this->xmlrpcstr['http_error']);
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['http_error'],$this->xmlrpcstr['http_error']);
libraries/Xmlrpc.php:		if(empty($msg->payload))
libraries/Xmlrpc.php:			$msg->createPayload();
libraries/Xmlrpc.php:		$op  = "POST {$this->path} HTTP/1.0$r";
libraries/Xmlrpc.php:		$op .= "Host: {$this->server}$r";
libraries/Xmlrpc.php:		$op .= "Content-Type: text/xml$r";
libraries/Xmlrpc.php:		$op .= "User-Agent: {$this->xmlrpcName}$r";
libraries/Xmlrpc.php:		$op .= "Content-Length: ".strlen($msg->payload). "$r$r";
libraries/Xmlrpc.php:		$op .= $msg->payload;
libraries/Xmlrpc.php:			error_log($this->xmlrpcstr['http_error']);
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['http_error'], $this->xmlrpcstr['http_error']);
libraries/Xmlrpc.php:		$resp = $msg->parseResponse($fp);
libraries/Xmlrpc.php: * XML-RPC Response class
libraries/Xmlrpc.php: * @category	XML-RPC
libraries/Xmlrpc.php:			$this->errno = $code;
libraries/Xmlrpc.php:			$this->errstr = htmlentities($fstr);
libraries/Xmlrpc.php:			$this->val = new XML_RPC_Values();
libraries/Xmlrpc.php:			$this->val = $val;
libraries/Xmlrpc.php:		return $this->errno;
libraries/Xmlrpc.php:		return $this->errstr;
libraries/Xmlrpc.php:		return $this->val;
libraries/Xmlrpc.php:		if ($this->errno)
libraries/Xmlrpc.php:				<value><int>' . $this->errno . '</int></value>
libraries/Xmlrpc.php:				<value><string>' . $this->errstr . '</string></value>
libraries/Xmlrpc.php:					$this->val->serialize_class() .
libraries/Xmlrpc.php:					$array[$key] = $this->decode($array[$key]);
libraries/Xmlrpc.php:					$array[$key] = $CI->input->xss_clean($array[$key]);
libraries/Xmlrpc.php:			$result = $this->xmlrpc_decoder($this->val);
libraries/Xmlrpc.php:				$result = $this->decode($result);
libraries/Xmlrpc.php:				$result = $CI->input->xss_clean($result);
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//  XML-RPC Object to PHP Types
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$kind = $xmlrpc_val->kindOf();
libraries/Xmlrpc.php:			return $xmlrpc_val->scalarval();
libraries/Xmlrpc.php:			reset($xmlrpc_val->me);
libraries/Xmlrpc.php:			list($a,$b) = each($xmlrpc_val->me);
libraries/Xmlrpc.php:				$arr[] = $this->xmlrpc_decoder($xmlrpc_val->me['array'][$i]);
libraries/Xmlrpc.php:			reset($xmlrpc_val->me['struct']);
libraries/Xmlrpc.php:			while(list($key,$value) = each($xmlrpc_val->me['struct']))
libraries/Xmlrpc.php:				$arr[$key] = $this->xmlrpc_decoder($value);
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//  ISO-8601 time to server or UTC time
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		if (preg_match('/([0-9]{4})([0-9]{2})([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})/', $time, $regs))
libraries/Xmlrpc.php: * XML-RPC Message class
libraries/Xmlrpc.php: * @category	XML-RPC
libraries/Xmlrpc.php:		$this->method_name = $method;
libraries/Xmlrpc.php:				$this->params[] = $pars[$i];
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		$this->payload = "<?xml version=\"1.0\"?".">\r\n<methodCall>\r\n";
libraries/Xmlrpc.php:		$this->payload .= '<methodName>' . $this->method_name . "</methodName>\r\n";
libraries/Xmlrpc.php:		$this->payload .= "<params>\r\n";
libraries/Xmlrpc.php:		for($i=0; $i<count($this->params); $i++)
libraries/Xmlrpc.php:			$p = $this->params[$i];
libraries/Xmlrpc.php:			$this->payload .= "<param>\r\n".$p->serialize_class()."</param>\r\n";
libraries/Xmlrpc.php:		$this->payload .= "</params>\r\n</methodCall>\r\n";
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//  Parse External XML-RPC Server's Response
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		if ($this->debug === TRUE)
libraries/Xmlrpc.php:			echo "---DATA---\n" . htmlspecialchars($data) . "\n---END DATA---\n\n";
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:			error_log($this->xmlrpcstr['no_data']);
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['no_data'], $this->xmlrpcstr['no_data']);
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		if (strncmp($data, 'HTTP', 4) == 0 && ! preg_match('/^HTTP\/[0-9\.]+ 200 /', $data))
libraries/Xmlrpc.php:			$errstr= substr($data, 0, strpos($data, "\n")-1);
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['http_error'], $this->xmlrpcstr['http_error']. ' (' . $errstr . ')');
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		$parser = xml_parser_create($this->xmlrpc_defencoding);
libraries/Xmlrpc.php:		$this->xh[$parser]				 = array();
libraries/Xmlrpc.php:		$this->xh[$parser]['isf']		 = 0;
libraries/Xmlrpc.php:		$this->xh[$parser]['ac']		 = '';
libraries/Xmlrpc.php:		$this->xh[$parser]['headers'] 	 = array();
libraries/Xmlrpc.php:		$this->xh[$parser]['stack']		 = array();
libraries/Xmlrpc.php:		$this->xh[$parser]['valuestack'] = array();
libraries/Xmlrpc.php:		$this->xh[$parser]['isf_reason'] = 0;
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:			$this->xh[$parser]['headers'][] = $line;
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------  	
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['invalid_return'], $this->xmlrpcstr['invalid_return']);
libraries/Xmlrpc.php:		// ---------------------------------------
libraries/Xmlrpc.php:		// ---------------------------------------
libraries/Xmlrpc.php:		if ($this->xh[$parser]['isf'] > 1)
libraries/Xmlrpc.php:			if ($this->debug === TRUE)
libraries/Xmlrpc.php:				echo "---Invalid Return---\n";
libraries/Xmlrpc.php:				echo $this->xh[$parser]['isf_reason'];
libraries/Xmlrpc.php:				echo "---Invalid Return---\n\n";
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['invalid_return'],$this->xmlrpcstr['invalid_return'].' '.$this->xh[$parser]['isf_reason']);
libraries/Xmlrpc.php:		elseif ( ! is_object($this->xh[$parser]['value']))
libraries/Xmlrpc.php:			$r = new XML_RPC_Response(0, $this->xmlrpcerr['invalid_return'],$this->xmlrpcstr['invalid_return'].' '.$this->xh[$parser]['isf_reason']);
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------  	
libraries/Xmlrpc.php:		if ($this->debug === TRUE)
libraries/Xmlrpc.php:			if (count($this->xh[$parser]['headers'] > 0))
libraries/Xmlrpc.php:				echo "---HEADERS---\n";
libraries/Xmlrpc.php:				foreach ($this->xh[$parser]['headers'] as $header)
libraries/Xmlrpc.php:				echo "---END HEADERS---\n\n";
libraries/Xmlrpc.php:			echo "---DATA---\n" . htmlspecialchars($data) . "\n---END DATA---\n\n";
libraries/Xmlrpc.php:			echo "---PARSED---\n" ;
libraries/Xmlrpc.php:			var_dump($this->xh[$parser]['value']);
libraries/Xmlrpc.php:			echo "\n---END PARSED---</pre>";
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		//-------------------------------------
libraries/Xmlrpc.php:		$v = $this->xh[$parser]['value'];
libraries/Xmlrpc.php:		if ($this->xh[$parser]['isf'])
libraries/Xmlrpc.php:			$errno_v = $v->me['struct']['faultCode'];
libraries/Xmlrpc.php:			$errstr_v = $v->me['struct']['faultString'];
libraries/Xmlrpc.php:			$errno = $errno_v->scalarval();
libraries/Xmlrpc.php:				$errno = -1;
libraries/Xmlrpc.php:			$r = new XML_RPC_Response($v, $errno, $errstr_v->scalarval());
libraries/Xmlrpc.php:		$r->headers = $this->xh[$parser]['headers'];
libraries/Xmlrpc.php:	// ------------------------------------
libraries/Xmlrpc.php:	// ------------------------------------
libraries/Xmlrpc.php:	//   ac - used to accumulate values
libraries/Xmlrpc.php:	//   isf - used to indicate a fault
libraries/Xmlrpc.php:	//   lv - used to indicate "looking for a value": implements
libraries/Xmlrpc.php:	//   params - used to store parameters in method calls
libraries/Xmlrpc.php:	//   method - used to store method name
libraries/Xmlrpc.php:	//	 stack - array with parent tree of the xml element,
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		if ($this->xh[$the_parser]['isf'] > 1) return;
libraries/Xmlrpc.php:		if (count($this->xh[$the_parser]['stack']) == 0)
libraries/Xmlrpc.php:				$this->xh[$the_parser]['isf'] = 2;
libraries/Xmlrpc.php:				$this->xh[$the_parser]['isf_reason'] = 'Top level XML-RPC element is missing';
libraries/Xmlrpc.php:			if ( ! in_array($this->xh[$the_parser]['stack'][0], $this->valid_parents[$name], TRUE))
libraries/Xmlrpc.php:				$this->xh[$the_parser]['isf'] = 2;
libraries/Xmlrpc.php:				$this->xh[$the_parser]['isf_reason'] = "XML-RPC element $name cannot be child of ".$this->xh[$the_parser]['stack'][0];
libraries/Xmlrpc.php:				array_unshift($this->xh[$the_parser]['valuestack'], $cur_val);
libraries/Xmlrpc.php:				$this->xh[$the_parser]['ac'] = '';
libraries/Xmlrpc.php:				$this->xh[$the_parser]['isf'] = 1;
libraries/Xmlrpc.php:				$this->xh[$the_parser]['value'] = null;
libraries/Xmlrpc.php:				$this->xh[$the_parser]['vt'] = 'value';
libraries/Xmlrpc.php:				$this->xh[$the_parser]['ac'] = '';
libraries/Xmlrpc.php:				$this->xh[$the_parser]['lv'] = 1;
libraries/Xmlrpc.php:				if ($this->xh[$the_parser]['vt'] != 'value')
libraries/Xmlrpc.php:					$this->xh[$the_parser]['isf'] = 2;
libraries/Xmlrpc.php:					$this->xh[$the_parser]['isf_reason'] = "'Twas a $name element following a ".$this->xh[$the_parser]['vt']." element inside a single value";
libraries/Xmlrpc.php:				$this->xh[$the_parser]['ac'] = '';
libraries/Xmlrpc.php:				$this->xh[$the_parser]['valuestack'][0]['name'] = '';
libraries/Xmlrpc.php:				$this->xh[$the_parser]['value'] = null;
libraries/Xmlrpc.php:				$this->xh[$the_parser]['isf'] = 2;
libraries/Xmlrpc.php:				$this->xh[$the_parser]['isf_reason'] = "Invalid XML-RPC element found: $name";
libraries/Xmlrpc.php:		array_unshift($this->xh[$the_parser]['stack'], $name);
libraries/Xmlrpc.php:		if ($name != 'VALUE') $this->xh[$the_parser]['lv'] = 0;
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		if ($this->xh[$the_parser]['isf'] > 1) return;
libraries/Xmlrpc.php:		$curr_elem = array_shift($this->xh[$the_parser]['stack']);
libraries/Xmlrpc.php:				$cur_val = array_shift($this->xh[$the_parser]['valuestack']);
libraries/Xmlrpc.php:				$this->xh[$the_parser]['value'] = ( ! isset($cur_val['values'])) ? array() : $cur_val['values'];
libraries/Xmlrpc.php:				$this->xh[$the_parser]['vt']	= strtolower($name);
libraries/Xmlrpc.php:				$this->xh[$the_parser]['valuestack'][0]['name'] = $this->xh[$the_parser]['ac'];
libraries/Xmlrpc.php:				$this->xh[$the_parser]['vt'] = strtolower($name);
libraries/Xmlrpc.php:					$this->xh[$the_parser]['value'] = $this->xh[$the_parser]['ac'];
libraries/Xmlrpc.php:					$this->xh[$the_parser]['vt']	= $this->xmlrpcDateTime;
libraries/Xmlrpc.php:					$this->xh[$the_parser]['value'] = $this->xh[$the_parser]['ac'];
libraries/Xmlrpc.php:					$this->xh[$the_parser]['value'] = base64_decode($this->xh[$the_parser]['ac']);
libraries/Xmlrpc.php:					if ($this->xh[$the_parser]['ac'] == '1')
libraries/Xmlrpc.php:						$this->xh[$the_parser]['value'] = TRUE;
libraries/Xmlrpc.php:						$this->xh[$the_parser]['value'] = FALSE;
libraries/Xmlrpc.php:					// we must check that only 0123456789-.<space> are characters here
libraries/Xmlrpc.php:					if ( ! preg_match('/^[+-]?[eE0-9\t \.]+$/', $this->xh[$the_parser]['ac']))
libraries/Xmlrpc.php:						$this->xh[$the_parser]['value'] = 'ERROR_NON_NUMERIC_FOUND';
libraries/Xmlrpc.php:						$this->xh[$the_parser]['value'] = (double)$this->xh[$the_parser]['ac'];
libraries/Xmlrpc.php:					// we must check that only 0123456789-<space> are characters here
libraries/Xmlrpc.php:					if ( ! preg_match('/^[+-]?[0-9\t ]+$/', $this->xh[$the_parser]['ac']))
libraries/Xmlrpc.php:						$this->xh[$the_parser]['value'] = 'ERROR_NON_NUMERIC_FOUND';
libraries/Xmlrpc.php:						$this->xh[$the_parser]['value'] = (int)$this->xh[$the_parser]['ac'];
libraries/Xmlrpc.php:				$this->xh[$the_parser]['ac'] = '';
libraries/Xmlrpc.php:				$this->xh[$the_parser]['lv'] = 3; // indicate we've found a value
libraries/Xmlrpc.php:				if ($this->xh[$the_parser]['vt']=='value')
libraries/Xmlrpc.php:					$this->xh[$the_parser]['value']	= $this->xh[$the_parser]['ac'];
libraries/Xmlrpc.php:					$this->xh[$the_parser]['vt']	= $this->xmlrpcString;
libraries/Xmlrpc.php:				// build the XML-RPC value out of the data received, and substitute it
libraries/Xmlrpc.php:				$temp = new XML_RPC_Values($this->xh[$the_parser]['value'], $this->xh[$the_parser]['vt']);
libraries/Xmlrpc.php:				if (count($this->xh[$the_parser]['valuestack']) && $this->xh[$the_parser]['valuestack'][0]['type'] == 'ARRAY')
libraries/Xmlrpc.php:					$this->xh[$the_parser]['valuestack'][0]['values'][] = $temp;
libraries/Xmlrpc.php:					$this->xh[$the_parser]['value'] = $temp;
libraries/Xmlrpc.php:				$this->xh[$the_parser]['ac']='';
libraries/Xmlrpc.php:				if ($this->xh[$the_parser]['value'])
libraries/Xmlrpc.php:					$this->xh[$the_parser]['valuestack'][0]['values'][$this->xh[$the_parser]['valuestack'][0]['name']] = $this->xh[$the_parser]['value'];
libraries/Xmlrpc.php:				$this->xh[$the_parser]['ac']='';
libraries/Xmlrpc.php:				if ($this->xh[$the_parser]['value'])
libraries/Xmlrpc.php:					$this->xh[$the_parser]['params'][] = $this->xh[$the_parser]['value'];
libraries/Xmlrpc.php:				$this->xh[$the_parser]['method'] = ltrim($this->xh[$the_parser]['ac']);
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:		if ($this->xh[$the_parser]['isf'] > 1) return; // XML Fault found already
libraries/Xmlrpc.php:		if ($this->xh[$the_parser]['lv'] != 3)
libraries/Xmlrpc.php:			if ($this->xh[$the_parser]['lv'] == 1)
libraries/Xmlrpc.php:				$this->xh[$the_parser]['lv'] = 2; // Found a value
libraries/Xmlrpc.php:			if( ! @isset($this->xh[$the_parser]['ac']))
libraries/Xmlrpc.php:				$this->xh[$the_parser]['ac'] = '';
libraries/Xmlrpc.php:			$this->xh[$the_parser]['ac'] .= $data;
libraries/Xmlrpc.php:	function addParam($par) { $this->params[]=$par; }
libraries/Xmlrpc.php:					$array[$key] = $this->output_parameters($array[$key]);
libraries/Xmlrpc.php:					$array[$key] = $CI->input->xss_clean($array[$key]);
libraries/Xmlrpc.php:			for ($i = 0; $i < count($this->params); $i++)
libraries/Xmlrpc.php:				$a_param = $this->decode_message($this->params[$i]);
libraries/Xmlrpc.php:					$parameters[] = $this->output_parameters($a_param);
libraries/Xmlrpc.php:					$parameters[] = $CI->input->xss_clean($a_param);
libraries/Xmlrpc.php:		$kind = $param->kindOf();
libraries/Xmlrpc.php:			return $param->scalarval();
libraries/Xmlrpc.php:			reset($param->me);
libraries/Xmlrpc.php:			list($a,$b) = each($param->me);
libraries/Xmlrpc.php:				$arr[] = $this->decode_message($param->me['array'][$i]);
libraries/Xmlrpc.php:			reset($param->me['struct']);
libraries/Xmlrpc.php:			while(list($key,$value) = each($param->me['struct']))
libraries/Xmlrpc.php:				$arr[$key] = $this->decode_message($value);
libraries/Xmlrpc.php: * XML-RPC Values class
libraries/Xmlrpc.php: * @category	XML-RPC
libraries/Xmlrpc.php:	function XML_RPC_Values($val=-1, $type='')
libraries/Xmlrpc.php:		if ($val != -1 OR $type != '')
libraries/Xmlrpc.php:			if ($this->xmlrpcTypes[$type] == 1)
libraries/Xmlrpc.php:				$this->addScalar($val,$type);
libraries/Xmlrpc.php:			elseif ($this->xmlrpcTypes[$type] == 2)
libraries/Xmlrpc.php:				$this->addArray($val);
libraries/Xmlrpc.php:			elseif ($this->xmlrpcTypes[$type] == 3)
libraries/Xmlrpc.php:				$this->addStruct($val);
libraries/Xmlrpc.php:		$typeof = $this->xmlrpcTypes[$type];
libraries/Xmlrpc.php:		if ($this->mytype==1)
libraries/Xmlrpc.php:		if ($type == $this->xmlrpcBoolean)
libraries/Xmlrpc.php:		if ($this->mytype == 2)
libraries/Xmlrpc.php:			$ar = $this->me['array'];
libraries/Xmlrpc.php:			$this->me['array'] = $ar;
libraries/Xmlrpc.php:			$this->me[$type] = $val;
libraries/Xmlrpc.php:			$this->mytype = $typeof;
libraries/Xmlrpc.php:		if ($this->mytype != 0)
libraries/Xmlrpc.php:			echo '<strong>XML_RPC_Values</strong>: already initialized as a [' . $this->kindOf() . ']<br />';
libraries/Xmlrpc.php:		$this->mytype = $this->xmlrpcTypes['array'];
libraries/Xmlrpc.php:		$this->me['array'] = $vals;
libraries/Xmlrpc.php:		if ($this->mytype != 0)
libraries/Xmlrpc.php:			echo '<strong>XML_RPC_Values</strong>: already initialized as a [' . $this->kindOf() . ']<br />';
libraries/Xmlrpc.php:		$this->mytype = $this->xmlrpcTypes['struct'];
libraries/Xmlrpc.php:		$this->me['struct'] = $vals;
libraries/Xmlrpc.php:		switch($this->mytype)
libraries/Xmlrpc.php:		switch($this->xmlrpcTypes[$typ])
libraries/Xmlrpc.php:					$rs .= $this->serializeval($val2);
libraries/Xmlrpc.php:					$rs .= $this->serializeval($val[$i]);
libraries/Xmlrpc.php:					case $this->xmlrpcBase64:
libraries/Xmlrpc.php:					case $this->xmlrpcBoolean:
libraries/Xmlrpc.php:					case $this->xmlrpcString:
libraries/Xmlrpc.php:		return $this->serializeval($this);
libraries/Xmlrpc.php:		$ar = $o->me;
libraries/Xmlrpc.php:		$rs = "<value>\n".$this->serializedata($typ, $val)."</value>\n";
libraries/Xmlrpc.php:		reset($this->me);
libraries/Xmlrpc.php:		list($a,$b) = each($this->me);
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	// Encode time in ISO-8601 form.
libraries/Xmlrpc.php:	//-------------------------------------
libraries/Xmlrpc.php:	// Useful for sending time in XML-RPC
libraries/Xmlrpc.php:				$t = strftime("%Y%m%dT%H:%M:%S", $time - date('Z'));
libraries/Log.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Log.php:// ------------------------------------------------------------------------
libraries/Log.php:	var $_date_fmt	= 'Y-m-d H:i:s';
libraries/Log.php:		$this->log_path = ($config['log_path'] != '') ? $config['log_path'] : BASEPATH.'logs/';
libraries/Log.php:		if ( ! is_dir($this->log_path) OR ! is_really_writable($this->log_path))
libraries/Log.php:			$this->_enabled = FALSE;
libraries/Log.php:			$this->_threshold = $config['log_threshold'];
libraries/Log.php:			$this->_date_fmt = $config['log_date_format'];
libraries/Log.php:	// --------------------------------------------------------------------
libraries/Log.php:		if ($this->_enabled === FALSE)
libraries/Log.php:		if ( ! isset($this->_levels[$level]) OR ($this->_levels[$level] > $this->_threshold))
libraries/Log.php:		$filepath = $this->log_path.'log-'.date('Y-m-d').EXT;
libraries/Log.php:		$message .= $level.' '.(($level == 'INFO') ? ' -' : '-').' '.date($this->_date_fmt). ' --> '.$msg."\n";
libraries/Image_lib.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Image_lib.php:// ------------------------------------------------------------------------
libraries/Image_lib.php:	var $wm_opacity			= 50; 			// Image opacity: 1 - 100  Only works with image
libraries/Image_lib.php:			$this->initialize($props);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:			$this->$val = '';
libraries/Image_lib.php:		$this->master_dim = 'auto';
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:				$this->$key = $val;
libraries/Image_lib.php:		if ($this->source_image == '')
libraries/Image_lib.php:			$this->set_error('imglib_source_image_required');
libraries/Image_lib.php:			$this->set_error('imglib_gd_required_for_props');
libraries/Image_lib.php:		$this->image_library = strtolower($this->image_library);
libraries/Image_lib.php:		if (function_exists('realpath') AND @realpath($this->source_image) !== FALSE)
libraries/Image_lib.php:			$full_source_path = str_replace("\\", "/", realpath($this->source_image));
libraries/Image_lib.php:			$full_source_path = $this->source_image;
libraries/Image_lib.php:		$this->source_image = end($x);
libraries/Image_lib.php:		$this->source_folder = str_replace($this->source_image, '', $full_source_path);
libraries/Image_lib.php:		if ( ! $this->get_image_properties($this->source_folder.$this->source_image))
libraries/Image_lib.php:		if ($this->new_image == '')
libraries/Image_lib.php:			$this->dest_image = $this->source_image;
libraries/Image_lib.php:			$this->dest_folder = $this->source_folder;
libraries/Image_lib.php:			if (strpos($this->new_image, '/') === FALSE)
libraries/Image_lib.php:				$this->dest_folder = $this->source_folder;
libraries/Image_lib.php:				$this->dest_image = $this->new_image;
libraries/Image_lib.php:				if (function_exists('realpath') AND @realpath($this->new_image) !== FALSE)
libraries/Image_lib.php:					$full_dest_path = str_replace("\\", "/", realpath($this->new_image));
libraries/Image_lib.php:					$full_dest_path = $this->new_image;
libraries/Image_lib.php:					$this->dest_folder = $full_dest_path.'/';
libraries/Image_lib.php:					$this->dest_image = $this->source_image;
libraries/Image_lib.php:					$this->dest_image = end($x);
libraries/Image_lib.php:					$this->dest_folder = str_replace($this->dest_image, '', $full_dest_path);
libraries/Image_lib.php:		if ($this->create_thumb === FALSE OR $this->thumb_marker == '')
libraries/Image_lib.php:			$this->thumb_marker = '';
libraries/Image_lib.php:		$xp	= $this->explode_name($this->dest_image);
libraries/Image_lib.php:		$this->full_src_path = $this->source_folder.$this->source_image;
libraries/Image_lib.php:		$this->full_dst_path = $this->dest_folder.$filename.$this->thumb_marker.$file_ext;
libraries/Image_lib.php:		if ($this->maintain_ratio === TRUE && ($this->width != '' AND $this->height != ''))
libraries/Image_lib.php:			$this->image_reproportion();
libraries/Image_lib.php:		if ($this->width == '')
libraries/Image_lib.php:			$this->width = $this->orig_width;
libraries/Image_lib.php:		if ($this->height == '')
libraries/Image_lib.php:			$this->height = $this->orig_height;
libraries/Image_lib.php:		$this->quality = trim(str_replace("%", "", $this->quality));
libraries/Image_lib.php:		if ($this->quality == '' OR $this->quality == 0 OR ! is_numeric($this->quality))
libraries/Image_lib.php:			$this->quality = 90;
libraries/Image_lib.php:		$this->x_axis = ($this->x_axis == '' OR ! is_numeric($this->x_axis)) ? 0 : $this->x_axis;
libraries/Image_lib.php:		$this->y_axis = ($this->y_axis == '' OR ! is_numeric($this->y_axis)) ? 0 : $this->y_axis;
libraries/Image_lib.php:		// Watermark-related Stuff...
libraries/Image_lib.php:		if ($this->wm_font_color != '')
libraries/Image_lib.php:			if (strlen($this->wm_font_color) == 6)
libraries/Image_lib.php:				$this->wm_font_color = '#'.$this->wm_font_color;
libraries/Image_lib.php:		if ($this->wm_shadow_color != '')
libraries/Image_lib.php:			if (strlen($this->wm_shadow_color) == 6)
libraries/Image_lib.php:				$this->wm_shadow_color = '#'.$this->wm_shadow_color;
libraries/Image_lib.php:		if ($this->wm_overlay_path != '')
libraries/Image_lib.php:			$this->wm_overlay_path = str_replace("\\", "/", realpath($this->wm_overlay_path));
libraries/Image_lib.php:		if ($this->wm_shadow_color != '')
libraries/Image_lib.php:			$this->wm_use_drop_shadow = TRUE;
libraries/Image_lib.php:		if ($this->wm_font_path != '')
libraries/Image_lib.php:			$this->wm_use_truetype = TRUE;
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		$protocol = 'image_process_'.$this->image_library;
libraries/Image_lib.php:		return $this->$protocol('resize');
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		$protocol = 'image_process_'.$this->image_library;
libraries/Image_lib.php:		return $this->$protocol('crop');
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		if ($this->rotation_angle == '' OR ! in_array($this->rotation_angle, $degs))
libraries/Image_lib.php:			$this->set_error('imglib_rotation_angle_required');
libraries/Image_lib.php:		if ($this->rotation_angle == 90 OR $this->rotation_angle == 270)
libraries/Image_lib.php:			$this->width	= $this->orig_height;
libraries/Image_lib.php:			$this->height	= $this->orig_width;
libraries/Image_lib.php:			$this->width	= $this->orig_width;
libraries/Image_lib.php:			$this->height	= $this->orig_height;
libraries/Image_lib.php:		if ($this->image_library == 'imagemagick' OR $this->image_library == 'netpbm')
libraries/Image_lib.php:			$protocol = 'image_process_'.$this->image_library;
libraries/Image_lib.php:			return $this->$protocol('rotate');
libraries/Image_lib.php:		if ($this->rotation_angle == 'hor' OR $this->rotation_angle == 'vrt')
libraries/Image_lib.php:			return $this->image_mirror_gd();
libraries/Image_lib.php:			return $this->image_rotate_gd();
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		if ($this->dynamic_output === FALSE)
libraries/Image_lib.php:			if ($this->orig_width == $this->width AND $this->orig_height == $this->height)
libraries/Image_lib.php: 				if ($this->source_image != $this->new_image)
libraries/Image_lib.php:					if (@copy($this->full_src_path, $this->full_dst_path))
libraries/Image_lib.php:						@chmod($this->full_dst_path, DIR_WRITE_MODE);
libraries/Image_lib.php:			$this->orig_width  = $this->width;
libraries/Image_lib.php:			$this->orig_height = $this->height;
libraries/Image_lib.php:			if ($this->gd_version() !== FALSE)
libraries/Image_lib.php:				$gd_version = str_replace('0', '', $this->gd_version());
libraries/Image_lib.php:			$this->x_axis = 0;
libraries/Image_lib.php:			$this->y_axis = 0;
libraries/Image_lib.php:		if ( ! ($src_img = $this->image_create_gd()))
libraries/Image_lib.php:		//  if ($this->image_library == 'gd2' AND function_exists('imagecreatetruecolor') AND $v2_override == FALSE)
libraries/Image_lib.php: 		if ($this->image_library == 'gd2' AND function_exists('imagecreatetruecolor'))
libraries/Image_lib.php:		$dst_img = $create($this->width, $this->height);
libraries/Image_lib.php:		$copy($dst_img, $src_img, 0, 0, $this->x_axis, $this->y_axis, $this->width, $this->height, $this->orig_width, $this->orig_height);
libraries/Image_lib.php:		if ($this->dynamic_output == TRUE)
libraries/Image_lib.php:			$this->image_display_gd($dst_img);
libraries/Image_lib.php:			if ( ! $this->image_save_gd($dst_img))
libraries/Image_lib.php:		@chmod($this->full_dst_path, DIR_WRITE_MODE);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		if ($this->library_path == '')
libraries/Image_lib.php:			$this->set_error('imglib_libpath_invalid');
libraries/Image_lib.php:		if ( ! preg_match("/convert$/i", $this->library_path))
libraries/Image_lib.php:			$this->library_path = rtrim($this->library_path, '/').'/';
libraries/Image_lib.php:			$this->library_path .= 'convert';
libraries/Image_lib.php:		$cmd = $this->library_path." -quality ".$this->quality;
libraries/Image_lib.php:			$cmd .= " -crop ".$this->width."x".$this->height."+".$this->x_axis."+".$this->y_axis." \"$this->full_src_path\" \"$this->full_dst_path\" 2>&1";
libraries/Image_lib.php:			switch ($this->rotation_angle)
libraries/Image_lib.php:				case 'hor' 	: $angle = '-flop';
libraries/Image_lib.php:				case 'vrt' 	: $angle = '-flip';
libraries/Image_lib.php:				default		: $angle = '-rotate '.$this->rotation_angle;
libraries/Image_lib.php:			$cmd .= " ".$angle." \"$this->full_src_path\" \"$this->full_dst_path\" 2>&1";
libraries/Image_lib.php:			$cmd .= " -resize ".$this->width."x".$this->height." \"$this->full_src_path\" \"$this->full_dst_path\" 2>&1";
libraries/Image_lib.php:			$this->set_error('imglib_image_process_failed');
libraries/Image_lib.php:		@chmod($this->full_dst_path, DIR_WRITE_MODE);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		if ($this->library_path == '')
libraries/Image_lib.php:			$this->set_error('imglib_libpath_invalid');
libraries/Image_lib.php:		switch ($this->image_type)
libraries/Image_lib.php:			$cmd_inner = 'pnmcut -left '.$this->x_axis.' -top '.$this->y_axis.' -width '.$this->width.' -height '.$this->height;
libraries/Image_lib.php:			switch ($this->rotation_angle)
libraries/Image_lib.php:			$cmd_inner = 'pnmflip -'.$angle.' ';
libraries/Image_lib.php:			$cmd_inner = 'pnmscale -xysize '.$this->width.' '.$this->height;
libraries/Image_lib.php:		$cmd = $this->library_path.$cmd_in.' '.$this->full_src_path.' | '.$cmd_inner.' | '.$cmd_out.' > '.$this->dest_folder.'netpbm.tmp';
libraries/Image_lib.php:			$this->set_error('imglib_image_process_failed');
libraries/Image_lib.php:		copy ($this->dest_folder.'netpbm.tmp', $this->full_dst_path);
libraries/Image_lib.php:		unlink ($this->dest_folder.'netpbm.tmp');
libraries/Image_lib.php:		@chmod($this->full_dst_path, DIR_WRITE_MODE);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:			$this->set_error('imglib_rotate_unsupported');
libraries/Image_lib.php:		if ( ! ($src_img = $this->image_create_gd()))
libraries/Image_lib.php:		$dst_img = imagerotate($src_img, $this->rotation_angle, $white);
libraries/Image_lib.php:		if ($this->dynamic_output == TRUE)
libraries/Image_lib.php:			$this->image_display_gd($dst_img);
libraries/Image_lib.php:			if ( ! $this->image_save_gd($dst_img))
libraries/Image_lib.php:		@chmod($this->full_dst_path, DIR_WRITE_MODE);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		if ( ! $src_img = $this->image_create_gd())
libraries/Image_lib.php:		$width  = $this->orig_width;
libraries/Image_lib.php:		$height = $this->orig_height;
libraries/Image_lib.php:		if ($this->rotation_angle == 'hor')
libraries/Image_lib.php:				$right = $width-1;
libraries/Image_lib.php:					$right--;
libraries/Image_lib.php:				$bot = $height-1;
libraries/Image_lib.php:					$bot--;
libraries/Image_lib.php:		if ($this->dynamic_output == TRUE)
libraries/Image_lib.php:			$this->image_display_gd($src_img);
libraries/Image_lib.php:			if ( ! $this->image_save_gd($src_img))
libraries/Image_lib.php:		@chmod($this->full_dst_path, DIR_WRITE_MODE);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		if ($this->wm_type == 'overlay')
libraries/Image_lib.php:			return $this->overlay_watermark();
libraries/Image_lib.php:			return $this->text_watermark();
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	 * Watermark - Graphic Version
libraries/Image_lib.php:			$this->set_error('imglib_gd_required');
libraries/Image_lib.php:		$this->get_image_properties();
libraries/Image_lib.php:		$props 			= $this->get_image_properties($this->wm_overlay_path, TRUE);
libraries/Image_lib.php:		$wm_img  = $this->image_create_gd($this->wm_overlay_path, $wm_img_type);
libraries/Image_lib.php:		$src_img = $this->image_create_gd($this->full_src_path);
libraries/Image_lib.php:		$this->wm_vrt_alignment = strtoupper(substr($this->wm_vrt_alignment, 0, 1));
libraries/Image_lib.php:		$this->wm_hor_alignment = strtoupper(substr($this->wm_hor_alignment, 0, 1));
libraries/Image_lib.php:		if ($this->wm_vrt_alignment == 'B')
libraries/Image_lib.php:			$this->wm_vrt_offset = $this->wm_vrt_offset * -1;
libraries/Image_lib.php:		if ($this->wm_hor_alignment == 'R')
libraries/Image_lib.php:			$this->wm_hor_offset = $this->wm_hor_offset * -1;
libraries/Image_lib.php:		$x_axis = $this->wm_hor_offset + $this->wm_padding;
libraries/Image_lib.php:		$y_axis = $this->wm_vrt_offset + $this->wm_padding;
libraries/Image_lib.php:		switch ($this->wm_vrt_alignment)
libraries/Image_lib.php:			case 'M':	$y_axis += ($this->orig_height / 2) - ($wm_height / 2);
libraries/Image_lib.php:			case 'B':	$y_axis += $this->orig_height - $wm_height;
libraries/Image_lib.php:		switch ($this->wm_hor_alignment)
libraries/Image_lib.php:			case 'C':	$x_axis += ($this->orig_width / 2) - ($wm_width / 2);
libraries/Image_lib.php:			case 'R':	$x_axis += $this->orig_width - $wm_width;
libraries/Image_lib.php:		$rgba = imagecolorat($wm_img, $this->wm_x_transp, $this->wm_y_transp);
libraries/Image_lib.php:			imagecolortransparent($wm_img, imagecolorat($wm_img, $this->wm_x_transp, $this->wm_y_transp));
libraries/Image_lib.php:			imagecopymerge($src_img, $wm_img, $x_axis, $y_axis, 0, 0, $wm_width, $wm_height, $this->wm_opacity);
libraries/Image_lib.php:		if ($this->dynamic_output == TRUE)
libraries/Image_lib.php:			$this->image_display_gd($src_img);
libraries/Image_lib.php:			if ( ! $this->image_save_gd($src_img))
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	 * Watermark - Text Version
libraries/Image_lib.php:		if ( ! ($src_img = $this->image_create_gd()))
libraries/Image_lib.php:		if ($this->wm_use_truetype == TRUE AND ! file_exists($this->wm_font_path))
libraries/Image_lib.php:			$this->set_error('imglib_missing_font');
libraries/Image_lib.php:		$this->get_image_properties();
libraries/Image_lib.php:		$this->wm_font_color	= str_replace('#', '', $this->wm_font_color);
libraries/Image_lib.php:		$this->wm_shadow_color	= str_replace('#', '', $this->wm_shadow_color);
libraries/Image_lib.php:		$R1 = hexdec(substr($this->wm_font_color, 0, 2));
libraries/Image_lib.php:		$G1 = hexdec(substr($this->wm_font_color, 2, 2));
libraries/Image_lib.php:		$B1 = hexdec(substr($this->wm_font_color, 4, 2));
libraries/Image_lib.php:		$R2 = hexdec(substr($this->wm_shadow_color, 0, 2));
libraries/Image_lib.php:		$G2 = hexdec(substr($this->wm_shadow_color, 2, 2));
libraries/Image_lib.php:		$B2 = hexdec(substr($this->wm_shadow_color, 4, 2));
libraries/Image_lib.php:		if ($this->wm_vrt_alignment == 'B')
libraries/Image_lib.php:			$this->wm_vrt_offset = $this->wm_vrt_offset * -1;
libraries/Image_lib.php:		if ($this->wm_hor_alignment == 'R')
libraries/Image_lib.php:			$this->wm_hor_offset = $this->wm_hor_offset * -1;
libraries/Image_lib.php:		if ($this->wm_use_truetype == TRUE)
libraries/Image_lib.php:			if ($this->wm_font_size == '')
libraries/Image_lib.php:				$this->wm_font_size = '17';
libraries/Image_lib.php:			$fontwidth  = $this->wm_font_size-($this->wm_font_size/4);
libraries/Image_lib.php:			$fontheight = $this->wm_font_size;
libraries/Image_lib.php:			$this->wm_vrt_offset += $this->wm_font_size;
libraries/Image_lib.php:			$fontwidth  = imagefontwidth($this->wm_font_size);
libraries/Image_lib.php:			$fontheight = imagefontheight($this->wm_font_size);
libraries/Image_lib.php:		$x_axis = $this->wm_hor_offset + $this->wm_padding;
libraries/Image_lib.php:		$y_axis = $this->wm_vrt_offset + $this->wm_padding;
libraries/Image_lib.php:		if ($this->wm_use_drop_shadow == FALSE)
libraries/Image_lib.php:			$this->wm_shadow_distance = 0;
libraries/Image_lib.php:		$this->wm_vrt_alignment = strtoupper(substr($this->wm_vrt_alignment, 0, 1));
libraries/Image_lib.php:		$this->wm_hor_alignment = strtoupper(substr($this->wm_hor_alignment, 0, 1));
libraries/Image_lib.php:		switch ($this->wm_vrt_alignment)
libraries/Image_lib.php:			case "M":	$y_axis += ($this->orig_height/2)+($fontheight/2);
libraries/Image_lib.php:			case "B":	$y_axis += ($this->orig_height - $fontheight - $this->wm_shadow_distance - ($fontheight/2));
libraries/Image_lib.php:		$x_shad = $x_axis + $this->wm_shadow_distance;
libraries/Image_lib.php:		$y_shad = $y_axis + $this->wm_shadow_distance;
libraries/Image_lib.php:		switch ($this->wm_hor_alignment)
libraries/Image_lib.php:						if ($this->wm_use_drop_shadow)
libraries/Image_lib.php:							$x_shad += ($this->orig_width - $fontwidth*strlen($this->wm_text));
libraries/Image_lib.php:							$x_axis += ($this->orig_width - $fontwidth*strlen($this->wm_text));
libraries/Image_lib.php:						if ($this->wm_use_drop_shadow)
libraries/Image_lib.php:							$x_shad += floor(($this->orig_width - $fontwidth*strlen($this->wm_text))/2);
libraries/Image_lib.php:							$x_axis += floor(($this->orig_width  -$fontwidth*strlen($this->wm_text))/2);
libraries/Image_lib.php:		if ($this->wm_use_truetype)
libraries/Image_lib.php:			if ($this->wm_use_drop_shadow)
libraries/Image_lib.php:				imagettftext($src_img, $this->wm_font_size, 0, $x_shad, $y_shad, $drp_color, $this->wm_font_path, $this->wm_text);
libraries/Image_lib.php:				imagettftext($src_img, $this->wm_font_size, 0, $x_axis, $y_axis, $txt_color, $this->wm_font_path, $this->wm_text);
libraries/Image_lib.php:			if ($this->wm_use_drop_shadow)
libraries/Image_lib.php:				imagestring($src_img, $this->wm_font_size, $x_shad, $y_shad, $this->wm_text, $drp_color);
libraries/Image_lib.php:				imagestring($src_img, $this->wm_font_size, $x_axis, $y_axis, $this->wm_text, $txt_color);
libraries/Image_lib.php:		if ($this->dynamic_output == TRUE)
libraries/Image_lib.php:			$this->image_display_gd($src_img);
libraries/Image_lib.php:			$this->image_save_gd($src_img);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	 * Create Image - GD
libraries/Image_lib.php:			$path = $this->full_src_path;
libraries/Image_lib.php:			$image_type = $this->image_type;
libraries/Image_lib.php:							$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_gif_not_supported'));
libraries/Image_lib.php:							$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_jpg_not_supported'));
libraries/Image_lib.php:							$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_png_not_supported'));
libraries/Image_lib.php:		$this->set_error(array('imglib_unsupported_imagecreate'));
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	 * Write image file to disk - GD
libraries/Image_lib.php:		switch ($this->image_type)
libraries/Image_lib.php:							$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_gif_not_supported'));
libraries/Image_lib.php:						if ( ! @imagegif($resource, $this->full_dst_path))
libraries/Image_lib.php:							$this->set_error('imglib_save_failed');
libraries/Image_lib.php:							$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_jpg_not_supported'));
libraries/Image_lib.php:							@touch($this->full_dst_path); // PHP 4.4.1 bug #35060 - workaround
libraries/Image_lib.php:						if ( ! @imagejpeg($resource, $this->full_dst_path, $this->quality))
libraries/Image_lib.php:							$this->set_error('imglib_save_failed');
libraries/Image_lib.php:							$this->set_error(array('imglib_unsupported_imagecreate', 'imglib_png_not_supported'));
libraries/Image_lib.php:						if ( ! @imagepng($resource, $this->full_dst_path))
libraries/Image_lib.php:							$this->set_error('imglib_save_failed');
libraries/Image_lib.php:							$this->set_error(array('imglib_unsupported_imagecreate'));
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		header("Content-Disposition: filename={$this->source_image};");
libraries/Image_lib.php:		header("Content-Type: {$this->mime_type}");
libraries/Image_lib.php:		header('Content-Transfer-Encoding: binary');
libraries/Image_lib.php:		header('Last-Modified: '.gmdate('D, d M Y H:i:s', time()).' GMT');
libraries/Image_lib.php:		switch ($this->image_type)
libraries/Image_lib.php:			case 2		:	imagejpeg($resource, '', $this->quality);
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	 * Re-proportion Image Width/Height
libraries/Image_lib.php:	 * ratio between the full-sized image and the thumb.
libraries/Image_lib.php:	 * This function lets us re-proportion the width/height
libraries/Image_lib.php:		if ( ! is_numeric($this->width) OR ! is_numeric($this->height) OR $this->width == 0 OR $this->height == 0)
libraries/Image_lib.php:		if ( ! is_numeric($this->orig_width) OR ! is_numeric($this->orig_height) OR $this->orig_width == 0 OR $this->orig_height == 0)
libraries/Image_lib.php:		$new_width	= ceil($this->orig_width*$this->height/$this->orig_height);
libraries/Image_lib.php:		$new_height	= ceil($this->width*$this->orig_height/$this->orig_width);
libraries/Image_lib.php:		$ratio = (($this->orig_height/$this->orig_width) - ($this->height/$this->width));
libraries/Image_lib.php:		if ($this->master_dim != 'width' AND $this->master_dim != 'height')
libraries/Image_lib.php:			$this->master_dim = ($ratio < 0) ? 'width' : 'height';
libraries/Image_lib.php:		if (($this->width != $new_width) AND ($this->height != $new_height))
libraries/Image_lib.php:			if ($this->master_dim == 'height')
libraries/Image_lib.php:				$this->width = $new_width;
libraries/Image_lib.php:				$this->height = $new_height;
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:			$path = $this->full_src_path;
libraries/Image_lib.php:			$this->set_error('imglib_invalid_path');
libraries/Image_lib.php:		$this->orig_width	= $vals['0'];
libraries/Image_lib.php:		$this->orig_height	= $vals['1'];
libraries/Image_lib.php:		$this->image_type	= $vals['2'];
libraries/Image_lib.php:		$this->size_str		= $vals['3'];
libraries/Image_lib.php:		$this->mime_type	= $mime;
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		$name = ($ext === FALSE) ? $source_image : substr($source_image, 0, -strlen($ext));
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		$CI->lang->load('imglib');
libraries/Image_lib.php:				$msg = ($CI->lang->line($val) == FALSE) ? $val : $CI->lang->line($val);
libraries/Image_lib.php:				$this->error_msg[] = $msg;
libraries/Image_lib.php:			$msg = ($CI->lang->line($msg) == FALSE) ? $msg : $CI->lang->line($msg);
libraries/Image_lib.php:			$this->error_msg[] = $msg;
libraries/Image_lib.php:	// --------------------------------------------------------------------
libraries/Image_lib.php:		foreach ($this->error_msg as $val)
libraries/Form_validation.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Form_validation.php:// ------------------------------------------------------------------------
libraries/Form_validation.php:		$this->CI =& get_instance();
libraries/Form_validation.php:		$this->_config_rules = $rules;
libraries/Form_validation.php:		$this->CI->load->helper('form');
libraries/Form_validation.php:			mb_internal_encoding($this->CI->config->item('charset'));
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:				$this->set_rules($row['field'], $label, $row['rules']);
libraries/Form_validation.php:		$this->_field_data[$field] = array(
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		$this->_error_messages = array_merge($this->_error_messages, $lang);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		$this->_error_prefix = $prefix;
libraries/Form_validation.php:		$this->_error_suffix = $suffix;
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if ( ! isset($this->_field_data[$field]['error']) OR $this->_field_data[$field]['error'] == '')
libraries/Form_validation.php:			$prefix = $this->_error_prefix;
libraries/Form_validation.php:			$suffix = $this->_error_suffix;
libraries/Form_validation.php:		return $prefix.$this->_field_data[$field]['error'].$suffix;
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if (count($this->_error_array) === 0)
libraries/Form_validation.php:			$prefix = $this->_error_prefix;
libraries/Form_validation.php:			$suffix = $this->_error_suffix;
libraries/Form_validation.php:		foreach ($this->_error_array as $val)
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if (count($this->_field_data) == 0)
libraries/Form_validation.php:			if (count($this->_config_rules) == 0)
libraries/Form_validation.php:			$uri = ($group == '') ? trim($this->CI->uri->ruri_string(), '/') : $group;
libraries/Form_validation.php:			if ($uri != '' AND isset($this->_config_rules[$uri]))
libraries/Form_validation.php:				$this->set_rules($this->_config_rules[$uri]);
libraries/Form_validation.php:				$this->set_rules($this->_config_rules);
libraries/Form_validation.php:			if (count($this->_field_data) == 0)
libraries/Form_validation.php:		$this->CI->lang->load('form_validation');
libraries/Form_validation.php:		foreach ($this->_field_data as $field => $row)
libraries/Form_validation.php:				$this->_field_data[$field]['postdata'] = $this->_reduce_array($_POST, $row['keys']);
libraries/Form_validation.php:					$this->_field_data[$field]['postdata'] = $_POST[$field];
libraries/Form_validation.php:			$this->_execute($row, explode('|', $row['rules']), $this->_field_data[$field]['postdata']);		
libraries/Form_validation.php:		$total_errors = count($this->_error_array);
libraries/Form_validation.php:			$this->_safe_form_data = TRUE;
libraries/Form_validation.php:		// Now we need to re-set the POST data with the new, processed data
libraries/Form_validation.php:		$this->_reset_post_array();
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:					$array = $this->_reduce_array($array[$keys[$i]], $keys, ($i+1));
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	 * Re-populate the _POST array with our finalized and processed data
libraries/Form_validation.php:		foreach ($this->_field_data as $field => $row)
libraries/Form_validation.php:						$_POST[$row['field']] = $this->prep_for_form($row['postdata']);
libraries/Form_validation.php:							$array[$k] = $this->prep_for_form($v);
libraries/Form_validation.php:						$post_ref = $this->prep_for_form($row['postdata']);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:				$this->_execute($row, $rules, $val, $cycles);
libraries/Form_validation.php:		// --------------------------------------------------------------------
libraries/Form_validation.php:		// --------------------------------------------------------------------
libraries/Form_validation.php:				if ( ! isset($this->_error_messages[$type]))
libraries/Form_validation.php:					if (FALSE === ($line = $this->CI->lang->line($type)))
libraries/Form_validation.php:					$line = $this->_error_messages[$type];
libraries/Form_validation.php:				$message = sprintf($line, $this->_translate_fieldname($row['label']));
libraries/Form_validation.php:				$this->_field_data[$row['field']]['error'] = $message;
libraries/Form_validation.php:				if ( ! isset($this->_error_array[$row['field']]))
libraries/Form_validation.php:					$this->_error_array[$row['field']] = $message;
libraries/Form_validation.php:		// --------------------------------------------------------------------
libraries/Form_validation.php:			if ($row['is_array'] == TRUE AND is_array($this->_field_data[$row['field']]['postdata']))
libraries/Form_validation.php:				if ( ! isset($this->_field_data[$row['field']]['postdata'][$cycles]))
libraries/Form_validation.php:				$postdata = $this->_field_data[$row['field']]['postdata'][$cycles];
libraries/Form_validation.php:				$postdata = $this->_field_data[$row['field']]['postdata'];
libraries/Form_validation.php:			// --------------------------------------------------------------------
libraries/Form_validation.php:				if ( ! method_exists($this->CI, $rule))
libraries/Form_validation.php:				$result = $this->CI->$rule($postdata, $param);
libraries/Form_validation.php:				// Re-assign the result to the master data array
libraries/Form_validation.php:					$this->_field_data[$row['field']]['postdata'][$cycles] = (is_bool($result)) ? $postdata : $result;
libraries/Form_validation.php:					$this->_field_data[$row['field']]['postdata'] = (is_bool($result)) ? $postdata : $result;
libraries/Form_validation.php:							$this->_field_data[$row['field']]['postdata'][$cycles] = (is_bool($result)) ? $postdata : $result;
libraries/Form_validation.php:							$this->_field_data[$row['field']]['postdata'] = (is_bool($result)) ? $postdata : $result;
libraries/Form_validation.php:				$result = $this->$rule($postdata, $param);
libraries/Form_validation.php:					$this->_field_data[$row['field']]['postdata'][$cycles] = (is_bool($result)) ? $postdata : $result;
libraries/Form_validation.php:					$this->_field_data[$row['field']]['postdata'] = (is_bool($result)) ? $postdata : $result;
libraries/Form_validation.php:				if ( ! isset($this->_error_messages[$rule]))
libraries/Form_validation.php:					if (FALSE === ($line = $this->CI->lang->line($rule)))
libraries/Form_validation.php:					$line = $this->_error_messages[$rule];
libraries/Form_validation.php:				if (isset($this->_field_data[$param]) AND isset($this->_field_data[$param]['label']))
libraries/Form_validation.php:					$param = $this->_field_data[$param]['label'];
libraries/Form_validation.php:				$message = sprintf($line, $this->_translate_fieldname($row['label']), $param);
libraries/Form_validation.php:				$this->_field_data[$row['field']]['error'] = $message;
libraries/Form_validation.php:				if ( ! isset($this->_error_array[$row['field']]))
libraries/Form_validation.php:					$this->_error_array[$row['field']] = $message;
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:			if (FALSE === ($fieldname = $this->CI->lang->line($line)))
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if ( ! isset($this->_field_data[$field]))
libraries/Form_validation.php:		return $this->_field_data[$field]['postdata'];
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	 * Enables pull-down lists to be set to the value the user
libraries/Form_validation.php:		if ( ! isset($this->_field_data[$field]) OR ! isset($this->_field_data[$field]['postdata']))
libraries/Form_validation.php:			if ($default === TRUE AND count($this->_field_data) === 0)
libraries/Form_validation.php:		$field = $this->_field_data[$field]['postdata'];
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if ( ! isset($this->_field_data[$field]) OR ! isset($this->_field_data[$field]['postdata']))
libraries/Form_validation.php:			if ($default === TRUE AND count($this->_field_data) === 0)
libraries/Form_validation.php:		$field = $this->_field_data[$field]['postdata'];
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if ( ! isset($this->_field_data[$field]) OR ! isset($this->_field_data[$field]['postdata']))
libraries/Form_validation.php:			if ($default === TRUE AND count($this->_field_data) === 0)
libraries/Form_validation.php:		$field = $this->_field_data[$field]['postdata'];
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if (preg_match("/[^0-9]/", $val))
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if (preg_match("/[^0-9]/", $val))
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		if (preg_match("/[^0-9]/", $val))
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return ( ! preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $str)) ? FALSE : TRUE;
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:			return $this->valid_email(trim($str));
libraries/Form_validation.php:			if (trim($email) != '' && $this->valid_email(trim($email)) === FALSE)
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return $this->CI->input->valid_ip($ip);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return ( ! preg_match("/^([a-z])+$/i", $str)) ? FALSE : TRUE;
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	 * Alpha-numeric
libraries/Form_validation.php:		return ( ! preg_match("/^([a-z0-9])+$/i", $str)) ? FALSE : TRUE;
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	 * Alpha-numeric with underscores and dashes
libraries/Form_validation.php:		return ( ! preg_match("/^([-a-z0-9_-])+$/i", $str)) ? FALSE : TRUE;
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return (bool)preg_match( '/^[\-+]?[0-9]*\.?[0-9]+$/', $str);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return (bool)preg_match( '/^[\-+]?[0-9]+$/', $str);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:   		return (bool)preg_match( '/^[0-9]+$/', $str);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:    	if ( ! preg_match( '/^[0-9]+$/', $str))
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return (bool) ! preg_match('/[^a-zA-Z0-9\/\+=]/', $str);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:				$data[$key] = $this->prep_for_form($val);
libraries/Form_validation.php:		if ($this->_safe_form_data == FALSE OR $data === '')
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return $this->CI->input->strip_image_tags($str);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Form_validation.php:		return $this->CI->input->xss_clean($str);
libraries/Form_validation.php:	// --------------------------------------------------------------------
libraries/Validation.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Validation.php:// ------------------------------------------------------------------------
libraries/Validation.php:		$this->CI =& get_instance();
libraries/Validation.php:			mb_internal_encoding($this->CI->config->item('charset'));
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:			if (count($this->_fields) == 0)
libraries/Validation.php:				$this->_fields = $data;
libraries/Validation.php:		foreach($this->_fields as $key => $val)
libraries/Validation.php:			$this->$key = ( ! isset($_POST[$key])) ? '' : $this->prep_for_form($_POST[$key]);
libraries/Validation.php:			if ( ! isset($this->$error))
libraries/Validation.php:				$this->$error = '';
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:			$this->_rules[$key] = $val;
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		$this->_error_messages = array_merge($this->_error_messages, $lang);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		$this->_error_prefix = $prefix;
libraries/Validation.php:		$this->_error_suffix = $suffix;
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		if (count($_POST) == 0 OR count($this->_rules) == 0)
libraries/Validation.php:		$this->CI->lang->load('validation');
libraries/Validation.php:		foreach ($this->_rules as $field => $rules)
libraries/Validation.php:					if ( ! isset($this->_error_messages['isset']))
libraries/Validation.php:						if (FALSE === ($line = $this->CI->lang->line('isset')))
libraries/Validation.php:						$line = $this->_error_messages['isset'];
libraries/Validation.php:					$mfield = ( ! isset($this->_fields[$field])) ? $field : $this->_fields[$field];
libraries/Validation.php:					// Set the error variable.  Example: $this->username_error
libraries/Validation.php:					$this->$error = $this->_error_prefix.$message.$this->_error_suffix;
libraries/Validation.php:					$this->_error_array[] = $message;
libraries/Validation.php:			 * $_POST[$this->_current_field] == 'bla bla';
libraries/Validation.php:			$this->_current_field = $field;
libraries/Validation.php:					if ( ! method_exists($this->CI, $rule))
libraries/Validation.php:					$result = $this->CI->$rule($_POST[$field], $param);	
libraries/Validation.php:							$this->$field = $_POST[$field];
libraries/Validation.php:					$result = $this->$rule($_POST[$field], $param);
libraries/Validation.php:					if ( ! isset($this->_error_messages[$rule]))
libraries/Validation.php:						if (FALSE === ($line = $this->CI->lang->line($rule)))
libraries/Validation.php:						$line = $this->_error_messages[$rule];
libraries/Validation.php:					$mfield = ( ! isset($this->_fields[$field])) ? $field : $this->_fields[$field];
libraries/Validation.php:					$mparam = ( ! isset($this->_fields[$param])) ? $param : $this->_fields[$param];
libraries/Validation.php:					// Set the error variable.  Example: $this->username_error
libraries/Validation.php:					$this->$error = $this->_error_prefix.$message.$this->_error_suffix;
libraries/Validation.php:					$this->_error_array[] = $message;				
libraries/Validation.php:		$total_errors = count($this->_error_array);
libraries/Validation.php:			$this->_safe_form_data = TRUE;
libraries/Validation.php:		$this->set_fields();
libraries/Validation.php:		foreach ($this->_error_array as $val)
libraries/Validation.php:			$this->error_string .= $this->_error_prefix.$val.$this->_error_suffix."\n";
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		if (preg_match("/[^0-9]/", $val))
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		if (preg_match("/[^0-9]/", $val))
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		if (preg_match("/[^0-9]/", $val))
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		return ( ! preg_match("/^([a-z0-9\+_\-]+)(\.[a-z0-9\+_\-]+)*@([a-z0-9\-]+\.)+[a-z]{2,6}$/ix", $str)) ? FALSE : TRUE;
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:			return $this->valid_email(trim($str));
libraries/Validation.php:			if (trim($email) != '' && $this->valid_email(trim($email)) === FALSE)
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		return $this->CI->input->valid_ip($ip);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		return ( ! preg_match("/^([a-z])+$/i", $str)) ? FALSE : TRUE;
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	 * Alpha-numeric
libraries/Validation.php:		return ( ! preg_match("/^([a-z0-9])+$/i", $str)) ? FALSE : TRUE;
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	 * Alpha-numeric with underscores and dashes
libraries/Validation.php:		return ( ! preg_match("/^([-a-z0-9_-])+$/i", $str)) ? FALSE : TRUE;
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		return (bool)preg_match( '/^[\-+]?[0-9]*\.?[0-9]+$/', $str);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		return (bool)preg_match( '/^[\-+]?[0-9]+$/', $str);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:   		return (bool)preg_match( '/^[0-9]+$/', $str);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		if ( ! preg_match( '/^[0-9]+$/', $str))
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		return (bool) ! preg_match('/[^a-zA-Z0-9\/\+=]/', $str);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	 * Enables pull-down lists to be set to the value the user
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:				$data[$key] = $this->prep_for_form($val);
libraries/Validation.php:		if ($this->_safe_form_data == FALSE OR $data == '')
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:			$_POST[$this->_current_field] = '';
libraries/Validation.php:		$_POST[$this->_current_field] = $str;
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		$_POST[$this->_current_field] = $this->CI->input->strip_image_tags($str);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		$_POST[$this->_current_field] = $this->CI->input->xss_clean($str);
libraries/Validation.php:	// --------------------------------------------------------------------
libraries/Validation.php:		$_POST[$this->_current_field] = str_replace(array('<?php', '<?PHP', '<?', '?>'),  array('&lt;?php', '&lt;?PHP', '&lt;?', '?&gt;'), $str);
libraries/Trackback.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Trackback.php:// ------------------------------------------------------------------------
libraries/Trackback.php:	var $charset		= 'UTF-8';
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:			$this->set_error('The send() method must be passed an array');
libraries/Trackback.php:		// Pre-process the Trackback Data
libraries/Trackback.php:				$this->set_error('Required item missing: '.$item);
libraries/Trackback.php:				case 'ping_url'	: $$item = $this->extract_urls($tb_data[$item]);
libraries/Trackback.php:				case 'excerpt'	: $$item = $this->limit_characters($this->convert_xml(strip_tags(stripslashes($tb_data[$item]))));
libraries/Trackback.php:				case 'url'	 	: $$item = str_replace('&#45;', '-', $this->convert_xml(strip_tags(stripslashes($tb_data[$item]))));
libraries/Trackback.php:				default			: $$item = $this->convert_xml(strip_tags(stripslashes($tb_data[$item])));
libraries/Trackback.php:			if ($this->convert_ascii == TRUE)
libraries/Trackback.php:					$$item = $this->convert_ascii($$item);
libraries/Trackback.php:					$$item = $this->convert_ascii($$item);
libraries/Trackback.php:					$$item = $this->convert_ascii($$item);
libraries/Trackback.php:		$charset = ( ! isset($tb_data['charset'])) ? $this->charset : $tb_data['charset'];
libraries/Trackback.php:				if ($this->process($url, $data) == FALSE)
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:	 * If the data is valid it is set to the $this->data array
libraries/Trackback.php:				$this->set_error('The following required POST variable is missing: '.$val);
libraries/Trackback.php:			$this->data['charset'] = ( ! isset($_POST['charset'])) ? 'auto' : strtoupper(trim($_POST['charset']));
libraries/Trackback.php:				$_POST[$val] = mb_convert_encoding($_POST[$val], $this->charset, $this->data['charset']);
libraries/Trackback.php:			$_POST[$val] = ($val != 'url') ? $this->convert_xml(strip_tags($_POST[$val])) : strip_tags($_POST[$val]);
libraries/Trackback.php:				$_POST['excerpt'] = $this->limit_characters($_POST['excerpt']);
libraries/Trackback.php:			$this->data[$val] = $_POST[$val];
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:		echo "<?xml version=\"1.0\" encoding=\"utf-8\"?".">\n<response>\n<error>1</error>\n<message>".$message."</message>\n</response>";
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:		echo "<?xml version=\"1.0\" encoding=\"utf-8\"?".">\n<response>\n<error>0</error>\n</response>";
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:		return ( ! isset($this->data[$item])) ? '' : $this->data[$item];
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:			$this->set_error('Invalid Connection: '.$url);
libraries/Trackback.php:		if ($id = $this->get_id($url))
libraries/Trackback.php:		fputs ($fp, "Content-type: application/x-www-form-urlencoded\r\n" );
libraries/Trackback.php:		fputs ($fp, "Content-length: " . strlen($data) . "\r\n" );
libraries/Trackback.php:		$this->response = "";
libraries/Trackback.php:			$this->response .= fgets($fp, 128);
libraries/Trackback.php:		if (stristr($this->response, '<error>0</error>') === FALSE)
libraries/Trackback.php:			if (preg_match("/<message>(.*?)<\/message>/is", $this->response, $match))
libraries/Trackback.php:			$this->set_error($message);
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:		if (substr($urls, -1) == ",")
libraries/Trackback.php:			$urls = substr($urls, 0, -1);
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:			$tb_end   = $tb_array[count($tb_array)-1];
libraries/Trackback.php:				$tb_end  = $tb_array[count($tb_array)-2];
libraries/Trackback.php:			$tb_id	= $tb_array[count($tb_array)-1];
libraries/Trackback.php:			$tb_id	= $tb_array[count($tb_array)-1];
libraries/Trackback.php:				$tb_id  = $tb_array[count($tb_array)-2];
libraries/Trackback.php:		if ( ! preg_match ("/^([0-9]+)$/", $tb_id))
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:		$str = str_replace(array("&","<",">","\"", "'", "-"),
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:		$this->error_msg[] = $msg;
libraries/Trackback.php:	// --------------------------------------------------------------------
libraries/Trackback.php:		foreach ($this->error_msg as $val)
libraries/Table.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
libraries/Table.php:// ------------------------------------------------------------------------
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:		$this->template = $template;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:		$this->heading = (is_array($args[0])) ? $args[0] : $args;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:	 * Set columns.  Takes a one-dimensional array as input and creates
libraries/Table.php:	 * a multi-dimensional array with a depth equal to the number of
libraries/Table.php:		// Turn off the auto-heading feature since it's doubtful we 
libraries/Table.php:		// will want headings from a one-dimensional array
libraries/Table.php:		$this->auto_heading = FALSE;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:		$this->empty_cells = $value;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:		$this->rows[] = (is_array($args[0])) ? $args[0] : $args;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:		$this->caption = $caption;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:				$this->_set_from_object($table_data);
libraries/Table.php:				$set_heading = (count($this->heading) == 0 AND $this->auto_heading == FALSE) ? FALSE : TRUE;
libraries/Table.php:				$this->_set_from_array($table_data, $set_heading);
libraries/Table.php:		if (count($this->heading) == 0 AND count($this->rows) == 0)
libraries/Table.php:		$this->_compile_template();
libraries/Table.php:		$out = $this->template['table_open'];
libraries/Table.php:		$out .= $this->newline;		
libraries/Table.php:		if ($this->caption)
libraries/Table.php:			$out .= $this->newline;
libraries/Table.php:			$out .= '<caption>' . $this->caption . '</caption>';
libraries/Table.php:			$out .= $this->newline;
libraries/Table.php:		if (count($this->heading) > 0)
libraries/Table.php:			$out .= $this->template['heading_row_start'];
libraries/Table.php:			$out .= $this->newline;		
libraries/Table.php:			foreach($this->heading as $heading)
libraries/Table.php:				$out .= $this->template['heading_cell_start'];
libraries/Table.php:				$out .= $this->template['heading_cell_end'];
libraries/Table.php:			$out .= $this->template['heading_row_end'];
libraries/Table.php:			$out .= $this->newline;				
libraries/Table.php:		if (count($this->rows) > 0)
libraries/Table.php:			foreach($this->rows as $row)
libraries/Table.php:				$out .= $this->template['row_'.$name.'start'];
libraries/Table.php:				$out .= $this->newline;		
libraries/Table.php:					$out .= $this->template['cell_'.$name.'start'];
libraries/Table.php:						$out .= $this->empty_cells;
libraries/Table.php:					$out .= $this->template['cell_'.$name.'end'];
libraries/Table.php:				$out .= $this->template['row_'.$name.'end'];
libraries/Table.php:				$out .= $this->newline;	
libraries/Table.php:		$out .= $this->template['table_close'];
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:		$this->rows				= array();
libraries/Table.php:		$this->heading			= array();
libraries/Table.php:		$this->auto_heading		= TRUE;	
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:		if (count($this->heading) == 0)
libraries/Table.php:			$this->heading = $query->list_fields();
libraries/Table.php:		if ($query->num_rows() > 0)
libraries/Table.php:			foreach ($query->result_array() as $row)
libraries/Table.php:				$this->rows[] = $row;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php:				$this->rows[] = $data;
libraries/Table.php:			if ($i == 0 AND count($data) > 1 AND count($this->heading) == 0 AND $set_heading == TRUE)
libraries/Table.php:				$this->heading = $row;
libraries/Table.php:				$this->rows[] = $row;
libraries/Table.php:	// --------------------------------------------------------------------
libraries/Table.php: 		if ($this->template == NULL)
libraries/Table.php: 			$this->template = $this->_default_template();
libraries/Table.php:		$this->temp = $this->_default_template();
libraries/Table.php:			if ( ! isset($this->template[$val]))
libraries/Table.php:				$this->template[$val] = $this->temp[$val];
libraries/Table.php:	// --------------------------------------------------------------------
plugins/js_calendar_pi.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
plugins/js_calendar_pi.php:// ------------------------------------------------------------------------
plugins/js_calendar_pi.php: 	$this->load->plugin('js_calendar');
plugins/js_calendar_pi.php:	background-color: transparent;
plugins/js_calendar_pi.php:	background-color: #7C8BC0;
plugins/js_calendar_pi.php:	font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
plugins/js_calendar_pi.php:	font-size: 11px;
plugins/js_calendar_pi.php:	font-weight: bold;
plugins/js_calendar_pi.php:	text-align: center;
plugins/js_calendar_pi.php:	background-color: #7C8BC0;
plugins/js_calendar_pi.php:	font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
plugins/js_calendar_pi.php:	font-size: 10px;
plugins/js_calendar_pi.php:	font-weight: bold;
plugins/js_calendar_pi.php:	background-color: #7C8BC0;
plugins/js_calendar_pi.php:	font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
plugins/js_calendar_pi.php:	font-size: 10px;
plugins/js_calendar_pi.php:	font-weight: bold;
plugins/js_calendar_pi.php:	text-align:  right;
plugins/js_calendar_pi.php:	background-color: #000;
plugins/js_calendar_pi.php:	font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
plugins/js_calendar_pi.php:	font-size: 10px;
plugins/js_calendar_pi.php:	text-align: center;
plugins/js_calendar_pi.php:	background-color: #D1D7E6;
plugins/js_calendar_pi.php:	font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
plugins/js_calendar_pi.php:	font-size: 11px;
plugins/js_calendar_pi.php:	text-align: center;
plugins/js_calendar_pi.php:	background-color: #B3BCD4;
plugins/js_calendar_pi.php:	font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
plugins/js_calendar_pi.php:	font-size: 11px;
plugins/js_calendar_pi.php:	text-align: center;
plugins/js_calendar_pi.php:	background-color: #737FAC;
plugins/js_calendar_pi.php:	font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
plugins/js_calendar_pi.php:	font-size: 11px;
plugins/js_calendar_pi.php:	font-weight: bold;
plugins/js_calendar_pi.php:	text-align: center;
plugins/js_calendar_pi.php:	background-color: #fff;
plugins/js_calendar_pi.php:	background-color: #fff;
plugins/js_calendar_pi.php:$CI->load->language('calendar');
plugins/js_calendar_pi.php:<!--
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_su');?>', // Sunday, short name
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_mo');?>', // Monday, short name
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_tu');?>', // Tuesday, short name
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_wed');?>', // Wednesday, short name
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_thu');?>', // Thursday, short name
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_fri');?>', // Friday, short name
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_sat');?>' // Saturday, short name
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_january');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_february');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_march');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_april');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_mayl');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_june');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_july');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_august');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_september');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_october');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_november');?>',
plugins/js_calendar_pi.php:					'<?php echo $CI->lang->line('cal_december');?>'
plugins/js_calendar_pi.php:	str += '<td class="calnavleft" onClick="change_month(-1, \'' + this.id + '\')">&lt;&lt;<\/td>';
plugins/js_calendar_pi.php:		var displayNum = (j - this.firstDay + 1);
plugins/js_calendar_pi.php:	var dateParts = dateString[0].split('-')
plugins/js_calendar_pi.php:		switch(newMonth - 1)
plugins/js_calendar_pi.php:	nowDate.setMonth(newMonth - 1);
plugins/js_calendar_pi.php:	// selected we'll de-select it and clear the form field
plugins/js_calendar_pi.php:	else if (newMonth == -1)
plugins/js_calendar_pi.php:		cal.date_obj.setYear(cal.date_obj.getFullYear() - 1)
plugins/js_calendar_pi.php:		var hours	= (this.hours > 12) ? this.hours - 12 : this.hours;
plugins/js_calendar_pi.php:		return this.year + '-' + month + '-' + day + '  ' + hours + ':' + minutes + ' ' + ampm;		
plugins/js_calendar_pi.php:		return this.year + '-' + month + '-' + day;
plugins/js_calendar_pi.php://-->
plugins/captcha_pi.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
plugins/captcha_pi.php:// ------------------------------------------------------------------------
plugins/captcha_pi.php: 	$this->load->plugin('captcha');
plugins/captcha_pi.php:	$this->load->plugin('captcha');
plugins/captcha_pi.php:					'ip_address'	=> $this->input->ip_address(),
plugins/captcha_pi.php:	$query = $this->db->insert_string('captcha', $data);
plugins/captcha_pi.php:	$this->db->query($query);
plugins/captcha_pi.php:	$expiration = time()-7200; // Two hour limit
plugins/captcha_pi.php:	$DB->query("DELETE FROM captcha WHERE captcha_time < ".$expiration);		
plugins/captcha_pi.php:	$binds = array($_POST['captcha'], $this->input->ip_address(), $expiration);
plugins/captcha_pi.php:	$query = $this->db->query($sql, $binds);
plugins/captcha_pi.php:	$row = $query->row();
plugins/captcha_pi.php:	if ($row->count == 0)
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:			$str .= substr($pool, mt_rand(0, strlen($pool) -1), 1);
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	$angle	= ($length >= 6) ? rand(-($length-6), ($length-6)) : 0;
plugins/captcha_pi.php:	$x_axis	= rand(6, (360/$length)-16);			
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	for ($i = 0; $i < ($circles * $points) - 1; $i++)
plugins/captcha_pi.php:		$theta = $theta - $thetac;
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:			$y = rand($img_height/2, $img_height-3);
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	imagerectangle($im, 0, 0, $img_width-1, $img_height-1, $border_color);		
plugins/captcha_pi.php:	// -----------------------------------
plugins/captcha_pi.php:	// -----------------------------------
Binary file scaffolding/images/logo.jpg matches
scaffolding/views/view.php:<?php  $this->load->view('header');  ?>
scaffolding/views/view.php:<?php foreach($query->result() as $row): ?>
scaffolding/views/view.php:	<td>&nbsp;<?php echo anchor(array($base_uri, 'edit', $row->$primary), $scaff_edit); ?>&nbsp;</td>
scaffolding/views/view.php: 	<td><?php echo anchor(array($base_uri, 'delete', $row->$primary), $scaff_delete); ?></td>
scaffolding/views/view.php:	<td><?php echo form_prep($row->$field);?></td>
scaffolding/views/view.php:<?php $this->load->view('footer'); 
scaffolding/views/edit.php:<?php $this->load->view('header');  ?>
scaffolding/views/edit.php:<?php if ($field->primary_key == 1) continue; ?>
scaffolding/views/edit.php:	<td><?php echo  $field->name; ?></td>
scaffolding/views/edit.php:	<?php if ($field->type == 'blob'): ?>
scaffolding/views/edit.php:	<td><textarea class="textarea" name="<?php echo $field->name;?>" cols="60" rows="10" ><?php $f = $field->name; echo form_prep($query->$f); ?></textarea></td>
scaffolding/views/edit.php:	<td><input class="input" value="<?php $f = $field->name; echo form_prep($query->$f); ?>" name="<?php echo $field->name; ?>" size="60" /></td>
scaffolding/views/edit.php:<?php $this->load->view('footer'); 
scaffolding/views/header.php:<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
scaffolding/views/header.php:<?php $this->file(BASEPATH.'scaffolding/views/stylesheet.css'); ?>
scaffolding/views/header.php:<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
scaffolding/views/header.php:<meta http-equiv='expires' content='-1' />
scaffolding/views/header.php:<meta http-equiv= 'pragma' content='no-cache' />
scaffolding/views/delete.php:<?php  $this->load->view('header');  ?>
scaffolding/views/delete.php:<?php $this->load->view('footer'); 
scaffolding/views/no_data.php:<?php  $this->load->view('header');  ?>
scaffolding/views/no_data.php:<?php $this->load->view('footer'); 
scaffolding/views/stylesheet.css: font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
scaffolding/views/stylesheet.css: font-size: 11px;
scaffolding/views/stylesheet.css: background: #fff url(<?php echo $image_url; ?>background.jpg) repeat-x left top;
scaffolding/views/stylesheet.css: background-color: transparent;
scaffolding/views/stylesheet.css: text-decoration: none;
scaffolding/views/stylesheet.css: font-weight: bold;
scaffolding/views/stylesheet.css: background-color: transparent;
scaffolding/views/stylesheet.css: text-decoration: none;
scaffolding/views/stylesheet.css: text-decoration: none;
scaffolding/views/stylesheet.css: background-color: transparent;
scaffolding/views/stylesheet.css: background-color: transparent;
scaffolding/views/stylesheet.css: background-color: transparent;
scaffolding/views/stylesheet.css: text-align: right;
scaffolding/views/stylesheet.css: font-size: 10px;
scaffolding/views/stylesheet.css: text-align: center;
scaffolding/views/stylesheet.css: background-color: #efefef;
scaffolding/views/stylesheet.css: background-color: #eee;
scaffolding/views/stylesheet.css: font-weight: bold;
scaffolding/views/stylesheet.css: text-align: left;
scaffolding/views/stylesheet.css: background-color: #fff;
scaffolding/views/stylesheet.css: font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
scaffolding/views/stylesheet.css: font-size: 11px;
scaffolding/views/stylesheet.css: font-size: 11px;
scaffolding/views/stylesheet.css: font-family: Lucida Grande, Verdana, Geneva, Sans-serif;
scaffolding/views/stylesheet.css: font-size: 12px;
scaffolding/views/stylesheet.css: background-color: #fff;
scaffolding/views/stylesheet.css: font-size:  11px;
scaffolding/views/stylesheet.css: font-weight: normal;
scaffolding/views/stylesheet.css: background-color: transparent;
scaffolding/views/stylesheet.css: background-color: #8B0D00;
scaffolding/views/stylesheet.css: font-weight: normal;
scaffolding/views/footer.php:<p><a href="http://codeigniter.com/">CodeIgniter</a>, by <a href="http://www.EllisLab.com">EllisLab</a> -  Version <?php echo CI_VERSION ?></p>
scaffolding/views/add.php:<?php  $this->load->view('header');  ?>
scaffolding/views/add.php:<?php if ($field->primary_key == 1) continue; ?>
scaffolding/views/add.php:	<td><?php echo $field->name; echo ' '.$field->default; ?></td>
scaffolding/views/add.php:	<?php if ($field->type == 'blob'): ?>
scaffolding/views/add.php:	<td><textarea class="textarea" name="<?php echo $field->name; ?>" cols="60" rows="10" ><?php echo form_prep($field->default); ?></textarea></td>
scaffolding/views/add.php:	<td><input class="input" name="<?php echo $field->name; ?>" value="<?php echo form_prep($field->default); ?>" size="60" /></td>
scaffolding/views/add.php:<?php $this->load->view('footer'); 
scaffolding/Scaffolding.php: * @copyright	Copyright (c) 2008 - 2009, EllisLab, Inc.
scaffolding/Scaffolding.php:// ------------------------------------------------------------------------
scaffolding/Scaffolding.php:		$this->CI =& get_instance();
scaffolding/Scaffolding.php:		$this->CI->load->database("", FALSE, TRUE);			
scaffolding/Scaffolding.php:		$this->CI->load->library('pagination');
scaffolding/Scaffolding.php:		$this->CI->db->cache_off();
scaffolding/Scaffolding.php:		 * $this->load->scaffolding('table_name')
scaffolding/Scaffolding.php:		$this->current_table = $db_table;
scaffolding/Scaffolding.php:		 * the load->view function knows where to look.
scaffolding/Scaffolding.php:		$this->CI->load->_ci_view_path = BASEPATH.'scaffolding/views/';
scaffolding/Scaffolding.php:		$this->base_url = $this->CI->config->site_url().'/'.$this->CI->uri->segment(1).$this->CI->uri->slash_segment(2, 'both');
scaffolding/Scaffolding.php:		$this->base_uri = $this->CI->uri->segment(1).$this->CI->uri->slash_segment(2, 'leading');
scaffolding/Scaffolding.php:						'image_url'	=> $this->CI->config->system_url().'scaffolding/images/',
scaffolding/Scaffolding.php:						'base_uri'  => $this->base_uri,
scaffolding/Scaffolding.php:						'base_url'	=> $this->base_url,
scaffolding/Scaffolding.php:						'title'		=> $this->current_table
scaffolding/Scaffolding.php:		$this->CI->load->vars($data);
scaffolding/Scaffolding.php:		$this->lang = $this->CI->load->scaffold_language('scaffolding', '', TRUE);
scaffolding/Scaffolding.php:		$this->CI->load->vars($this->lang);
scaffolding/Scaffolding.php:		$this->CI->load->helper(array('url', 'form'));
scaffolding/Scaffolding.php:	// --------------------------------------------------------------------
scaffolding/Scaffolding.php:						'title'	=>  ( ! isset($this->lang['scaff_add'])) ? 'Add Data' : $this->lang['scaff_add'],
scaffolding/Scaffolding.php:						'fields' => $this->CI->db->field_data($this->current_table),
scaffolding/Scaffolding.php:						'action' => $this->base_uri.'/insert'
scaffolding/Scaffolding.php:		$this->CI->load->view('add', $data);
scaffolding/Scaffolding.php:	// --------------------------------------------------------------------
scaffolding/Scaffolding.php:		if ($this->CI->db->insert($this->current_table, $_POST) === FALSE)
scaffolding/Scaffolding.php:			$this->add();
scaffolding/Scaffolding.php:			redirect($this->base_uri.'/view/');
scaffolding/Scaffolding.php:	// --------------------------------------------------------------------
scaffolding/Scaffolding.php:		$total_rows = $this->CI->db->count_all($this->current_table);
scaffolding/Scaffolding.php:			return $this->CI->load->view('no_data');
scaffolding/Scaffolding.php:		$offset = $this->CI->uri->segment(4, 0);
scaffolding/Scaffolding.php:		$query = $this->CI->db->get($this->current_table, $per_page, $offset);
scaffolding/Scaffolding.php:		$fields = $this->CI->db->list_fields($this->current_table);
scaffolding/Scaffolding.php:		$this->CI->pagination->initialize(
scaffolding/Scaffolding.php:									'base_url'		 => $this->base_url.'/view',
scaffolding/Scaffolding.php:						'title'	=>  ( ! isset($this->lang['scaff_view'])) ? 'View Data' : $this->lang['scaff_view'],
scaffolding/Scaffolding.php:						'paginate'	=> $this->CI->pagination->create_links()
scaffolding/Scaffolding.php:		$this->CI->load->view('view', $data);
scaffolding/Scaffolding.php:	// --------------------------------------------------------------------
scaffolding/Scaffolding.php:		if (FALSE === ($id = $this->CI->uri->segment(4)))
scaffolding/Scaffolding.php:			return $this->view();
scaffolding/Scaffolding.php:		$primary = $this->CI->db->primary($this->current_table);				
scaffolding/Scaffolding.php:		$query = $this->CI->db->get_where($this->current_table, array($primary => $id));
scaffolding/Scaffolding.php:						'title'	=>  ( ! isset($this->lang['scaff_edit'])) ? 'Edit Data' : $this->lang['scaff_edit'],
scaffolding/Scaffolding.php:						'fields'	=> $query->field_data(),
scaffolding/Scaffolding.php:						'query'		=> $query->row(),
scaffolding/Scaffolding.php:						'action'	=> $this->base_uri.'/update/'.$this->CI->uri->segment(4)
scaffolding/Scaffolding.php:		$this->CI->load->view('edit', $data);
scaffolding/Scaffolding.php:	// --------------------------------------------------------------------
scaffolding/Scaffolding.php:		$primary = $this->CI->db->primary($this->current_table);				
scaffolding/Scaffolding.php:		$this->CI->db->update($this->current_table, $_POST, array($primary => $this->CI->uri->segment(4)));
scaffolding/Scaffolding.php:		redirect($this->base_uri.'/view/');
scaffolding/Scaffolding.php:	// --------------------------------------------------------------------
scaffolding/Scaffolding.php:		if ( ! isset($this->lang['scaff_del_confirm']))
scaffolding/Scaffolding.php:			$message = 'Are you sure you want to delete the following row: '.$this->CI->uri->segment(4);
scaffolding/Scaffolding.php:			$message = $this->lang['scaff_del_confirm'].' '.$this->CI->uri->segment(4);
scaffolding/Scaffolding.php:						'title'		=> ( ! isset($this->lang['scaff_delete'])) ? 'Delete Data' : $this->lang['scaff_delete'],
scaffolding/Scaffolding.php:						'no'		=> anchor(array($this->base_uri, 'view'), ( ! isset($this->lang['scaff_no'])) ? 'No' : $this->lang['scaff_no']),
scaffolding/Scaffolding.php:						'yes'		=> anchor(array($this->base_uri, 'do_delete', $this->CI->uri->segment(4)), ( ! isset($this->lang['scaff_yes'])) ? 'Yes' : $this->lang['scaff_yes'])
scaffolding/Scaffolding.php:		$this->CI->load->view('delete', $data);
scaffolding/Scaffolding.php:	// --------------------------------------------------------------------
scaffolding/Scaffolding.php:		$primary = $this->CI->db->primary($this->current_table);				
scaffolding/Scaffolding.php:		$this->CI->db->where($primary, $this->CI->uri->segment(4));
scaffolding/Scaffolding.php:		$this->CI->db->delete($this->current_table);
scaffolding/Scaffolding.php:		header("Refresh:0;url=".site_url(array($this->base_uri, 'view')));
